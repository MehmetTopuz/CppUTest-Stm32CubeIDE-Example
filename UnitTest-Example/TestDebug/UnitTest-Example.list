
UnitTest-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014aa4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003084  08014c84  08014c84  00024c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017d08  08017d08  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08017d08  08017d08  00027d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017d10  08017d10  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017d10  08017d10  00027d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08017d1c  08017d1c  00027d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08017d28  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20000334  0801805c  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba8  0801805c  00030ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c2d2  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000095fe  00000000  00000000  0007c636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b18  00000000  00000000  00085c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002968  00000000  00000000  00088750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de94  00000000  00000000  0008b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022431  00000000  00000000  000b8f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010294a  00000000  00000000  000db37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ddcc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d468  00000000  00000000  001ddd1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001eb184  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001eb1a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000334 	.word	0x20000334
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014c6c 	.word	0x08014c6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000338 	.word	0x20000338
 800021c:	08014c6c 	.word	0x08014c6c

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fe75 	bl	8001870 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fbd2 	bl	80013ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fba4 	bl	80013ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faaa 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fac1 	bl	80011f6 <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f97a 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe39 	bl	800295c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003e8 	.word	0x200003e8

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fcf0 	bl	80016e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	return 1;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_kill>:

int _kill(int pid, int sig)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d1e:	f010 fac3 	bl	80112a8 <__errno>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2216      	movs	r2, #22
 8000d26:	601a      	str	r2, [r3, #0]
	return -1;
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_exit>:

void _exit (int status)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ffe7 	bl	8000d14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d46:	e7fe      	b.n	8000d46 <_exit+0x12>

08000d48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d5a:	f3af 8000 	nop.w
 8000d5e:	4601      	mov	r1, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf0      	blt.n	8000d5a <_read+0x12>
	}

return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00b      	b.n	8000dae <_write+0x2a>
	{
//		__io_putchar(*ptr++);
		//ITM_SendChar(*ptr++);
		HAL_UART_Transmit(&huart1, (uint8_t *)(ptr++), 1, HAL_MAX_DELAY);
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	1c4b      	adds	r3, r1, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	2201      	movs	r2, #1
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <_write+0x3c>)
 8000da4:	f001 fd44 	bl	8002830 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3301      	adds	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	dbef      	blt.n	8000d96 <_write+0x12>
	}
	return len;
 8000db6:	687b      	ldr	r3, [r7, #4]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200003e8 	.word	0x200003e8

08000dc4 <_close>:

int _close(int file)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	return -1;
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dec:	605a      	str	r2, [r3, #4]
	return 0;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_isatty>:

int _isatty(int file)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	return 1;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
	return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_open>:

int _open(char *path, int flags, ...)
{
 8000e2c:	b40e      	push	{r1, r2, r3}
 8000e2e:	b480      	push	{r7}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	b003      	add	sp, #12
 8000e46:	4770      	bx	lr

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f010 fa16 	bl	80112a8 <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20020000 	.word	0x20020000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	20000354 	.word	0x20000354
 8000eb0:	20000ba8 	.word	0x20000ba8

08000eb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ede:	490e      	ldr	r1, [pc, #56]	; (8000f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <LoopForever+0xe>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef4:	4c0b      	ldr	r4, [pc, #44]	; (8000f24 <LoopForever+0x16>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f02:	f7ff ffd7 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f010 fded 	bl	8011ae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0a:	f002 fd43 	bl	8003994 <main>

08000f0e <LoopForever>:

LoopForever:
    b LoopForever
 8000f0e:	e7fe      	b.n	8000f0e <LoopForever>
  ldr   r0, =_estack
 8000f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8000f1c:	08017d28 	.word	0x08017d28
  ldr r2, =_sbss
 8000f20:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8000f24:	20000ba8 	.word	0x20000ba8

08000f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_2_IRQHandler>

08000f2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f939 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f80e 	bl	8000f5c <HAL_InitTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	e001      	b.n	8000f50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f4c:	f7ff fdfe 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f50:	79fb      	ldrb	r3, [r7, #7]

}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_InitTick+0x68>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d022      	beq.n	8000fb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_InitTick+0x6c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_InitTick+0x68>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f944 	bl	8001212 <HAL_SYSTICK_Config>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10f      	bne.n	8000fb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	d809      	bhi.n	8000faa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f96:	2200      	movs	r2, #0
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9e:	f000 f910 	bl	80011c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_InitTick+0x70>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e007      	b.n	8000fba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e004      	b.n	8000fba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e001      	b.n	8000fba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000000c 	.word	0x2000000c
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_IncTick+0x1c>)
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	20000b94 	.word	0x20000b94
 8000ff0:	2000000c 	.word	0x2000000c

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000b94 	.word	0x20000b94

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff40 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff90 	bl	8001100 <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5f 	bl	80010ac <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff33 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffa4 	bl	8001168 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d005      	beq.n	800124e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2204      	movs	r2, #4
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e037      	b.n	80012be <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 020e 	bic.w	r2, r2, #14
 800125c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800126c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0201 	bic.w	r2, r2, #1
 800127c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f003 021f 	and.w	r2, r3, #31
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	2101      	movs	r1, #1
 800128c:	fa01 f202 	lsl.w	r2, r1, r2
 8001290:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800129a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00c      	beq.n	80012be <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012b2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012bc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d00d      	beq.n	8001310 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2204      	movs	r2, #4
 80012f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e047      	b.n	80013a0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 020e 	bic.w	r2, r2, #14
 800131e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f202 	lsl.w	r2, r1, r2
 8001352:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800135c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00c      	beq.n	8001380 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001374:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800137e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	4798      	blx	r3
    }
  }
  return status;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ba:	e15a      	b.n	8001672 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 814c 	beq.w	800166c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d00b      	beq.n	80013f4 <HAL_GPIO_Init+0x48>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e8:	2b11      	cmp	r3, #17
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b12      	cmp	r3, #18
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	f003 0201 	and.w	r2, r3, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0xea>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b12      	cmp	r3, #18
 8001494:	d123      	bne.n	80014de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	6939      	ldr	r1, [r7, #16]
 80014da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0203 	and.w	r2, r3, #3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80a6 	beq.w	800166c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001520:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <HAL_GPIO_Init+0x2e4>)
 8001522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001524:	4a5a      	ldr	r2, [pc, #360]	; (8001690 <HAL_GPIO_Init+0x2e4>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6613      	str	r3, [r2, #96]	; 0x60
 800152c:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_GPIO_Init+0x2e4>)
 800152e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001538:	4a56      	ldr	r2, [pc, #344]	; (8001694 <HAL_GPIO_Init+0x2e8>)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	220f      	movs	r2, #15
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001562:	d01f      	beq.n	80015a4 <HAL_GPIO_Init+0x1f8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a4c      	ldr	r2, [pc, #304]	; (8001698 <HAL_GPIO_Init+0x2ec>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d019      	beq.n	80015a0 <HAL_GPIO_Init+0x1f4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a4b      	ldr	r2, [pc, #300]	; (800169c <HAL_GPIO_Init+0x2f0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d013      	beq.n	800159c <HAL_GPIO_Init+0x1f0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a4a      	ldr	r2, [pc, #296]	; (80016a0 <HAL_GPIO_Init+0x2f4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00d      	beq.n	8001598 <HAL_GPIO_Init+0x1ec>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a49      	ldr	r2, [pc, #292]	; (80016a4 <HAL_GPIO_Init+0x2f8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d007      	beq.n	8001594 <HAL_GPIO_Init+0x1e8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a48      	ldr	r2, [pc, #288]	; (80016a8 <HAL_GPIO_Init+0x2fc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_GPIO_Init+0x1e4>
 800158c:	2305      	movs	r3, #5
 800158e:	e00a      	b.n	80015a6 <HAL_GPIO_Init+0x1fa>
 8001590:	2306      	movs	r3, #6
 8001592:	e008      	b.n	80015a6 <HAL_GPIO_Init+0x1fa>
 8001594:	2304      	movs	r3, #4
 8001596:	e006      	b.n	80015a6 <HAL_GPIO_Init+0x1fa>
 8001598:	2303      	movs	r3, #3
 800159a:	e004      	b.n	80015a6 <HAL_GPIO_Init+0x1fa>
 800159c:	2302      	movs	r3, #2
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x1fa>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_GPIO_Init+0x1fa>
 80015a4:	2300      	movs	r3, #0
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	f002 0203 	and.w	r2, r2, #3
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	4093      	lsls	r3, r2
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b6:	4937      	ldr	r1, [pc, #220]	; (8001694 <HAL_GPIO_Init+0x2e8>)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_GPIO_Init+0x300>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015e8:	4a30      	ldr	r2, [pc, #192]	; (80016ac <HAL_GPIO_Init+0x300>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_GPIO_Init+0x300>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001612:	4a26      	ldr	r2, [pc, #152]	; (80016ac <HAL_GPIO_Init+0x300>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_GPIO_Init+0x300>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_GPIO_Init+0x300>)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_GPIO_Init+0x300>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_GPIO_Init+0x300>)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3301      	adds	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	f47f ae9d 	bne.w	80013bc <HAL_GPIO_Init+0x10>
  }
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000
 8001694:	40010000 	.word	0x40010000
 8001698:	48000400 	.word	0x48000400
 800169c:	48000800 	.word	0x48000800
 80016a0:	48000c00 	.word	0x48000c00
 80016a4:	48001000 	.word	0x48001000
 80016a8:	48001400 	.word	0x48001400
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f806 	bl	8001710 <HAL_GPIO_EXTI_Callback>
  }
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d141      	bne.n	80017ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001736:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d131      	bne.n	80017a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001744:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800174a:	4a46      	ldr	r2, [pc, #280]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001754:	4b43      	ldr	r3, [pc, #268]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800175c:	4a41      	ldr	r2, [pc, #260]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001762:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2232      	movs	r2, #50	; 0x32
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	4a3f      	ldr	r2, [pc, #252]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	0c9b      	lsrs	r3, r3, #18
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800177a:	e002      	b.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3b01      	subs	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178e:	d102      	bne.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f2      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001796:	4b33      	ldr	r3, [pc, #204]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a2:	d158      	bne.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e057      	b.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a8:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ae:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017b8:	e04d      	b.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c0:	d141      	bne.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c2:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ce:	d131      	bne.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2232      	movs	r2, #50	; 0x32
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001800:	0c9b      	lsrs	r3, r3, #18
 8001802:	3301      	adds	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001806:	e002      	b.n	800180e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3b01      	subs	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181a:	d102      	bne.n	8001822 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f2      	bne.n	8001808 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182e:	d112      	bne.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e011      	b.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001844:	e007      	b.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001854:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40007000 	.word	0x40007000
 8001868:	20000004 	.word	0x20000004
 800186c:	431bde83 	.word	0x431bde83

08001870 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800187a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187e:	6093      	str	r3, [r2, #8]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40007000 	.word	0x40007000

08001890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e308      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d075      	beq.n	800199a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ae:	4ba3      	ldr	r3, [pc, #652]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b8:	4ba0      	ldr	r3, [pc, #640]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_OscConfig+0x3e>
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d002      	beq.n	80018d4 <HAL_RCC_OscConfig+0x44>
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d10b      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	4b99      	ldr	r3, [pc, #612]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d05b      	beq.n	8001998 <HAL_RCC_OscConfig+0x108>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d157      	bne.n	8001998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e2e3      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f4:	d106      	bne.n	8001904 <HAL_RCC_OscConfig+0x74>
 80018f6:	4b91      	ldr	r3, [pc, #580]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x98>
 800190e:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a8a      	ldr	r2, [pc, #552]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a87      	ldr	r2, [pc, #540]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001928:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a83      	ldr	r2, [pc, #524]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b81      	ldr	r3, [pc, #516]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a80      	ldr	r2, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fb54 	bl	8000ff4 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fb50 	bl	8000ff4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e2a8      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001962:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xc0>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fb40 	bl	8000ff4 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fb3c 	bl	8000ff4 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e294      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198a:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0xe8>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d075      	beq.n	8001a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b0:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	d102      	bne.n	80019c6 <HAL_RCC_OscConfig+0x136>
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d002      	beq.n	80019cc <HAL_RCC_OscConfig+0x13c>
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d11f      	bne.n	8001a0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019cc:	4b5b      	ldr	r3, [pc, #364]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_OscConfig+0x154>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e267      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	4952      	ldr	r1, [pc, #328]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019f8:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <HAL_RCC_OscConfig+0x2b0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff faad 	bl	8000f5c <HAL_InitTick>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d043      	beq.n	8001a90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e253      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d023      	beq.n	8001a5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a14:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a48      	ldr	r2, [pc, #288]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fae8 	bl	8000ff4 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a28:	f7ff fae4 	bl	8000ff4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e23c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3a:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a46:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	061b      	lsls	r3, r3, #24
 8001a54:	4939      	ldr	r1, [pc, #228]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
 8001a5a:	e01a      	b.n	8001a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5c:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a36      	ldr	r2, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff fac4 	bl	8000ff4 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff fac0 	bl	8000ff4 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e218      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1e0>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d03c      	beq.n	8001b18 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d01c      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aac:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fa9d 	bl	8000ff4 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abe:	f7ff fa99 	bl	8000ff4 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e1f1      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0ef      	beq.n	8001abe <HAL_RCC_OscConfig+0x22e>
 8001ade:	e01b      	b.n	8001b18 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae6:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff fa80 	bl	8000ff4 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af8:	f7ff fa7c 	bl	8000ff4 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1d4      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ef      	bne.n	8001af8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80ab 	beq.w	8001c7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2b4>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e005      	b.n	8001b46 <HAL_RCC_OscConfig+0x2b6>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	20000008 	.word	0x20000008
 8001b44:	2300      	movs	r3, #0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00d      	beq.n	8001b66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4baf      	ldr	r3, [pc, #700]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	4aae      	ldr	r2, [pc, #696]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b54:	6593      	str	r3, [r2, #88]	; 0x58
 8001b56:	4bac      	ldr	r3, [pc, #688]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b62:	2301      	movs	r3, #1
 8001b64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b66:	4ba9      	ldr	r3, [pc, #676]	; (8001e0c <HAL_RCC_OscConfig+0x57c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d118      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b72:	4ba6      	ldr	r3, [pc, #664]	; (8001e0c <HAL_RCC_OscConfig+0x57c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4aa5      	ldr	r2, [pc, #660]	; (8001e0c <HAL_RCC_OscConfig+0x57c>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fa39 	bl	8000ff4 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b86:	f7ff fa35 	bl	8000ff4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e18d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b98:	4b9c      	ldr	r3, [pc, #624]	; (8001e0c <HAL_RCC_OscConfig+0x57c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d108      	bne.n	8001bbe <HAL_RCC_OscConfig+0x32e>
 8001bac:	4b96      	ldr	r3, [pc, #600]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb2:	4a95      	ldr	r2, [pc, #596]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bbc:	e024      	b.n	8001c08 <HAL_RCC_OscConfig+0x378>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d110      	bne.n	8001be8 <HAL_RCC_OscConfig+0x358>
 8001bc6:	4b90      	ldr	r3, [pc, #576]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bcc:	4a8e      	ldr	r2, [pc, #568]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bdc:	4a8a      	ldr	r2, [pc, #552]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be6:	e00f      	b.n	8001c08 <HAL_RCC_OscConfig+0x378>
 8001be8:	4b87      	ldr	r3, [pc, #540]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	4a86      	ldr	r2, [pc, #536]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf8:	4b83      	ldr	r3, [pc, #524]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	4a82      	ldr	r2, [pc, #520]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d016      	beq.n	8001c3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff f9f0 	bl	8000ff4 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff f9ec 	bl	8000ff4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e142      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2e:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ed      	beq.n	8001c18 <HAL_RCC_OscConfig+0x388>
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f9d9 	bl	8000ff4 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7ff f9d5 	bl	8000ff4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e12b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ed      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c6a:	7ffb      	ldrb	r3, [r7, #31]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	4a64      	ldr	r2, [pc, #400]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d03c      	beq.n	8001d02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01c      	beq.n	8001cca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c90:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c96:	4a5c      	ldr	r2, [pc, #368]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f9a8 	bl	8000ff4 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca8:	f7ff f9a4 	bl	8000ff4 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e0fc      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ef      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x418>
 8001cc8:	e01b      	b.n	8001d02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cca:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd0:	4a4d      	ldr	r2, [pc, #308]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cda:	f7ff f98b 	bl	8000ff4 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce2:	f7ff f987 	bl	8000ff4 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0df      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cf4:	4b44      	ldr	r3, [pc, #272]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ef      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80d3 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d0c:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	f000 808d 	beq.w	8001e34 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d15a      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a38      	ldr	r2, [pc, #224]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f961 	bl	8000ff4 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7ff f95d 	bl	8000ff4 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0b5      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_OscConfig+0x580>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6a11      	ldr	r1, [r2, #32]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d64:	3a01      	subs	r2, #1
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d6e:	0212      	lsls	r2, r2, #8
 8001d70:	4311      	orrs	r1, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d76:	0852      	lsrs	r2, r2, #1
 8001d78:	3a01      	subs	r2, #1
 8001d7a:	0552      	lsls	r2, r2, #21
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d82:	0852      	lsrs	r2, r2, #1
 8001d84:	3a01      	subs	r2, #1
 8001d86:	0652      	lsls	r2, r2, #25
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d8e:	06d2      	lsls	r2, r2, #27
 8001d90:	430a      	orrs	r2, r1
 8001d92:	491d      	ldr	r1, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff f920 	bl	8000ff4 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff f91c 	bl	8000ff4 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e074      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x528>
 8001dd6:	e06c      	b.n	8001eb2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_RCC_OscConfig+0x578>)
 8001df6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff f8f8 	bl	8000ff4 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e06:	e00e      	b.n	8001e26 <HAL_RCC_OscConfig+0x596>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7ff f8ee 	bl	8000ff4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e046      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e26:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_RCC_OscConfig+0x62c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x584>
 8001e32:	e03e      	b.n	8001eb2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e039      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e40:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <HAL_RCC_OscConfig+0x62c>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0203 	and.w	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d12c      	bne.n	8001eae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d123      	bne.n	8001eae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d11b      	bne.n	8001eae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d113      	bne.n	8001eae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	3b01      	subs	r3, #1
 8001e94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e11e      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b91      	ldr	r3, [pc, #580]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d910      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 020f 	bic.w	r2, r3, #15
 8001eee:	498c      	ldr	r1, [pc, #560]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b8a      	ldr	r3, [pc, #552]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e106      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d073      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d129      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1c:	4b81      	ldr	r3, [pc, #516]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0f4      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f2c:	f000 f99e 	bl	800226c <RCC_GetSysClockFreqFromPLLSource>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4a7c      	ldr	r2, [pc, #496]	; (8002128 <HAL_RCC_ClockConfig+0x268>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d93f      	bls.n	8001fba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f3a:	4b7a      	ldr	r3, [pc, #488]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d033      	beq.n	8001fba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d12f      	bne.n	8001fba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f5a:	4b72      	ldr	r3, [pc, #456]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f62:	4a70      	ldr	r2, [pc, #448]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e024      	b.n	8001fba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0c6      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f88:	4b66      	ldr	r3, [pc, #408]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0be      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f98:	f000 f8ce 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4a61      	ldr	r2, [pc, #388]	; (8002128 <HAL_RCC_ClockConfig+0x268>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d909      	bls.n	8001fba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fae:	4a5d      	ldr	r2, [pc, #372]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b5a      	ldr	r3, [pc, #360]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4957      	ldr	r1, [pc, #348]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fcc:	f7ff f812 	bl	8000ff4 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff f80e 	bl	8000ff4 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e095      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d023      	beq.n	8002050 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a42      	ldr	r2, [pc, #264]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 800201a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800201e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800202c:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002034:	4a3b      	ldr	r2, [pc, #236]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8002036:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800203a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4936      	ldr	r1, [pc, #216]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
 800204e:	e008      	b.n	8002062 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	d105      	bne.n	8002062 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002056:	4b33      	ldr	r3, [pc, #204]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4a32      	ldr	r2, [pc, #200]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 800205c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002060:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002062:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d21d      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 020f 	bic.w	r2, r3, #15
 8002078:	4929      	ldr	r1, [pc, #164]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002080:	f7fe ffb8 	bl	8000ff4 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe ffb4 	bl	8000ff4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e03b      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d1ed      	bne.n	8002088 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4917      	ldr	r1, [pc, #92]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	490f      	ldr	r1, [pc, #60]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ea:	f000 f825 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	490c      	ldr	r1, [pc, #48]	; (800212c <HAL_RCC_ClockConfig+0x26c>)
 80020fc:	5ccb      	ldrb	r3, [r1, r3]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x270>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x274>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe ff24 	bl	8000f5c <HAL_InitTick>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40022000 	.word	0x40022000
 8002124:	40021000 	.word	0x40021000
 8002128:	04c4b400 	.word	0x04c4b400
 800212c:	08016bb8 	.word	0x08016bb8
 8002130:	20000004 	.word	0x20000004
 8002134:	20000008 	.word	0x20000008

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800213e:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	d102      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800214a:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e047      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b08      	cmp	r3, #8
 800215a:	d102      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800215c:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e03e      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d136      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3301      	adds	r3, #1
 8002184:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800218c:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002196:	68d2      	ldr	r2, [r2, #12]
 8002198:	0a12      	lsrs	r2, r2, #8
 800219a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
      break;
 80021a4:	e00c      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b0:	68d2      	ldr	r2, [r2, #12]
 80021b2:	0a12      	lsrs	r2, r2, #8
 80021b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
      break;
 80021be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0e5b      	lsrs	r3, r3, #25
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	3301      	adds	r3, #1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	e001      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021e0:	693b      	ldr	r3, [r7, #16]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	016e3600 	.word	0x016e3600

080021fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4904      	ldr	r1, [pc, #16]	; (800223c <HAL_RCC_GetPCLK1Freq+0x28>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	08016bc8 	.word	0x08016bc8

08002240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002244:	f7ff ffda 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	0adb      	lsrs	r3, r3, #11
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4904      	ldr	r1, [pc, #16]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	08016bc8 	.word	0x08016bc8

0800226c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3301      	adds	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d10c      	bne.n	80022aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002290:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	4a14      	ldr	r2, [pc, #80]	; (80022ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800229a:	68d2      	ldr	r2, [r2, #12]
 800229c:	0a12      	lsrs	r2, r2, #8
 800229e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
    break;
 80022a8:	e00c      	b.n	80022c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022aa:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b4:	68d2      	ldr	r2, [r2, #12]
 80022b6:	0a12      	lsrs	r2, r2, #8
 80022b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    break;
 80022c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0e5b      	lsrs	r3, r3, #25
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022de:	687b      	ldr	r3, [r7, #4]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40021000 	.word	0x40021000
 80022f0:	016e3600 	.word	0x016e3600
 80022f4:	00f42400 	.word	0x00f42400

080022f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002300:	2300      	movs	r3, #0
 8002302:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002304:	2300      	movs	r3, #0
 8002306:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8098 	beq.w	8002446 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10d      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	4b40      	ldr	r3, [pc, #256]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a3f      	ldr	r2, [pc, #252]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002330:	6593      	str	r3, [r2, #88]	; 0x58
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233e:	2301      	movs	r3, #1
 8002340:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002342:	4b3a      	ldr	r3, [pc, #232]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a39      	ldr	r2, [pc, #228]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800234e:	f7fe fe51 	bl	8000ff4 <HAL_GetTick>
 8002352:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002354:	e009      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002356:	f7fe fe4d 	bl	8000ff4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d902      	bls.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	74fb      	strb	r3, [r7, #19]
        break;
 8002368:	e005      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ef      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d159      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01e      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	429a      	cmp	r2, r3
 8002396:	d019      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fe0d 	bl	8000ff4 <HAL_GetTick>
 80023da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023dc:	e00b      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7fe fe09 	bl	8000ff4 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d902      	bls.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	74fb      	strb	r3, [r7, #19]
            break;
 80023f4:	e006      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ec      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10b      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002420:	e008      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	74bb      	strb	r3, [r7, #18]
 8002426:	e005      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002428:	40021000 	.word	0x40021000
 800242c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002434:	7c7b      	ldrb	r3, [r7, #17]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243a:	4baf      	ldr	r3, [pc, #700]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	4aae      	ldr	r2, [pc, #696]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002444:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002452:	4ba9      	ldr	r3, [pc, #676]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	f023 0203 	bic.w	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	49a5      	ldr	r1, [pc, #660]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002474:	4ba0      	ldr	r3, [pc, #640]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f023 020c 	bic.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	499d      	ldr	r1, [pc, #628]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002496:	4b98      	ldr	r3, [pc, #608]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4994      	ldr	r1, [pc, #592]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b8:	4b8f      	ldr	r3, [pc, #572]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	498c      	ldr	r1, [pc, #560]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024da:	4b87      	ldr	r3, [pc, #540]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	4983      	ldr	r1, [pc, #524]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024fc:	4b7e      	ldr	r3, [pc, #504]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	497b      	ldr	r1, [pc, #492]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800251e:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4972      	ldr	r1, [pc, #456]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002540:	4b6d      	ldr	r3, [pc, #436]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	496a      	ldr	r1, [pc, #424]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002562:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	4961      	ldr	r1, [pc, #388]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002584:	4b5c      	ldr	r3, [pc, #368]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	4959      	ldr	r1, [pc, #356]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a6:	4b54      	ldr	r3, [pc, #336]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	4950      	ldr	r1, [pc, #320]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d015      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4948      	ldr	r1, [pc, #288]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025e6:	d105      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e8:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a42      	ldr	r2, [pc, #264]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002600:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	493a      	ldr	r1, [pc, #232]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261e:	d105      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002620:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a34      	ldr	r2, [pc, #208]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d015      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002638:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	492c      	ldr	r1, [pc, #176]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002656:	d105      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800265e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002662:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d015      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002670:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	491e      	ldr	r1, [pc, #120]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268e:	d105      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800269a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d015      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4910      	ldr	r1, [pc, #64]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c6:	d105      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d018      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4902      	ldr	r1, [pc, #8]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026f6:	e001      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80026f8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002704:	d105      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002706:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4a20      	ldr	r2, [pc, #128]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d015      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272c:	4917      	ldr	r1, [pc, #92]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d105      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d015      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002758:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800275c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	4909      	ldr	r1, [pc, #36]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002774:	d105      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800277c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002780:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002782:	7cbb      	ldrb	r3, [r7, #18]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000

08002790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e042      	b.n	8002828 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7fe f9ed 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2224      	movs	r2, #36	; 0x24
 80027be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fb16 	bl	8002e04 <UART_SetConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e022      	b.n	8002828 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fdd4 	bl	8003398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800280e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fe5b 	bl	80034dc <UART_CheckIdleState>
 8002826:	4603      	mov	r3, r0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002846:	2b20      	cmp	r3, #32
 8002848:	f040 8083 	bne.w	8002952 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_UART_Transmit+0x28>
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e07b      	b.n	8002954 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_UART_Transmit+0x3a>
 8002866:	2302      	movs	r3, #2
 8002868:	e074      	b.n	8002954 <HAL_UART_Transmit+0x124>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2221      	movs	r2, #33	; 0x21
 800287e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002882:	f7fe fbb7 	bl	8000ff4 <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d108      	bne.n	80028b4 <HAL_UART_Transmit+0x84>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e003      	b.n	80028bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80028c4:	e02c      	b.n	8002920 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fe4e 	bl	8003572 <UART_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e039      	b.n	8002954 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10b      	bne.n	80028fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	3302      	adds	r3, #2
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	e007      	b.n	800290e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1cc      	bne.n	80028c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	2140      	movs	r1, #64	; 0x40
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fe1b 	bl	8003572 <UART_WaitOnFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e006      	b.n	8002954 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3720      	adds	r7, #32
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d118      	bne.n	80029be <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d013      	beq.n	80029be <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d104      	bne.n	80029aa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 81fb 	beq.w	8002daa <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
      }
      return;
 80029bc:	e1f5      	b.n	8002daa <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80ef 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4b73      	ldr	r3, [pc, #460]	; (8002b98 <HAL_UART_IRQHandler+0x23c>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4b72      	ldr	r3, [pc, #456]	; (8002b9c <HAL_UART_IRQHandler+0x240>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80e4 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d010      	beq.n	8002a08 <HAL_UART_IRQHandler+0xac>
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2201      	movs	r2, #1
 80029f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d010      	beq.n	8002a34 <HAL_UART_IRQHandler+0xd8>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2202      	movs	r2, #2
 8002a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d010      	beq.n	8002a60 <HAL_UART_IRQHandler+0x104>
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00b      	beq.n	8002a60 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a56:	f043 0202 	orr.w	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d015      	beq.n	8002a96 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <HAL_UART_IRQHandler+0x23c>)
 8002a78:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2208      	movs	r2, #8
 8002a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8c:	f043 0208 	orr.w	r2, r3, #8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d011      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x168>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 816f 	beq.w	8002dae <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d011      	beq.n	8002afe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b04:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d004      	beq.n	8002b1e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d031      	beq.n	8002b82 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fda7 	bl	8003672 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	d123      	bne.n	8002b7a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b40:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d013      	beq.n	8002b72 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_UART_IRQHandler+0x244>)
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fbc0 	bl	80012dc <HAL_DMA_Abort_IT>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d017      	beq.n	8002b92 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e00f      	b.n	8002b92 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f930 	bl	8002dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e00b      	b.n	8002b92 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f92c 	bl	8002dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e007      	b.n	8002b92 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f928 	bl	8002dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b90:	e10d      	b.n	8002dae <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b92:	bf00      	nop
    return;
 8002b94:	e10b      	b.n	8002dae <HAL_UART_IRQHandler+0x452>
 8002b96:	bf00      	nop
 8002b98:	10000001 	.word	0x10000001
 8002b9c:	04000120 	.word	0x04000120
 8002ba0:	080036d7 	.word	0x080036d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	f040 80ab 	bne.w	8002d04 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a5 	beq.w	8002d04 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 809f 	beq.w	8002d04 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2210      	movs	r2, #16
 8002bcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d155      	bne.n	8002c88 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002be6:	893b      	ldrh	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80e2 	beq.w	8002db2 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002bf4:	893a      	ldrh	r2, [r7, #8]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	f080 80db 	bcs.w	8002db2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	893a      	ldrh	r2, [r7, #8]
 8002c00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d12b      	bne.n	8002c6c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c22:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c42:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0210 	bic.w	r2, r2, #16
 8002c60:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fadf 	bl	800122a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f8b3 	bl	8002dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c86:	e094      	b.n	8002db2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8087 	beq.w	8002db6 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002ca8:	897b      	ldrh	r3, [r7, #10]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8083 	beq.w	8002db6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0210 	bic.w	r2, r2, #16
 8002cf6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cf8:	897b      	ldrh	r3, [r7, #10]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f875 	bl	8002dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d02:	e058      	b.n	8002db6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00d      	beq.n	8002d2a <HAL_UART_IRQHandler+0x3ce>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fd07 	bl	8003736 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d28:	e048      	b.n	8002dbc <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d012      	beq.n	8002d5a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d104      	bne.n	8002d48 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d034      	beq.n	8002dba <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	4798      	blx	r3
    }
    return;
 8002d58:	e02f      	b.n	8002dba <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_UART_IRQHandler+0x41a>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fcc7 	bl	8003702 <UART_EndTransmit_IT>
    return;
 8002d74:	e022      	b.n	8002dbc <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_UART_IRQHandler+0x436>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fce7 	bl	800375e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d90:	e014      	b.n	8002dbc <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00f      	beq.n	8002dbc <HAL_UART_IRQHandler+0x460>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	da0c      	bge.n	8002dbc <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fcd1 	bl	800374a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002da8:	e008      	b.n	8002dbc <HAL_UART_IRQHandler+0x460>
      return;
 8002daa:	bf00      	nop
 8002dac:	e006      	b.n	8002dbc <HAL_UART_IRQHandler+0x460>
    return;
 8002dae:	bf00      	nop
 8002db0:	e004      	b.n	8002dbc <HAL_UART_IRQHandler+0x460>
      return;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <HAL_UART_IRQHandler+0x460>
      return;
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <HAL_UART_IRQHandler+0x460>
    return;
 8002dba:	bf00      	nop
  }
}
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop

08002dc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e04:	b5b0      	push	{r4, r5, r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4bb1      	ldr	r3, [pc, #708]	; (80030f4 <UART_SetConfig+0x2f0>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	69f9      	ldr	r1, [r7, #28]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4aa6      	ldr	r2, [pc, #664]	; (80030f8 <UART_SetConfig+0x2f4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	69f9      	ldr	r1, [r7, #28]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	f023 010f 	bic.w	r1, r3, #15
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a97      	ldr	r2, [pc, #604]	; (80030fc <UART_SetConfig+0x2f8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d120      	bne.n	8002ee6 <UART_SetConfig+0xe2>
 8002ea4:	4b96      	ldr	r3, [pc, #600]	; (8003100 <UART_SetConfig+0x2fc>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d816      	bhi.n	8002ee0 <UART_SetConfig+0xdc>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <UART_SetConfig+0xb4>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002ed5 	.word	0x08002ed5
 8002ec0:	08002ecf 	.word	0x08002ecf
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2301      	movs	r3, #1
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0e7      	b.n	800309e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0e4      	b.n	800309e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0e1      	b.n	800309e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0de      	b.n	800309e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0db      	b.n	800309e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a86      	ldr	r2, [pc, #536]	; (8003104 <UART_SetConfig+0x300>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d132      	bne.n	8002f56 <UART_SetConfig+0x152>
 8002ef0:	4b83      	ldr	r3, [pc, #524]	; (8003100 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d828      	bhi.n	8002f50 <UART_SetConfig+0x14c>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <UART_SetConfig+0x100>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	08002f51 	.word	0x08002f51
 8002f0c:	08002f51 	.word	0x08002f51
 8002f10:	08002f51 	.word	0x08002f51
 8002f14:	08002f45 	.word	0x08002f45
 8002f18:	08002f51 	.word	0x08002f51
 8002f1c:	08002f51 	.word	0x08002f51
 8002f20:	08002f51 	.word	0x08002f51
 8002f24:	08002f3f 	.word	0x08002f3f
 8002f28:	08002f51 	.word	0x08002f51
 8002f2c:	08002f51 	.word	0x08002f51
 8002f30:	08002f51 	.word	0x08002f51
 8002f34:	08002f4b 	.word	0x08002f4b
 8002f38:	2300      	movs	r3, #0
 8002f3a:	76fb      	strb	r3, [r7, #27]
 8002f3c:	e0af      	b.n	800309e <UART_SetConfig+0x29a>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	76fb      	strb	r3, [r7, #27]
 8002f42:	e0ac      	b.n	800309e <UART_SetConfig+0x29a>
 8002f44:	2304      	movs	r3, #4
 8002f46:	76fb      	strb	r3, [r7, #27]
 8002f48:	e0a9      	b.n	800309e <UART_SetConfig+0x29a>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	76fb      	strb	r3, [r7, #27]
 8002f4e:	e0a6      	b.n	800309e <UART_SetConfig+0x29a>
 8002f50:	2310      	movs	r3, #16
 8002f52:	76fb      	strb	r3, [r7, #27]
 8002f54:	e0a3      	b.n	800309e <UART_SetConfig+0x29a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6b      	ldr	r2, [pc, #428]	; (8003108 <UART_SetConfig+0x304>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d120      	bne.n	8002fa2 <UART_SetConfig+0x19e>
 8002f60:	4b67      	ldr	r3, [pc, #412]	; (8003100 <UART_SetConfig+0x2fc>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f6a:	2b30      	cmp	r3, #48	; 0x30
 8002f6c:	d013      	beq.n	8002f96 <UART_SetConfig+0x192>
 8002f6e:	2b30      	cmp	r3, #48	; 0x30
 8002f70:	d814      	bhi.n	8002f9c <UART_SetConfig+0x198>
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d009      	beq.n	8002f8a <UART_SetConfig+0x186>
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d810      	bhi.n	8002f9c <UART_SetConfig+0x198>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <UART_SetConfig+0x180>
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d006      	beq.n	8002f90 <UART_SetConfig+0x18c>
 8002f82:	e00b      	b.n	8002f9c <UART_SetConfig+0x198>
 8002f84:	2300      	movs	r3, #0
 8002f86:	76fb      	strb	r3, [r7, #27]
 8002f88:	e089      	b.n	800309e <UART_SetConfig+0x29a>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	76fb      	strb	r3, [r7, #27]
 8002f8e:	e086      	b.n	800309e <UART_SetConfig+0x29a>
 8002f90:	2304      	movs	r3, #4
 8002f92:	76fb      	strb	r3, [r7, #27]
 8002f94:	e083      	b.n	800309e <UART_SetConfig+0x29a>
 8002f96:	2308      	movs	r3, #8
 8002f98:	76fb      	strb	r3, [r7, #27]
 8002f9a:	e080      	b.n	800309e <UART_SetConfig+0x29a>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	76fb      	strb	r3, [r7, #27]
 8002fa0:	e07d      	b.n	800309e <UART_SetConfig+0x29a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a59      	ldr	r2, [pc, #356]	; (800310c <UART_SetConfig+0x308>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d120      	bne.n	8002fee <UART_SetConfig+0x1ea>
 8002fac:	4b54      	ldr	r3, [pc, #336]	; (8003100 <UART_SetConfig+0x2fc>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fb8:	d013      	beq.n	8002fe2 <UART_SetConfig+0x1de>
 8002fba:	2bc0      	cmp	r3, #192	; 0xc0
 8002fbc:	d814      	bhi.n	8002fe8 <UART_SetConfig+0x1e4>
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d009      	beq.n	8002fd6 <UART_SetConfig+0x1d2>
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d810      	bhi.n	8002fe8 <UART_SetConfig+0x1e4>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <UART_SetConfig+0x1cc>
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d006      	beq.n	8002fdc <UART_SetConfig+0x1d8>
 8002fce:	e00b      	b.n	8002fe8 <UART_SetConfig+0x1e4>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	76fb      	strb	r3, [r7, #27]
 8002fd4:	e063      	b.n	800309e <UART_SetConfig+0x29a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	76fb      	strb	r3, [r7, #27]
 8002fda:	e060      	b.n	800309e <UART_SetConfig+0x29a>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	76fb      	strb	r3, [r7, #27]
 8002fe0:	e05d      	b.n	800309e <UART_SetConfig+0x29a>
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	76fb      	strb	r3, [r7, #27]
 8002fe6:	e05a      	b.n	800309e <UART_SetConfig+0x29a>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	76fb      	strb	r3, [r7, #27]
 8002fec:	e057      	b.n	800309e <UART_SetConfig+0x29a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a47      	ldr	r2, [pc, #284]	; (8003110 <UART_SetConfig+0x30c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d125      	bne.n	8003044 <UART_SetConfig+0x240>
 8002ff8:	4b41      	ldr	r3, [pc, #260]	; (8003100 <UART_SetConfig+0x2fc>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003006:	d017      	beq.n	8003038 <UART_SetConfig+0x234>
 8003008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300c:	d817      	bhi.n	800303e <UART_SetConfig+0x23a>
 800300e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003012:	d00b      	beq.n	800302c <UART_SetConfig+0x228>
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d811      	bhi.n	800303e <UART_SetConfig+0x23a>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <UART_SetConfig+0x222>
 800301e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003022:	d006      	beq.n	8003032 <UART_SetConfig+0x22e>
 8003024:	e00b      	b.n	800303e <UART_SetConfig+0x23a>
 8003026:	2300      	movs	r3, #0
 8003028:	76fb      	strb	r3, [r7, #27]
 800302a:	e038      	b.n	800309e <UART_SetConfig+0x29a>
 800302c:	2302      	movs	r3, #2
 800302e:	76fb      	strb	r3, [r7, #27]
 8003030:	e035      	b.n	800309e <UART_SetConfig+0x29a>
 8003032:	2304      	movs	r3, #4
 8003034:	76fb      	strb	r3, [r7, #27]
 8003036:	e032      	b.n	800309e <UART_SetConfig+0x29a>
 8003038:	2308      	movs	r3, #8
 800303a:	76fb      	strb	r3, [r7, #27]
 800303c:	e02f      	b.n	800309e <UART_SetConfig+0x29a>
 800303e:	2310      	movs	r3, #16
 8003040:	76fb      	strb	r3, [r7, #27]
 8003042:	e02c      	b.n	800309e <UART_SetConfig+0x29a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2b      	ldr	r2, [pc, #172]	; (80030f8 <UART_SetConfig+0x2f4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d125      	bne.n	800309a <UART_SetConfig+0x296>
 800304e:	4b2c      	ldr	r3, [pc, #176]	; (8003100 <UART_SetConfig+0x2fc>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800305c:	d017      	beq.n	800308e <UART_SetConfig+0x28a>
 800305e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003062:	d817      	bhi.n	8003094 <UART_SetConfig+0x290>
 8003064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003068:	d00b      	beq.n	8003082 <UART_SetConfig+0x27e>
 800306a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306e:	d811      	bhi.n	8003094 <UART_SetConfig+0x290>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <UART_SetConfig+0x278>
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003078:	d006      	beq.n	8003088 <UART_SetConfig+0x284>
 800307a:	e00b      	b.n	8003094 <UART_SetConfig+0x290>
 800307c:	2300      	movs	r3, #0
 800307e:	76fb      	strb	r3, [r7, #27]
 8003080:	e00d      	b.n	800309e <UART_SetConfig+0x29a>
 8003082:	2302      	movs	r3, #2
 8003084:	76fb      	strb	r3, [r7, #27]
 8003086:	e00a      	b.n	800309e <UART_SetConfig+0x29a>
 8003088:	2304      	movs	r3, #4
 800308a:	76fb      	strb	r3, [r7, #27]
 800308c:	e007      	b.n	800309e <UART_SetConfig+0x29a>
 800308e:	2308      	movs	r3, #8
 8003090:	76fb      	strb	r3, [r7, #27]
 8003092:	e004      	b.n	800309e <UART_SetConfig+0x29a>
 8003094:	2310      	movs	r3, #16
 8003096:	76fb      	strb	r3, [r7, #27]
 8003098:	e001      	b.n	800309e <UART_SetConfig+0x29a>
 800309a:	2310      	movs	r3, #16
 800309c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <UART_SetConfig+0x2f4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	f040 809f 	bne.w	80031e8 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030aa:	7efb      	ldrb	r3, [r7, #27]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d837      	bhi.n	8003120 <UART_SetConfig+0x31c>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0x2b4>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030dd 	.word	0x080030dd
 80030bc:	08003121 	.word	0x08003121
 80030c0:	080030e5 	.word	0x080030e5
 80030c4:	08003121 	.word	0x08003121
 80030c8:	080030eb 	.word	0x080030eb
 80030cc:	08003121 	.word	0x08003121
 80030d0:	08003121 	.word	0x08003121
 80030d4:	08003121 	.word	0x08003121
 80030d8:	08003119 	.word	0x08003119
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030dc:	f7ff f89a 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 80030e0:	6178      	str	r0, [r7, #20]
        break;
 80030e2:	e022      	b.n	800312a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <UART_SetConfig+0x310>)
 80030e6:	617b      	str	r3, [r7, #20]
        break;
 80030e8:	e01f      	b.n	800312a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ea:	f7ff f825 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80030ee:	6178      	str	r0, [r7, #20]
        break;
 80030f0:	e01b      	b.n	800312a <UART_SetConfig+0x326>
 80030f2:	bf00      	nop
 80030f4:	cfff69f3 	.word	0xcfff69f3
 80030f8:	40008000 	.word	0x40008000
 80030fc:	40013800 	.word	0x40013800
 8003100:	40021000 	.word	0x40021000
 8003104:	40004400 	.word	0x40004400
 8003108:	40004800 	.word	0x40004800
 800310c:	40004c00 	.word	0x40004c00
 8003110:	40005000 	.word	0x40005000
 8003114:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311c:	617b      	str	r3, [r7, #20]
        break;
 800311e:	e004      	b.n	800312a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	76bb      	strb	r3, [r7, #26]
        break;
 8003128:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 811b 	beq.w	8003368 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	4a96      	ldr	r2, [pc, #600]	; (8003390 <UART_SetConfig+0x58c>)
 8003138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800313c:	461a      	mov	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	fbb3 f3f2 	udiv	r3, r3, r2
 8003144:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	d305      	bcc.n	8003162 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	d902      	bls.n	8003168 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	76bb      	strb	r3, [r7, #26]
 8003166:	e0ff      	b.n	8003368 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	4618      	mov	r0, r3
 800316c:	f04f 0100 	mov.w	r1, #0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	4a86      	ldr	r2, [pc, #536]	; (8003390 <UART_SetConfig+0x58c>)
 8003176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800317a:	b29a      	uxth	r2, r3
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f7fd fb68 	bl	8000854 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	020b      	lsls	r3, r1, #8
 8003196:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800319a:	0202      	lsls	r2, r0, #8
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	6849      	ldr	r1, [r1, #4]
 80031a0:	0849      	lsrs	r1, r1, #1
 80031a2:	4608      	mov	r0, r1
 80031a4:	f04f 0100 	mov.w	r1, #0
 80031a8:	1814      	adds	r4, r2, r0
 80031aa:	eb43 0501 	adc.w	r5, r3, r1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	4620      	mov	r0, r4
 80031ba:	4629      	mov	r1, r5
 80031bc:	f7fd fb4a 	bl	8000854 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ce:	d308      	bcc.n	80031e2 <UART_SetConfig+0x3de>
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d6:	d204      	bcs.n	80031e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	e0c2      	b.n	8003368 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	76bb      	strb	r3, [r7, #26]
 80031e6:	e0bf      	b.n	8003368 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f0:	d165      	bne.n	80032be <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80031f2:	7efb      	ldrb	r3, [r7, #27]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d828      	bhi.n	800324a <UART_SetConfig+0x446>
 80031f8:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x3fc>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	08003225 	.word	0x08003225
 8003204:	0800322d 	.word	0x0800322d
 8003208:	08003235 	.word	0x08003235
 800320c:	0800324b 	.word	0x0800324b
 8003210:	0800323b 	.word	0x0800323b
 8003214:	0800324b 	.word	0x0800324b
 8003218:	0800324b 	.word	0x0800324b
 800321c:	0800324b 	.word	0x0800324b
 8003220:	08003243 	.word	0x08003243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003224:	f7fe fff6 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8003228:	6178      	str	r0, [r7, #20]
        break;
 800322a:	e013      	b.n	8003254 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800322c:	f7ff f808 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8003230:	6178      	str	r0, [r7, #20]
        break;
 8003232:	e00f      	b.n	8003254 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003234:	4b57      	ldr	r3, [pc, #348]	; (8003394 <UART_SetConfig+0x590>)
 8003236:	617b      	str	r3, [r7, #20]
        break;
 8003238:	e00c      	b.n	8003254 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800323a:	f7fe ff7d 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 800323e:	6178      	str	r0, [r7, #20]
        break;
 8003240:	e008      	b.n	8003254 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003246:	617b      	str	r3, [r7, #20]
        break;
 8003248:	e004      	b.n	8003254 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	76bb      	strb	r3, [r7, #26]
        break;
 8003252:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8086 	beq.w	8003368 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	4a4b      	ldr	r2, [pc, #300]	; (8003390 <UART_SetConfig+0x58c>)
 8003262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003266:	461a      	mov	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fbb3 f3f2 	udiv	r3, r3, r2
 800326e:	005a      	lsls	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	441a      	add	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	b29b      	uxth	r3, r3
 8003282:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b0f      	cmp	r3, #15
 8003288:	d916      	bls.n	80032b8 <UART_SetConfig+0x4b4>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d212      	bcs.n	80032b8 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	b29b      	uxth	r3, r3
 8003296:	f023 030f 	bic.w	r3, r3, #15
 800329a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	89fb      	ldrh	r3, [r7, #14]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	89fa      	ldrh	r2, [r7, #14]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	e057      	b.n	8003368 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	76bb      	strb	r3, [r7, #26]
 80032bc:	e054      	b.n	8003368 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032be:	7efb      	ldrb	r3, [r7, #27]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d828      	bhi.n	8003316 <UART_SetConfig+0x512>
 80032c4:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <UART_SetConfig+0x4c8>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	080032f9 	.word	0x080032f9
 80032d4:	08003301 	.word	0x08003301
 80032d8:	08003317 	.word	0x08003317
 80032dc:	08003307 	.word	0x08003307
 80032e0:	08003317 	.word	0x08003317
 80032e4:	08003317 	.word	0x08003317
 80032e8:	08003317 	.word	0x08003317
 80032ec:	0800330f 	.word	0x0800330f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7fe ff90 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 80032f4:	6178      	str	r0, [r7, #20]
        break;
 80032f6:	e013      	b.n	8003320 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f8:	f7fe ffa2 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 80032fc:	6178      	str	r0, [r7, #20]
        break;
 80032fe:	e00f      	b.n	8003320 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <UART_SetConfig+0x590>)
 8003302:	617b      	str	r3, [r7, #20]
        break;
 8003304:	e00c      	b.n	8003320 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003306:	f7fe ff17 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 800330a:	6178      	str	r0, [r7, #20]
        break;
 800330c:	e008      	b.n	8003320 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003312:	617b      	str	r3, [r7, #20]
        break;
 8003314:	e004      	b.n	8003320 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	76bb      	strb	r3, [r7, #26]
        break;
 800331e:	bf00      	nop
    }

    if (pclk != 0U)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d020      	beq.n	8003368 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	4a19      	ldr	r2, [pc, #100]	; (8003390 <UART_SetConfig+0x58c>)
 800332c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003330:	461a      	mov	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	fbb3 f2f2 	udiv	r2, r3, r2
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	441a      	add	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	b29b      	uxth	r3, r3
 800334a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	d908      	bls.n	8003364 <UART_SetConfig+0x560>
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d204      	bcs.n	8003364 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	e001      	b.n	8003368 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003384:	7ebb      	ldrb	r3, [r7, #26]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bdb0      	pop	{r4, r5, r7, pc}
 800338e:	bf00      	nop
 8003390:	08016bd0 	.word	0x08016bd0
 8003394:	00f42400 	.word	0x00f42400

08003398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01a      	beq.n	80034ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003496:	d10a      	bne.n	80034ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]
  }
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034ec:	f7fd fd82 	bl	8000ff4 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d10e      	bne.n	800351e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f82f 	bl	8003572 <UART_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e025      	b.n	800356a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d10e      	bne.n	800354a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800352c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f819 	bl	8003572 <UART_WaitOnFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e00f      	b.n	800356a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	4613      	mov	r3, r2
 8003580:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003582:	e062      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d05e      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358c:	f7fd fd32 	bl	8000ff4 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	429a      	cmp	r2, r3
 800359a:	d302      	bcc.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d11d      	bne.n	80035de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e045      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02e      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fa:	d126      	bne.n	800364a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003604:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003614:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e00f      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4013      	ands	r3, r2
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	bf0c      	ite	eq
 800365a:	2301      	moveq	r3, #1
 800365c:	2300      	movne	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	429a      	cmp	r2, r3
 8003666:	d08d      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003688:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d107      	bne.n	80036b6 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0210 	bic.w	r2, r2, #16
 80036b4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff fb6f 	bl	8002dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003718:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff fb4b 	bl	8002dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UARTEx_DisableFifoMode+0x16>
 8003784:	2302      	movs	r3, #2
 8003786:	e027      	b.n	80037d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80037b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e02d      	b.n	8003858 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2224      	movs	r2, #36	; 0x24
 8003808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f84f 	bl	80038dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003874:	2302      	movs	r3, #2
 8003876:	e02d      	b.n	80038d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	; 0x24
 8003884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f811 	bl	80038dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d108      	bne.n	80038fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038fc:	e031      	b.n	8003962 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038fe:	2308      	movs	r3, #8
 8003900:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003902:	2308      	movs	r3, #8
 8003904:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	0e5b      	lsrs	r3, r3, #25
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	0f5b      	lsrs	r3, r3, #29
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003926:	7bbb      	ldrb	r3, [r7, #14]
 8003928:	7b3a      	ldrb	r2, [r7, #12]
 800392a:	4911      	ldr	r1, [pc, #68]	; (8003970 <UARTEx_SetNbDataToProcess+0x94>)
 800392c:	5c8a      	ldrb	r2, [r1, r2]
 800392e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003932:	7b3a      	ldrb	r2, [r7, #12]
 8003934:	490f      	ldr	r1, [pc, #60]	; (8003974 <UARTEx_SetNbDataToProcess+0x98>)
 8003936:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003938:	fb93 f3f2 	sdiv	r3, r3, r2
 800393c:	b29a      	uxth	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	7b7a      	ldrb	r2, [r7, #13]
 8003948:	4909      	ldr	r1, [pc, #36]	; (8003970 <UARTEx_SetNbDataToProcess+0x94>)
 800394a:	5c8a      	ldrb	r2, [r1, r2]
 800394c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003950:	7b7a      	ldrb	r2, [r7, #13]
 8003952:	4908      	ldr	r1, [pc, #32]	; (8003974 <UARTEx_SetNbDataToProcess+0x98>)
 8003954:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003956:	fb93 f3f2 	sdiv	r3, r3, r2
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	08016be8 	.word	0x08016be8
 8003974:	08016bf0 	.word	0x08016bf0

08003978 <sumOfTwoNumbers>:
 */

#include "my_lib.h"

int sumOfTwoNumbers(int a,int b)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
	return a+b;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4413      	add	r3, r2
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003998:	f7fd fac7 	bl	8000f2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800399c:	f000 f80b 	bl	80039b6 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039a0:	f000 f940 	bl	8003c24 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 80039a4:	f000 f880 	bl	8003aa8 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 80039a8:	f000 f8dc 	bl	8003b64 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { };
  CommandLineTestRunner::RunAllTests(0, av_override);
 80039ac:	4639      	mov	r1, r7
 80039ae:	2000      	movs	r0, #0
 80039b0:	f000 fbf2 	bl	8004198 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 80039b4:	e7fe      	b.n	80039b4 <main+0x20>

080039b6 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b0a8      	sub	sp, #160	; 0xa0
 80039ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039c0:	2238      	movs	r2, #56	; 0x38
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f00e fa4d 	bl	8011e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	609a      	str	r2, [r3, #8]
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039da:	463b      	mov	r3, r7
 80039dc:	2254      	movs	r2, #84	; 0x54
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f00e fa3f 	bl	8011e64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80039e6:	2000      	movs	r0, #0
 80039e8:	f7fd fe9e 	bl	8001728 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039ec:	2302      	movs	r3, #2
 80039ee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039f6:	2340      	movs	r3, #64	; 0x40
 80039f8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039fa:	2302      	movs	r3, #2
 80039fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a00:	2302      	movs	r3, #2
 8003a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003a06:	2304      	movs	r3, #4
 8003a08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003a0c:	2355      	movs	r3, #85	; 0x55
 8003a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a12:	2302      	movs	r3, #2
 8003a14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd ff31 	bl	8001890 <HAL_RCC_OscConfig>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003a3e:	f000 f961 	bl	8003d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a42:	230f      	movs	r3, #15
 8003a44:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a46:	2303      	movs	r3, #3
 8003a48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a52:	2300      	movs	r3, #0
 8003a54:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe fa2f 	bl	8001ec0 <HAL_RCC_ClockConfig>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf14      	ite	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003a72:	f000 f947 	bl	8003d04 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003a76:	2321      	movs	r3, #33	; 0x21
 8003a78:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a82:	463b      	mov	r3, r7
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fc37 	bl	80022f8 <HAL_RCCEx_PeriphCLKConfig>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003a9a:	f000 f933 	bl	8003d04 <Error_Handler>
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	37a0      	adds	r7, #160	; 0xa0
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003aae:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003ab0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ab8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aba:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003ac0:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003acc:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ace:	220c      	movs	r2, #12
 8003ad0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ad8:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003aea:	481c      	ldr	r0, [pc, #112]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003aec:	f7fe fe50 	bl	8002790 <HAL_UART_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf14      	ite	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	2300      	moveq	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003b00:	f000 f900 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b04:	2100      	movs	r1, #0
 8003b06:	4815      	ldr	r0, [pc, #84]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003b08:	f7ff fe6c 	bl	80037e4 <HAL_UARTEx_SetTxFifoThreshold>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003b1c:	f000 f8f2 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b20:	2100      	movs	r1, #0
 8003b22:	480e      	ldr	r0, [pc, #56]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003b24:	f7ff fe9c 	bl	8003860 <HAL_UARTEx_SetRxFifoThreshold>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bf14      	ite	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	2300      	moveq	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003b38:	f000 f8e4 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003b3c:	4807      	ldr	r0, [pc, #28]	; (8003b5c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003b3e:	f7ff fe18 	bl	8003772 <HAL_UARTEx_DisableFifoMode>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003b52:	f000 f8d7 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000358 	.word	0x20000358
 8003b60:	40008000 	.word	0x40008000

08003b64 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b68:	4b2c      	ldr	r3, [pc, #176]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b6a:	4a2d      	ldr	r2, [pc, #180]	; (8003c20 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b76:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b82:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b8a:	220c      	movs	r2, #12
 8003b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b8e:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bac:	481b      	ldr	r0, [pc, #108]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003bae:	f7fe fdef 	bl	8002790 <HAL_UART_Init>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003bc2:	f000 f89f 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4814      	ldr	r0, [pc, #80]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003bca:	f7ff fe0b 	bl	80037e4 <HAL_UARTEx_SetTxFifoThreshold>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf14      	ite	ne
 8003bd4:	2301      	movne	r3, #1
 8003bd6:	2300      	moveq	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003bde:	f000 f891 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003be2:	2100      	movs	r1, #0
 8003be4:	480d      	ldr	r0, [pc, #52]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003be6:	f7ff fe3b 	bl	8003860 <HAL_UARTEx_SetRxFifoThreshold>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003bfa:	f000 f883 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003bfe:	4807      	ldr	r0, [pc, #28]	; (8003c1c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c00:	f7ff fdb7 	bl	8003772 <HAL_UARTEx_DisableFifoMode>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003c14:	f000 f876 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	200003e8 	.word	0x200003e8
 8003c20:	40013800 	.word	0x40013800

08003c24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	609a      	str	r2, [r3, #8]
 8003c36:	60da      	str	r2, [r3, #12]
 8003c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c46:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c52:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	4a28      	ldr	r2, [pc, #160]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5e:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6a:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c76:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c82:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c88:	f043 0302 	orr.w	r3, r3, #2
 8003c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c8e:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2120      	movs	r1, #32
 8003c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca2:	f7fd fd05 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cac:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <_ZL12MX_GPIO_Initv+0xd8>)
 8003cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4811      	ldr	r0, [pc, #68]	; (8003d00 <_ZL12MX_GPIO_Initv+0xdc>)
 8003cbc:	f7fd fb76 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cda:	f7fd fb67 	bl	80013ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2028      	movs	r0, #40	; 0x28
 8003ce4:	f7fd fa6d 	bl	80011c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ce8:	2028      	movs	r0, #40	; 0x28
 8003cea:	f7fd fa84 	bl	80011f6 <HAL_NVIC_EnableIRQ>

}
 8003cee:	bf00      	nop
 8003cf0:	3728      	adds	r7, #40	; 0x28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	10110000 	.word	0x10110000
 8003d00:	48000800 	.word	0x48000800

08003d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d08:	b672      	cpsid	i
}
 8003d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <Error_Handler+0x8>
	...

08003d10 <_ZN38TEST_GROUP_CppUTestGroupFirstTestGroupC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "my_lib.h"

TEST_GROUP(FirstTestGroup)
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f00a f8e0 	bl	800dee0 <_ZN5UtestC1Ev>
 8003d20:	4a03      	ldr	r2, [pc, #12]	; (8003d30 <_ZN38TEST_GROUP_CppUTestGroupFirstTestGroupC1Ev+0x20>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	08016d98 	.word	0x08016d98

08003d34 <_ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD1Ev>:
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <_ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD1Ev+0x20>)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f00a f8db 	bl	800df00 <_ZN5UtestD1Ev>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	08016d98 	.word	0x08016d98

08003d58 <_ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD0Ev>:
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ffe7 	bl	8003d34 <_ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD1Ev>
 8003d66:	2104      	movs	r1, #4
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f001 fef7 	bl	8005b5c <_ZdlPvj>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_ZN34TEST_FirstTestGroup_FirstTest_TestC1Ev>:
{

};
TEST(FirstTestGroup, FirstTest)
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ffc4 	bl	8003d10 <_ZN38TEST_GROUP_CppUTestGroupFirstTestGroupC1Ev>
 8003d88:	4a03      	ldr	r2, [pc, #12]	; (8003d98 <_ZN34TEST_FirstTestGroup_FirstTest_TestC1Ev+0x20>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	08016d78 	.word	0x08016d78

08003d9c <_ZN39TEST_FirstTestGroup_FirstTest_TestShell10createTestEv>:
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	220f      	movs	r2, #15
 8003da6:	4906      	ldr	r1, [pc, #24]	; (8003dc0 <_ZN39TEST_FirstTestGroup_FirstTest_TestShell10createTestEv+0x24>)
 8003da8:	2004      	movs	r0, #4
 8003daa:	f001 fec3 	bl	8005b34 <_ZnwjPKci>
 8003dae:	4604      	mov	r4, r0
 8003db0:	4620      	mov	r0, r4
 8003db2:	f7ff ffe1 	bl	8003d78 <_ZN34TEST_FirstTestGroup_FirstTest_TestC1Ev>
 8003db6:	4623      	mov	r3, r4
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd90      	pop	{r4, r7, pc}
 8003dc0:	08014c84 	.word	0x08014c84

08003dc4 <_ZN39TEST_FirstTestGroup_FirstTest_TestShellC1Ev>:
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f008 fcb6 	bl	800c740 <_ZN10UtestShellC1Ev>
 8003dd4:	4a03      	ldr	r2, [pc, #12]	; (8003de4 <_ZN39TEST_FirstTestGroup_FirstTest_TestShellC1Ev+0x20>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	08016ccc 	.word	0x08016ccc

08003de8 <_ZN34TEST_FirstTestGroup_FirstTest_Test8testBodyEv>:
{
 8003de8:	b5b0      	push	{r4, r5, r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af04      	add	r7, sp, #16
 8003dee:	6078      	str	r0, [r7, #4]
	 STRCMP_EQUAL("topuz", "topuz");
 8003df0:	f00a f84c 	bl	800de8c <_ZN10UtestShell10getCurrentEv>
 8003df4:	4604      	mov	r4, r0
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	681d      	ldr	r5, [r3, #0]
 8003dfc:	f00a f856 	bl	800deac <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003e00:	4603      	mov	r3, r0
 8003e02:	9302      	str	r3, [sp, #8]
 8003e04:	2311      	movs	r3, #17
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <_ZN34TEST_FirstTestGroup_FirstTest_Test8testBodyEv+0x38>)
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4a05      	ldr	r2, [pc, #20]	; (8003e24 <_ZN34TEST_FirstTestGroup_FirstTest_Test8testBodyEv+0x3c>)
 8003e10:	4904      	ldr	r1, [pc, #16]	; (8003e24 <_ZN34TEST_FirstTestGroup_FirstTest_Test8testBodyEv+0x3c>)
 8003e12:	4620      	mov	r0, r4
 8003e14:	47a8      	blx	r5
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	08014c84 	.word	0x08014c84
 8003e24:	08014c98 	.word	0x08014c98

08003e28 <_ZN35TEST_FirstTestGroup_SecondTest_TestC1Ev>:

TEST(FirstTestGroup, SecondTest)
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ff6c 	bl	8003d10 <_ZN38TEST_GROUP_CppUTestGroupFirstTestGroupC1Ev>
 8003e38:	4a03      	ldr	r2, [pc, #12]	; (8003e48 <_ZN35TEST_FirstTestGroup_SecondTest_TestC1Ev+0x20>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	08016cac 	.word	0x08016cac

08003e4c <_ZN40TEST_FirstTestGroup_SecondTest_TestShell10createTestEv>:
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	2214      	movs	r2, #20
 8003e56:	4906      	ldr	r1, [pc, #24]	; (8003e70 <_ZN40TEST_FirstTestGroup_SecondTest_TestShell10createTestEv+0x24>)
 8003e58:	2004      	movs	r0, #4
 8003e5a:	f001 fe6b 	bl	8005b34 <_ZnwjPKci>
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4620      	mov	r0, r4
 8003e62:	f7ff ffe1 	bl	8003e28 <_ZN35TEST_FirstTestGroup_SecondTest_TestC1Ev>
 8003e66:	4623      	mov	r3, r4
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd90      	pop	{r4, r7, pc}
 8003e70:	08014c84 	.word	0x08014c84

08003e74 <_ZN40TEST_FirstTestGroup_SecondTest_TestShellC1Ev>:
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f008 fc5e 	bl	800c740 <_ZN10UtestShellC1Ev>
 8003e84:	4a03      	ldr	r2, [pc, #12]	; (8003e94 <_ZN40TEST_FirstTestGroup_SecondTest_TestShellC1Ev+0x20>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	08016c00 	.word	0x08016c00

08003e98 <_ZN35TEST_FirstTestGroup_SecondTest_Test8testBodyEv>:
{
 8003e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	6078      	str	r0, [r7, #4]
	LONGS_EQUAL(5,sumOfTwoNumbers(2, 2));
 8003ea0:	f009 fff4 	bl	800de8c <_ZN10UtestShell10getCurrentEv>
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	3338      	adds	r3, #56	; 0x38
 8003eaa:	681d      	ldr	r5, [r3, #0]
 8003eac:	2102      	movs	r1, #2
 8003eae:	2002      	movs	r0, #2
 8003eb0:	f7ff fd62 	bl	8003978 <sumOfTwoNumbers>
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	f009 fff9 	bl	800deac <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	9302      	str	r3, [sp, #8]
 8003ebe:	2316      	movs	r3, #22
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <_ZN35TEST_FirstTestGroup_SecondTest_Test8testBodyEv+0x40>)
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <_ZN35TEST_FirstTestGroup_SecondTest_Test8testBodyEv+0x44>)
 8003ec8:	4632      	mov	r2, r6
 8003eca:	2105      	movs	r1, #5
 8003ecc:	4620      	mov	r0, r4
 8003ece:	47a8      	blx	r5
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed8:	08014c84 	.word	0x08014c84
 8003edc:	08014ca0 	.word	0x08014ca0

08003ee0 <_ZN40TEST_FirstTestGroup_SecondTest_TestShellD1Ev>:
TEST(FirstTestGroup, SecondTest)
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <_ZN40TEST_FirstTestGroup_SecondTest_TestShellD1Ev+0x20>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f008 fc79 	bl	800c7e8 <_ZN10UtestShellD1Ev>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	08016c00 	.word	0x08016c00

08003f04 <_ZN40TEST_FirstTestGroup_SecondTest_TestShellD0Ev>:
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ffe7 	bl	8003ee0 <_ZN40TEST_FirstTestGroup_SecondTest_TestShellD1Ev>
 8003f12:	211c      	movs	r1, #28
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f001 fe21 	bl	8005b5c <_ZdlPvj>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_ZN35TEST_FirstTestGroup_SecondTest_TestD1Ev>:
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <_ZN35TEST_FirstTestGroup_SecondTest_TestD1Ev+0x20>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fefd 	bl	8003d34 <_ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD1Ev>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	08016cac 	.word	0x08016cac

08003f48 <_ZN35TEST_FirstTestGroup_SecondTest_TestD0Ev>:
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ffe7 	bl	8003f24 <_ZN35TEST_FirstTestGroup_SecondTest_TestD1Ev>
 8003f56:	2104      	movs	r1, #4
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f001 fdff 	bl	8005b5c <_ZdlPvj>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <_ZN39TEST_FirstTestGroup_FirstTest_TestShellD1Ev>:
TEST(FirstTestGroup, FirstTest)
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <_ZN39TEST_FirstTestGroup_FirstTest_TestShellD1Ev+0x20>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f008 fc35 	bl	800c7e8 <_ZN10UtestShellD1Ev>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	08016ccc 	.word	0x08016ccc

08003f8c <_ZN39TEST_FirstTestGroup_FirstTest_TestShellD0Ev>:
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ffe7 	bl	8003f68 <_ZN39TEST_FirstTestGroup_FirstTest_TestShellD1Ev>
 8003f9a:	211c      	movs	r1, #28
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f001 fddd 	bl	8005b5c <_ZdlPvj>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZN34TEST_FirstTestGroup_FirstTest_TestD1Ev>:
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	4a05      	ldr	r2, [pc, #20]	; (8003fcc <_ZN34TEST_FirstTestGroup_FirstTest_TestD1Ev+0x20>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff feb9 	bl	8003d34 <_ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD1Ev>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	08016d78 	.word	0x08016d78

08003fd0 <_ZN34TEST_FirstTestGroup_FirstTest_TestD0Ev>:
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ffe7 	bl	8003fac <_ZN34TEST_FirstTestGroup_FirstTest_TestD1Ev>
 8003fde:	2104      	movs	r1, #4
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f001 fdbb 	bl	8005b5c <_ZdlPvj>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_Z41__static_initialization_and_destruction_0ii>:
}
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d11e      	bne.n	800403e <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004006:	4293      	cmp	r3, r2
 8004008:	d119      	bne.n	800403e <_Z41__static_initialization_and_destruction_0ii+0x4e>
TEST(FirstTestGroup, FirstTest)
 800400a:	4819      	ldr	r0, [pc, #100]	; (8004070 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800400c:	f7ff feda 	bl	8003dc4 <_ZN39TEST_FirstTestGroup_FirstTest_TestShellC1Ev>
 8004010:	230f      	movs	r3, #15
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	4b17      	ldr	r3, [pc, #92]	; (8004078 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800401a:	4a18      	ldr	r2, [pc, #96]	; (800407c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800401c:	4914      	ldr	r1, [pc, #80]	; (8004070 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800401e:	4818      	ldr	r0, [pc, #96]	; (8004080 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004020:	f00a f9cc 	bl	800e3bc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(FirstTestGroup, SecondTest)
 8004024:	4817      	ldr	r0, [pc, #92]	; (8004084 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004026:	f7ff ff25 	bl	8003e74 <_ZN40TEST_FirstTestGroup_SecondTest_TestShellC1Ev>
 800402a:	2314      	movs	r3, #20
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004034:	4a11      	ldr	r2, [pc, #68]	; (800407c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004036:	4913      	ldr	r1, [pc, #76]	; (8004084 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004038:	4814      	ldr	r0, [pc, #80]	; (800408c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800403a:	f00a f9bf 	bl	800e3bc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d110      	bne.n	8004066 <_Z41__static_initialization_and_destruction_0ii+0x76>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800404a:	4293      	cmp	r3, r2
 800404c:	d10b      	bne.n	8004066 <_Z41__static_initialization_and_destruction_0ii+0x76>
 800404e:	480f      	ldr	r0, [pc, #60]	; (800408c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004050:	f00a f9de 	bl	800e410 <_ZN13TestInstallerD1Ev>
 8004054:	480b      	ldr	r0, [pc, #44]	; (8004084 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004056:	f7ff ff43 	bl	8003ee0 <_ZN40TEST_FirstTestGroup_SecondTest_TestShellD1Ev>
TEST(FirstTestGroup, FirstTest)
 800405a:	4809      	ldr	r0, [pc, #36]	; (8004080 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800405c:	f00a f9d8 	bl	800e410 <_ZN13TestInstallerD1Ev>
 8004060:	4803      	ldr	r0, [pc, #12]	; (8004070 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004062:	f7ff ff81 	bl	8003f68 <_ZN39TEST_FirstTestGroup_FirstTest_TestShellD1Ev>
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000478 	.word	0x20000478
 8004074:	08014c84 	.word	0x08014c84
 8004078:	08014cd0 	.word	0x08014cd0
 800407c:	08014cdc 	.word	0x08014cdc
 8004080:	20000494 	.word	0x20000494
 8004084:	20000498 	.word	0x20000498
 8004088:	08014cec 	.word	0x08014cec
 800408c:	200004b4 	.word	0x200004b4

08004090 <_GLOBAL__sub_I_externTestGroupFirstTestGroup>:
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
 8004094:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004098:	2001      	movs	r0, #1
 800409a:	f7ff ffa9 	bl	8003ff0 <_Z41__static_initialization_and_destruction_0ii>
 800409e:	bd80      	pop	{r7, pc}

080040a0 <_GLOBAL__sub_D_externTestGroupFirstTestGroup>:
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040a8:	2000      	movs	r0, #0
 80040aa:	f7ff ffa1 	bl	8003ff0 <_Z41__static_initialization_and_destruction_0ii>
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
    }
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
    }
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
    }
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80040f8:	b590      	push	{r4, r7, lr}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ffed 	bl	80040e0 <_ZNK10TestResult15getFailureCountEv>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <_ZNK10TestResult9isFailureEv+0x2a>
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff ffcf 	bl	80040b0 <_ZNK10TestResult11getRunCountEv>
 8004112:	4604      	mov	r4, r0
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff ffd7 	bl	80040c8 <_ZNK10TestResult15getIgnoredCountEv>
 800411a:	4603      	mov	r3, r0
 800411c:	4423      	add	r3, r4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <_ZNK10TestResult9isFailureEv+0x2e>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <_ZNK10TestResult9isFailureEv+0x30>
 8004126:	2300      	movs	r3, #0
    }
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}

08004130 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
    {
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4618      	mov	r0, r3
 800413c:	f005 fffe 	bl	800a13c <_ZN10TestOutputC1Ev>
 8004140:	4a03      	ldr	r2, [pc, #12]	; (8004150 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	601a      	str	r2, [r3, #0]
    }
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	080172d8 	.word	0x080172d8

08004154 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
    {
 800415c:	4a05      	ldr	r2, [pc, #20]	; (8004174 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4618      	mov	r0, r3
 8004166:	f006 f807 	bl	800a178 <_ZN10TestOutputD1Ev>
    }
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	080172d8 	.word	0x080172d8

08004178 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    }
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ffe7 	bl	8004154 <_ZN17ConsoleTestOutputD1Ev>
 8004186:	2110      	movs	r1, #16
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f001 fce7 	bl	8005b5c <_ZdlPvj>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8004198:	b5b0      	push	{r4, r5, r7, lr}
 800419a:	b098      	sub	sp, #96	; 0x60
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
    int result = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 80041a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ffc0 	bl	8004130 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 80041b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041b4:	4935      	ldr	r1, [pc, #212]	; (800428c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80041b6:	4618      	mov	r0, r3
 80041b8:	f002 fba5 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 80041bc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80041c0:	f107 0318 	add.w	r3, r7, #24
 80041c4:	2200      	movs	r2, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 ff6a 	bl	80060a0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 80041cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041d0:	4618      	mov	r0, r3
 80041d2:	f002 ff50 	bl	8007076 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 80041d6:	f107 0318 	add.w	r3, r7, #24
 80041da:	2101      	movs	r1, #1
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 ff2f 	bl	8006040 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 80041e2:	f007 fd39 	bl	800bc58 <_ZN12TestRegistry18getCurrentRegistryEv>
 80041e6:	4603      	mov	r3, r0
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	3234      	adds	r2, #52	; 0x34
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	f107 0118 	add.w	r1, r7, #24
 80041f2:	4618      	mov	r0, r3
 80041f4:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80041f6:	f007 fd2f 	bl	800bc58 <_ZN12TestRegistry18getCurrentRegistryEv>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f107 0008 	add.w	r0, r7, #8
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	f000 f844 	bl	8004290 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8004208:	f107 0308 	add.w	r3, r7, #8
 800420c:	4618      	mov	r0, r3
 800420e:	f000 f899 	bl	8004344 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8004212:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8004214:	f107 0308 	add.w	r3, r7, #8
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f863 	bl	80042e4 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 800421e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10c      	bne.n	800423e <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8004224:	f107 0318 	add.w	r3, r7, #24
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f002 f83a 	bl	80062a4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8004230:	4602      	mov	r2, r0
 8004232:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f006 f83f 	bl	800a2bc <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 800423e:	f007 fd0b 	bl	800bc58 <_ZN12TestRegistry18getCurrentRegistryEv>
 8004242:	4604      	mov	r4, r0
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	3344      	adds	r3, #68	; 0x44
 8004248:	681d      	ldr	r5, [r3, #0]
 800424a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800424e:	490f      	ldr	r1, [pc, #60]	; (800428c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8004250:	4618      	mov	r0, r3
 8004252:	f002 fb58 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8004256:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800425a:	4619      	mov	r1, r3
 800425c:	4620      	mov	r0, r4
 800425e:	47a8      	blx	r5
 8004260:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004264:	4618      	mov	r0, r3
 8004266:	f002 ff06 	bl	8007076 <_ZN12SimpleStringD1Ev>
    return result;
 800426a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800426c:	f107 0318 	add.w	r3, r7, #24
 8004270:	4618      	mov	r0, r3
 8004272:	f001 ff4d 	bl	8006110 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8004276:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ff6a 	bl	8004154 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8004280:	4623      	mov	r3, r4
}
 8004282:	4618      	mov	r0, r3
 8004284:	3760      	adds	r7, #96	; 0x60
 8004286:	46bd      	mov	sp, r7
 8004288:	bdb0      	pop	{r4, r5, r7, pc}
 800428a:	bf00      	nop
 800428c:	08014cf8 	.word	0x08014cf8

08004290 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800429e:	4a0f      	ldr	r2, [pc, #60]	; (80042dc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	605a      	str	r2, [r3, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 80042b6:	2241      	movs	r2, #65	; 0x41
 80042b8:	4909      	ldr	r1, [pc, #36]	; (80042e0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 80042ba:	2038      	movs	r0, #56	; 0x38
 80042bc:	f001 fc3a 	bl	8005b34 <_ZnwjPKci>
 80042c0:	4604      	mov	r4, r0
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	4620      	mov	r0, r4
 80042c8:	f00a fa50 	bl	800e76c <_ZN20CommandLineArgumentsC1EiPKPKc>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	609c      	str	r4, [r3, #8]
}
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd90      	pop	{r4, r7, pc}
 80042da:	bf00      	nop
 80042dc:	08016db8 	.word	0x08016db8
 80042e0:	08014d0c 	.word	0x08014d0c

080042e4 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d004      	beq.n	8004304 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	3204      	adds	r2, #4
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	4790      	blx	r2
    delete output_;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	3204      	adds	r2, #4
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	4790      	blx	r2
}
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	08016db8 	.word	0x08016db8

08004324 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
}
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ffd9 	bl	80042e4 <_ZN21CommandLineTestRunnerD1Ev>
 8004332:	2110      	movs	r1, #16
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f001 fc11 	bl	8005b5c <_ZdlPvj>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8004344:	b5b0      	push	{r4, r5, r7, lr}
 8004346:	b08c      	sub	sp, #48	; 0x30
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 800434c:	2301      	movs	r3, #1
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8004350:	f107 031c 	add.w	r3, r7, #28
 8004354:	4929      	ldr	r1, [pc, #164]	; (80043fc <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8004356:	4618      	mov	r0, r3
 8004358:	f002 fad5 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800435c:	f107 021c 	add.w	r2, r7, #28
 8004360:	f107 0308 	add.w	r3, r7, #8
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f007 f834 	bl	800b3d4 <_ZN16SetPointerPluginC1ERK12SimpleString>
 800436c:	f107 031c 	add.w	r3, r7, #28
 8004370:	4618      	mov	r0, r3
 8004372:	f002 fe80 	bl	8007076 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3334      	adds	r3, #52	; 0x34
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f107 0108 	add.w	r1, r7, #8
 8004388:	4610      	mov	r0, r2
 800438a:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	333c      	adds	r3, #60	; 0x3c
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4610      	mov	r0, r2
 800439c:	4798      	blx	r3
 800439e:	4603      	mov	r3, r0
 80043a0:	4619      	mov	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa3e 	bl	8004824 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8ac 	bl	800450c <_ZN21CommandLineTestRunner11runAllTestsEv>
 80043b4:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68dd      	ldr	r5, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3344      	adds	r3, #68	; 0x44
 80043c2:	681c      	ldr	r4, [r3, #0]
 80043c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c8:	490c      	ldr	r1, [pc, #48]	; (80043fc <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80043ca:	4618      	mov	r0, r3
 80043cc:	f002 fa9b 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 80043d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d4:	4619      	mov	r1, r3
 80043d6:	4628      	mov	r0, r5
 80043d8:	47a0      	blx	r4
 80043da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043de:	4618      	mov	r0, r3
 80043e0:	f002 fe49 	bl	8007076 <_ZN12SimpleStringD1Ev>
    return testResult;
 80043e4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 faaa 	bl	8004944 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80043f0:	4623      	mov	r3, r4
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3730      	adds	r7, #48	; 0x30
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bdb0      	pop	{r4, r5, r7, pc}
 80043fa:	bf00      	nop
 80043fc:	08014d30 	.word	0x08014d30

08004400 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8004400:	b5b0      	push	{r4, r5, r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68dd      	ldr	r5, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3330      	adds	r3, #48	; 0x30
 8004414:	681c      	ldr	r4, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f00a fee6 	bl	800f1ec <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8004420:	4603      	mov	r3, r0
 8004422:	4619      	mov	r1, r3
 8004424:	4628      	mov	r0, r5
 8004426:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68dd      	ldr	r5, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	332c      	adds	r3, #44	; 0x2c
 8004434:	681c      	ldr	r4, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4618      	mov	r0, r3
 800443c:	f00a fee2 	bl	800f204 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8004440:	4603      	mov	r3, r0
 8004442:	4619      	mov	r1, r3
 8004444:	4628      	mov	r0, r5
 8004446:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4618      	mov	r0, r3
 800444e:	f00a fe31 	bl	800f0b4 <_ZNK20CommandLineArguments9isVerboseEv>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3320      	adds	r3, #32
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2101      	movs	r1, #1
 8004468:	4610      	mov	r0, r2
 800446a:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	4618      	mov	r0, r3
 8004472:	f00a fe2b 	bl	800f0cc <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3320      	adds	r3, #32
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2102      	movs	r1, #2
 800448c:	4610      	mov	r0, r2
 800448e:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4618      	mov	r0, r3
 8004496:	f00a fe25 	bl	800f0e4 <_ZNK20CommandLineArguments7isColorEv>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3324      	adds	r3, #36	; 0x24
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4610      	mov	r0, r2
 80044b0:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f00a fe50 	bl	800f15c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3360      	adds	r3, #96	; 0x60
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4610      	mov	r0, r2
 80044d2:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4618      	mov	r0, r3
 80044da:	f00a fe33 	bl	800f144 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f007 fc31 	bl	800bd50 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f00a fe56 	bl	800f1a4 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80044fe:	f009 fce1 	bl	800dec4 <_ZN10UtestShell14setCrashOnFailEv>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800450c <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 800450c:	b5b0      	push	{r4, r5, r7, lr}
 800450e:	b094      	sub	sp, #80	; 0x50
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff73 	bl	8004400 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	4618      	mov	r0, r3
 800452c:	f00a fe22 	bl	800f174 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8004530:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4618      	mov	r0, r3
 8004538:	f00a fde0 	bl	800f0fc <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d019      	beq.n	8004576 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	f107 0308 	add.w	r3, r7, #8
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f007 fdc7 	bl	800c0e0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3320      	adds	r3, #32
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f107 0108 	add.w	r1, r7, #8
 8004564:	4610      	mov	r0, r2
 8004566:	4798      	blx	r3
        return 0;
 8004568:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	4618      	mov	r0, r3
 8004570:	f007 fdee 	bl	800c150 <_ZN10TestResultD1Ev>
 8004574:	e0e1      	b.n	800473a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f00a fdca 	bl	800f114 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d019      	beq.n	80045ba <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	f107 0308 	add.w	r3, r7, #8
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f007 fda5 	bl	800c0e0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3324      	adds	r3, #36	; 0x24
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f107 0108 	add.w	r1, r7, #8
 80045a8:	4610      	mov	r0, r2
 80045aa:	4798      	blx	r3
        return 0;
 80045ac:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80045ae:	f107 0308 	add.w	r3, r7, #8
 80045b2:	4618      	mov	r0, r3
 80045b4:	f007 fdcc 	bl	800c150 <_ZN10TestResultD1Ev>
 80045b8:	e0bf      	b.n	800473a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f00a fdb4 	bl	800f12c <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d019      	beq.n	80045fe <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	f107 0308 	add.w	r3, r7, #8
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f007 fd83 	bl	800c0e0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3328      	adds	r3, #40	; 0x28
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f107 0108 	add.w	r1, r7, #8
 80045ec:	4610      	mov	r0, r2
 80045ee:	4798      	blx	r3
        return 0;
 80045f0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80045f2:	f107 0308 	add.w	r3, r7, #8
 80045f6:	4618      	mov	r0, r3
 80045f8:	f007 fdaa 	bl	800c150 <_ZN10TestResultD1Ev>
 80045fc:	e09d      	b.n	800473a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f00a fdc2 	bl	800f18c <_ZNK20CommandLineArguments11isReversingEv>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	331c      	adds	r3, #28
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4610      	mov	r0, r2
 800461e:	4798      	blx	r3

    if (arguments_->isShuffling())
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4618      	mov	r0, r3
 8004626:	f00a fdc9 	bl	800f1bc <_ZNK20CommandLineArguments11isShufflingEv>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d023      	beq.n	8004678 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	332c      	adds	r3, #44	; 0x2c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4941      	ldr	r1, [pc, #260]	; (8004744 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8004640:	4610      	mov	r0, r2
 8004642:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685d      	ldr	r5, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3334      	adds	r3, #52	; 0x34
 8004650:	681c      	ldr	r4, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	4618      	mov	r0, r3
 8004658:	f00a fdbc 	bl	800f1d4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800465c:	4603      	mov	r3, r0
 800465e:	4619      	mov	r1, r3
 8004660:	4628      	mov	r0, r5
 8004662:	47a0      	blx	r4
        output_->print("\n");
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	332c      	adds	r3, #44	; 0x2c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4935      	ldr	r1, [pc, #212]	; (8004748 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8004674:	4610      	mov	r0, r2
 8004676:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800467e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004680:	429a      	cmp	r2, r3
 8004682:	bf8c      	ite	hi
 8004684:	2301      	movhi	r3, #1
 8004686:	2300      	movls	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d04e      	beq.n	800472c <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f00a fd92 	bl	800f1bc <_ZNK20CommandLineArguments11isShufflingEv>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00f      	beq.n	80046be <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68dd      	ldr	r5, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3318      	adds	r3, #24
 80046aa:	681c      	ldr	r4, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f00a fd8f 	bl	800f1d4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4619      	mov	r1, r3
 80046ba:	4628      	mov	r0, r5
 80046bc:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6858      	ldr	r0, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3340      	adds	r3, #64	; 0x40
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046d0:	4798      	blx	r3
        TestResult tr(*output_);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	f107 0308 	add.w	r3, r7, #8
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f007 fcff 	bl	800c0e0 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f107 0108 	add.w	r1, r7, #8
 80046f4:	4610      	mov	r0, r2
 80046f6:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80046f8:	f107 0308 	add.w	r3, r7, #8
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fcef 	bl	80040e0 <_ZNK10TestResult15getFailureCountEv>
 8004702:	4602      	mov	r2, r0
 8004704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004706:	4413      	add	r3, r2
 8004708:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fcf2 	bl	80040f8 <_ZNK10TestResult9isFailureEv>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800471a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471c:	3301      	adds	r3, #1
 800471e:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8004720:	f107 0308 	add.w	r3, r7, #8
 8004724:	4618      	mov	r0, r3
 8004726:	f007 fd13 	bl	800c150 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800472a:	e7a5      	b.n	8004678 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 800472c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8004732:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8004734:	e000      	b.n	8004738 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8004736:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8004738:	bf00      	nop
 800473a:	4623      	mov	r3, r4
}
 800473c:	4618      	mov	r0, r3
 800473e:	3750      	adds	r7, #80	; 0x50
 8004740:	46bd      	mov	sp, r7
 8004742:	bdb0      	pop	{r4, r5, r7, pc}
 8004744:	08014d44 	.word	0x08014d44
 8004748:	08014d70 	.word	0x08014d70

0800474c <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 800474c:	b590      	push	{r4, r7, lr}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8004754:	229d      	movs	r2, #157	; 0x9d
 8004756:	4906      	ldr	r1, [pc, #24]	; (8004770 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8004758:	201c      	movs	r0, #28
 800475a:	f001 f9eb 	bl	8005b34 <_ZnwjPKci>
 800475e:	4604      	mov	r4, r0
 8004760:	4620      	mov	r0, r4
 8004762:	f003 fb6d 	bl	8007e40 <_ZN18TeamCityTestOutputC1Ev>
 8004766:	4623      	mov	r3, r4
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bd90      	pop	{r4, r7, pc}
 8004770:	08014d0c 	.word	0x08014d0c

08004774 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 800477e:	22a2      	movs	r2, #162	; 0xa2
 8004780:	490a      	ldr	r1, [pc, #40]	; (80047ac <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8004782:	2014      	movs	r0, #20
 8004784:	f001 f9d6 	bl	8005b34 <_ZnwjPKci>
 8004788:	4604      	mov	r4, r0
 800478a:	4620      	mov	r0, r4
 800478c:	f000 f980 	bl	8004a90 <_ZN15JUnitTestOutputC1Ev>
 8004790:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fbb2 	bl	8004f04 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 80047a0:	68fb      	ldr	r3, [r7, #12]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd90      	pop	{r4, r7, pc}
 80047aa:	bf00      	nop
 80047ac:	08014d0c 	.word	0x08014d0c

080047b0 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 80047b0:	b590      	push	{r4, r7, lr}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 80047b8:	22ab      	movs	r2, #171	; 0xab
 80047ba:	4906      	ldr	r1, [pc, #24]	; (80047d4 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 80047bc:	2010      	movs	r0, #16
 80047be:	f001 f9b9 	bl	8005b34 <_ZnwjPKci>
 80047c2:	4604      	mov	r4, r0
 80047c4:	4620      	mov	r0, r4
 80047c6:	f7ff fcb3 	bl	8004130 <_ZN17ConsoleTestOutputC1Ev>
 80047ca:	4623      	mov	r3, r4
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd90      	pop	{r4, r7, pc}
 80047d4:	08014d0c 	.word	0x08014d0c

080047d8 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 80047e4:	22b0      	movs	r2, #176	; 0xb0
 80047e6:	490e      	ldr	r1, [pc, #56]	; (8004820 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 80047e8:	2018      	movs	r0, #24
 80047ea:	f001 f9a3 	bl	8005b34 <_ZnwjPKci>
 80047ee:	4604      	mov	r4, r0
 80047f0:	4620      	mov	r0, r4
 80047f2:	f006 f99b 	bl	800ab2c <_ZN19CompositeTestOutputC1Ev>
 80047f6:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	335c      	adds	r3, #92	; 0x5c
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3360      	adds	r3, #96	; 0x60
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	6978      	ldr	r0, [r7, #20]
 8004812:	4798      	blx	r3
  return composite;
 8004814:	697b      	ldr	r3, [r7, #20]
}
 8004816:	4618      	mov	r0, r3
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}
 800481e:	bf00      	nop
 8004820:	08014d0c 	.word	0x08014d0c

08004824 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8004824:	b5b0      	push	{r4, r5, r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f00a f855 	bl	800e8e4 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 800483a:	4603      	mov	r3, r0
 800483c:	f083 0301 	eor.w	r3, r3, #1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d029      	beq.n	800489a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3310      	adds	r3, #16
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
 8004852:	4602      	mov	r2, r0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685d      	ldr	r5, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	332c      	adds	r3, #44	; 0x2c
 8004864:	681c      	ldr	r4, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f00a fc16 	bl	800f09c <_ZNK20CommandLineArguments8needHelpEv>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d006      	beq.n	8004884 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f00a fc00 	bl	800f080 <_ZNK20CommandLineArguments4helpEv>
 8004880:	4603      	mov	r3, r0
 8004882:	e005      	b.n	8004890 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f00a fbeb 	bl	800f064 <_ZNK20CommandLineArguments5usageEv>
 800488e:	4603      	mov	r3, r0
 8004890:	4619      	mov	r1, r3
 8004892:	4628      	mov	r0, r5
 8004894:	47a0      	blx	r4
    return false;
 8004896:	2300      	movs	r3, #0
 8004898:	e050      	b.n	800493c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4618      	mov	r0, r3
 80048a0:	f00b fa52 	bl	800fd48 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d02c      	beq.n	8004904 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	681c      	ldr	r4, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f00b fa6a 	bl	800fd90 <_ZNK20CommandLineArguments14getPackageNameEv>
 80048bc:	4603      	mov	r3, r0
 80048be:	4619      	mov	r1, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	47a0      	blx	r4
 80048c4:	4602      	mov	r2, r0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f00a fbf0 	bl	800f0b4 <_ZNK20CommandLineArguments9isVerboseEv>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d02f      	beq.n	800493a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	681c      	ldr	r4, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685d      	ldr	r5, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3310      	adds	r3, #16
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	461a      	mov	r2, r3
 80048f6:	4629      	mov	r1, r5
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	47a0      	blx	r4
 80048fc:	4602      	mov	r2, r0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	e01a      	b.n	800493a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4618      	mov	r0, r3
 800490a:	f00b fa2f 	bl	800fd6c <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
 8004920:	4602      	mov	r2, r0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	e008      	b.n	800493a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3310      	adds	r3, #16
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
 8004934:	4602      	mov	r2, r0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	605a      	str	r2, [r3, #4]
  return true;
 800493a:	2301      	movs	r3, #1
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bdb0      	pop	{r4, r5, r7, pc}

08004944 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	4a05      	ldr	r2, [pc, #20]	; (8004964 <_ZN16SetPointerPluginD1Ev+0x20>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4618      	mov	r0, r3
 8004956:	f006 fbff 	bl	800b158 <_ZN10TestPluginD1Ev>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	080173e4 	.word	0x080173e4

08004968 <_ZN16SetPointerPluginD0Ev>:
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ffe7 	bl	8004944 <_ZN16SetPointerPluginD1Ev>
 8004976:	2114      	movs	r1, #20
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 f8ef 	bl	8005b5c <_ZdlPvj>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
    }
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4910      	ldr	r1, [pc, #64]	; (80049ec <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 ffaa 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	60da      	str	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	741a      	strb	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3314      	adds	r3, #20
 80049c8:	4908      	ldr	r1, [pc, #32]	; (80049ec <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 ff9b 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	61da      	str	r2, [r3, #28]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	621a      	str	r2, [r3, #32]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	08014d74 	.word	0x08014d74

080049f0 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3314      	adds	r3, #20
 8004a1a:	4907      	ldr	r1, [pc, #28]	; (8004a38 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f001 ff72 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	61da      	str	r2, [r3, #28]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	621a      	str	r2, [r3, #32]
    {
    }
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	08014d74 	.word	0x08014d74

08004a3c <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3314      	adds	r3, #20
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f002 fb14 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ffc4 	bl	80049f0 <_ZN20JUnitTestGroupResultC1Ev>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3328      	adds	r3, #40	; 0x28
 8004a6c:	4907      	ldr	r1, [pc, #28]	; (8004a8c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 ff49 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3330      	adds	r3, #48	; 0x30
 8004a78:	4904      	ldr	r1, [pc, #16]	; (8004a8c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 ff43 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	08014d74 	.word	0x08014d74

08004a90 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f005 fb4e 	bl	800a13c <_ZN10TestOutputC1Ev>
 8004aa0:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	224d      	movs	r2, #77	; 0x4d
 8004aa8:	4908      	ldr	r1, [pc, #32]	; (8004acc <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8004aaa:	2038      	movs	r0, #56	; 0x38
 8004aac:	f001 f842 	bl	8005b34 <_ZnwjPKci>
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f7ff ffd0 	bl	8004a58 <_ZN19JUnitTestOutputImplC1Ev>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	611c      	str	r4, [r3, #16]
{
}
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd90      	pop	{r4, r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08016dd8 	.word	0x08016dd8
 8004acc:	08014d78 	.word	0x08014d78

08004ad0 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3330      	adds	r3, #48	; 0x30
 8004adc:	4618      	mov	r0, r3
 8004ade:	f002 faca 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3328      	adds	r3, #40	; 0x28
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f002 fac5 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff ffa4 	bl	8004a3c <_ZN20JUnitTestGroupResultD1Ev>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f838 	bl	8004b84 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691c      	ldr	r4, [r3, #16]
 8004b18:	2c00      	cmp	r4, #0
 8004b1a:	d006      	beq.n	8004b2a <_ZN15JUnitTestOutputD1Ev+0x2a>
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f7ff ffd7 	bl	8004ad0 <_ZN19JUnitTestOutputImplD1Ev>
 8004b22:	2138      	movs	r1, #56	; 0x38
 8004b24:	4620      	mov	r0, r4
 8004b26:	f001 f819 	bl	8005b5c <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f005 fb23 	bl	800a178 <_ZN10TestOutputD1Ev>
}
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}
 8004b3c:	08016dd8 	.word	0x08016dd8

08004b40 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
}
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ffd9 	bl	8004b00 <_ZN15JUnitTestOutputD1Ev>
 8004b4e:	2114      	movs	r1, #20
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f001 f803 	bl	8005b5c <_ZdlPvj>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3314      	adds	r3, #20
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f002 fa82 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f002 fa7e 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f103 0414 	add.w	r4, r3, #20
 8004ba4:	f107 0308 	add.w	r3, r7, #8
 8004ba8:	491d      	ldr	r1, [pc, #116]	; (8004c20 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 feab 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f001 ff11 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8004bbc:	f107 0308 	add.w	r3, r7, #8
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f002 fa58 	bl	8007076 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	617b      	str	r3, [r7, #20]
    while (cur) {
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d018      	beq.n	8004c06 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	3204      	adds	r2, #4
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	4790      	blx	r2
        delete cur;
 8004bec:	697c      	ldr	r4, [r7, #20]
 8004bee:	2c00      	cmp	r4, #0
 8004bf0:	d006      	beq.n	8004c00 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff ffb4 	bl	8004b60 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8004bf8:	2128      	movs	r1, #40	; 0x28
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 ffae 	bl	8005b5c <_ZdlPvj>
        cur = tmp;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	617b      	str	r3, [r7, #20]
    while (cur) {
 8004c04:	e7e3      	b.n	8004bce <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2200      	movs	r2, #0
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd90      	pop	{r4, r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	08014d74 	.word	0x08014d74

08004c24 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8004c4e:	b590      	push	{r4, r7, lr}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	6a1c      	ldr	r4, [r3, #32]
 8004c5e:	6838      	ldr	r0, [r7, #0]
 8004c60:	f007 fbde 	bl	800c420 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8004c64:	4603      	mov	r3, r0
 8004c66:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	6a1c      	ldr	r4, [r3, #32]
 8004c6e:	6838      	ldr	r0, [r7, #0]
 8004c70:	f7ff fe8a 	bl	8004988 <_ZNK10TestResult13getCheckCountEv>
 8004c74:	4603      	mov	r3, r0
 8004c76:	6223      	str	r3, [r4, #32]
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd90      	pop	{r4, r7, pc}

08004c80 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8004c96:	b590      	push	{r4, r7, lr}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691c      	ldr	r4, [r3, #16]
 8004ca4:	6838      	ldr	r0, [r7, #0]
 8004ca6:	f007 fbc7 	bl	800c438 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8004caa:	4603      	mov	r3, r0
 8004cac:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3364      	adds	r3, #100	; 0x64
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4798      	blx	r3
    resetTestGroupResult();
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff ff62 	bl	8004b84 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd90      	pop	{r4, r7, pc}

08004cc8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	3201      	adds	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f103 0414 	add.w	r4, r3, #20
 8004ce4:	f107 0308 	add.w	r3, r7, #8
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f007 ff07 	bl	800cafe <_ZNK10UtestShell8getGroupEv>
 8004cf0:	f107 0308 	add.w	r3, r7, #8
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f001 fe71 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8004cfc:	f107 0308 	add.w	r3, r7, #8
 8004d00:	4618      	mov	r0, r3
 8004d02:	f002 f9b8 	bl	8007076 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8004d06:	4b3c      	ldr	r3, [pc, #240]	; (8004df8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4798      	blx	r3
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d110      	bne.n	8004d40 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8004d1e:	2288      	movs	r2, #136	; 0x88
 8004d20:	4936      	ldr	r1, [pc, #216]	; (8004dfc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8004d22:	2028      	movs	r0, #40	; 0x28
 8004d24:	f000 ff06 	bl	8005b34 <_ZnwjPKci>
 8004d28:	4604      	mov	r4, r0
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7ff fe38 	bl	80049a0 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8004d34:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6912      	ldr	r2, [r2, #16]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	61d3      	str	r3, [r2, #28]
 8004d3e:	e013      	b.n	8004d68 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8004d40:	228b      	movs	r2, #139	; 0x8b
 8004d42:	492e      	ldr	r1, [pc, #184]	; (8004dfc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8004d44:	2028      	movs	r0, #40	; 0x28
 8004d46:	f000 fef5 	bl	8005b34 <_ZnwjPKci>
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff fe27 	bl	80049a0 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	6a1a      	ldr	r2, [r3, #32]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d66:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	461c      	mov	r4, r3
 8004d70:	f107 0310 	add.w	r3, r7, #16
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f007 feb2 	bl	800cae0 <_ZNK10UtestShell7getNameEv>
 8004d7c:	f107 0310 	add.w	r3, r7, #16
 8004d80:	4619      	mov	r1, r3
 8004d82:	4620      	mov	r0, r4
 8004d84:	f001 fe2b 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8004d88:	f107 0310 	add.w	r3, r7, #16
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f002 f972 	bl	8007076 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f103 0414 	add.w	r4, r3, #20
 8004d9c:	f107 0318 	add.w	r3, r7, #24
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f007 ff5c 	bl	800cc60 <_ZNK10UtestShell7getFileEv>
 8004da8:	f107 0318 	add.w	r3, r7, #24
 8004dac:	4619      	mov	r1, r3
 8004dae:	4620      	mov	r0, r4
 8004db0:	f001 fe15 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8004db4:	f107 0318 	add.w	r3, r7, #24
 8004db8:	4618      	mov	r0, r3
 8004dba:	f002 f95c 	bl	8007076 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	6a1c      	ldr	r4, [r3, #32]
 8004dc4:	6838      	ldr	r0, [r7, #0]
 8004dc6:	f007 ff5a 	bl	800cc7e <_ZNK10UtestShell13getLineNumberEv>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6838      	ldr	r0, [r7, #0]
 8004dd8:	4798      	blx	r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f083 0301 	eor.w	r3, r3, #1
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	2201      	movs	r2, #1
 8004dee:	741a      	strb	r2, [r3, #16]
    }
}
 8004df0:	bf00      	nop
 8004df2:	3724      	adds	r7, #36	; 0x24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd90      	pop	{r4, r7, pc}
 8004df8:	200000a4 	.word	0x200000a4
 8004dfc:	08014d78 	.word	0x08014d78

08004e00 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8004e0c:	f107 0310 	add.w	r3, r7, #16
 8004e10:	4928      	ldr	r1, [pc, #160]	; (8004eb4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 fd77 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	3328      	adds	r3, #40	; 0x28
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f002 f918 	bl	8007054 <_ZNK12SimpleString7isEmptyEv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f083 0301 	eor.w	r3, r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00f      	beq.n	8004e50 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f002 f996 	bl	8007170 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8004e44:	f107 0310 	add.w	r3, r7, #16
 8004e48:	491b      	ldr	r1, [pc, #108]	; (8004eb8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f002 f9a2 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8004e50:	f107 0310 	add.w	r3, r7, #16
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f002 f98a 	bl	8007170 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3384      	adds	r3, #132	; 0x84
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f107 0018 	add.w	r0, r7, #24
 8004e68:	f107 0210 	add.w	r2, r7, #16
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	4798      	blx	r3
 8004e70:	f107 0320 	add.w	r3, r7, #32
 8004e74:	4911      	ldr	r1, [pc, #68]	; (8004ebc <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fd45 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f107 0220 	add.w	r2, r7, #32
 8004e82:	f107 0118 	add.w	r1, r7, #24
 8004e86:	4618      	mov	r0, r3
 8004e88:	f002 f957 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8004e8c:	f107 0320 	add.w	r3, r7, #32
 8004e90:	4618      	mov	r0, r3
 8004e92:	f002 f8f0 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8004e96:	f107 0318 	add.w	r3, r7, #24
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 f8eb 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8004ea0:	f107 0310 	add.w	r3, r7, #16
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f002 f8e6 	bl	8007076 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8004eaa:	bf00      	nop
}
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	3728      	adds	r7, #40	; 0x28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	08014d94 	.word	0x08014d94
 8004eb8:	08014da0 	.word	0x08014da0
 8004ebc:	08014da4 	.word	0x08014da4

08004ec0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f001 fd6d 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	225f      	movs	r2, #95	; 0x5f
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f001 fef2 	bl	8006cd2 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e7f0      	b.n	8004ed8 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8004ef6:	bf00      	nop
}
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	08014dac 	.word	0x08014dac

08004f04 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	3328      	adds	r3, #40	; 0x28
 8004f1c:	6839      	ldr	r1, [r7, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 fd5d 	bl	80069de <_ZN12SimpleStringaSERKS_>
    }
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3368      	adds	r3, #104	; 0x68
 8004f3a:	681c      	ldr	r4, [r3, #0]
 8004f3c:	f107 0308 	add.w	r3, r7, #8
 8004f40:	4908      	ldr	r1, [pc, #32]	; (8004f64 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 fcdf 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8004f48:	f107 0308 	add.w	r3, r7, #8
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	47a0      	blx	r4
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	4618      	mov	r0, r3
 8004f58:	f002 f88d 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd90      	pop	{r4, r7, pc}
 8004f64:	08014db8 	.word	0x08014db8

08004f68 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8004f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6c:	b08a      	sub	sp, #40	; 0x28
 8004f6e:	af04      	add	r7, sp, #16
 8004f70:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8004f78:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8004f7e:	3314      	adds	r3, #20
 8004f80:	4618      	mov	r0, r3
 8004f82:	f002 f84b 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8004f86:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8004f8e:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	4a23      	ldr	r2, [pc, #140]	; (8005024 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8004f9e:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8004fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fac:	099b      	lsrs	r3, r3, #6
 8004fae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4798      	blx	r3
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f107 0008 	add.w	r0, r7, #8
 8004fc6:	9303      	str	r3, [sp, #12]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	9302      	str	r3, [sp, #8]
 8004fcc:	9601      	str	r6, [sp, #4]
 8004fce:	9500      	str	r5, [sp, #0]
 8004fd0:	4623      	mov	r3, r4
 8004fd2:	4642      	mov	r2, r8
 8004fd4:	4915      	ldr	r1, [pc, #84]	; (800502c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8004fd6:	f002 fcdb 	bl	8007990 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3368      	adds	r3, #104	; 0x68
 8004fe0:	681c      	ldr	r4, [r3, #0]
 8004fe2:	f107 0308 	add.w	r3, r7, #8
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f002 f818 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8004fec:	4602      	mov	r2, r0
 8004fee:	f107 0310 	add.w	r3, r7, #16
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 fc86 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8004ffa:	f107 0310 	add.w	r3, r7, #16
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	47a0      	blx	r4
 8005004:	f107 0310 	add.w	r3, r7, #16
 8005008:	4618      	mov	r0, r3
 800500a:	f002 f834 	bl	8007076 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800500e:	f107 0308 	add.w	r3, r7, #8
 8005012:	4618      	mov	r0, r3
 8005014:	f002 f82f 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 8005018:	bf00      	nop
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005022:	bf00      	nop
 8005024:	10624dd3 	.word	0x10624dd3
 8005028:	200000a8 	.word	0x200000a8
 800502c:	08014de4 	.word	0x08014de4

08005030 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8005030:	b590      	push	{r4, r7, lr}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3368      	adds	r3, #104	; 0x68
 800503e:	681c      	ldr	r4, [r3, #0]
 8005040:	f107 0308 	add.w	r3, r7, #8
 8005044:	4912      	ldr	r1, [pc, #72]	; (8005090 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8005046:	4618      	mov	r0, r3
 8005048:	f001 fc5d 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800504c:	f107 0308 	add.w	r3, r7, #8
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	47a0      	blx	r4
 8005056:	f107 0308 	add.w	r3, r7, #8
 800505a:	4618      	mov	r0, r3
 800505c:	f002 f80b 	bl	8007076 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3368      	adds	r3, #104	; 0x68
 8005066:	681c      	ldr	r4, [r3, #0]
 8005068:	f107 0310 	add.w	r3, r7, #16
 800506c:	4909      	ldr	r1, [pc, #36]	; (8005094 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800506e:	4618      	mov	r0, r3
 8005070:	f001 fc49 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8005074:	f107 0310 	add.w	r3, r7, #16
 8005078:	4619      	mov	r1, r3
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	47a0      	blx	r4
 800507e:	f107 0310 	add.w	r3, r7, #16
 8005082:	4618      	mov	r0, r3
 8005084:	f001 fff7 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 8005088:	bf00      	nop
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	bd90      	pop	{r4, r7, pc}
 8005090:	08014e54 	.word	0x08014e54
 8005094:	08014e64 	.word	0x08014e64

08005098 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f001 ffb9 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4619      	mov	r1, r3
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f001 fc29 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 80050b4:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 80050b6:	490f      	ldr	r1, [pc, #60]	; (80050f4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f001 fe39 	bl	8006d30 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 80050be:	4a0e      	ldr	r2, [pc, #56]	; (80050f8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 80050c0:	490e      	ldr	r1, [pc, #56]	; (80050fc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f001 fe34 	bl	8006d30 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 80050c8:	4a0d      	ldr	r2, [pc, #52]	; (8005100 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 80050ca:	490e      	ldr	r1, [pc, #56]	; (8005104 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f001 fe2f 	bl	8006d30 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 80050d2:	4a0d      	ldr	r2, [pc, #52]	; (8005108 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 80050d4:	490d      	ldr	r1, [pc, #52]	; (800510c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f001 fe2a 	bl	8006d30 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 80050dc:	4a0c      	ldr	r2, [pc, #48]	; (8005110 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 80050de:	490d      	ldr	r1, [pc, #52]	; (8005114 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f001 fe25 	bl	8006d30 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 80050e6:	bf00      	nop
}
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	08014e74 	.word	0x08014e74
 80050f4:	08014e7c 	.word	0x08014e7c
 80050f8:	08014e80 	.word	0x08014e80
 80050fc:	08014e88 	.word	0x08014e88
 8005100:	08014e8c 	.word	0x08014e8c
 8005104:	08014e94 	.word	0x08014e94
 8005108:	08014e98 	.word	0x08014e98
 800510c:	08014ea0 	.word	0x08014ea0
 8005110:	08014ea4 	.word	0x08014ea4
 8005114:	08014eb0 	.word	0x08014eb0

08005118 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8005118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800511c:	b096      	sub	sp, #88	; 0x58
 800511e:	af08      	add	r7, sp, #32
 8005120:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80b2 	beq.w	8005296 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8005136:	3328      	adds	r3, #40	; 0x28
 8005138:	4618      	mov	r0, r3
 800513a:	f001 ff6f 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800513e:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	3328      	adds	r3, #40	; 0x28
 8005146:	4618      	mov	r0, r3
 8005148:	f001 ff84 	bl	8007054 <_ZNK12SimpleString7isEmptyEv>
 800514c:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8005152:	4c53      	ldr	r4, [pc, #332]	; (80052a0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8005154:	e000      	b.n	8005158 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8005156:	4c53      	ldr	r4, [pc, #332]	; (80052a4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800515c:	3314      	adds	r3, #20
 800515e:	4618      	mov	r0, r3
 8005160:	f001 ff5c 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8005164:	4605      	mov	r5, r0
 8005166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005168:	4618      	mov	r0, r3
 800516a:	f001 ff57 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800516e:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005172:	6a1a      	ldr	r2, [r3, #32]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800517c:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	4a49      	ldr	r2, [pc, #292]	; (80052a8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800518a:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	4b45      	ldr	r3, [pc, #276]	; (80052a8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8005192:	fba3 1302 	umull	r1, r3, r3, r2
 8005196:	099b      	lsrs	r3, r3, #6
 8005198:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	3314      	adds	r3, #20
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 ff37 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	f107 0014 	add.w	r0, r7, #20
 80051b8:	9306      	str	r3, [sp, #24]
 80051ba:	9205      	str	r2, [sp, #20]
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	9204      	str	r2, [sp, #16]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	9203      	str	r2, [sp, #12]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	9302      	str	r3, [sp, #8]
 80051c8:	9601      	str	r6, [sp, #4]
 80051ca:	9500      	str	r5, [sp, #0]
 80051cc:	4623      	mov	r3, r4
 80051ce:	4642      	mov	r2, r8
 80051d0:	4936      	ldr	r1, [pc, #216]	; (80052ac <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 80051d2:	f002 fbdd 	bl	8007990 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3368      	adds	r3, #104	; 0x68
 80051dc:	681c      	ldr	r4, [r3, #0]
 80051de:	f107 0314 	add.w	r3, r7, #20
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 ff1a 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 80051e8:	4602      	mov	r2, r0
 80051ea:	f107 031c 	add.w	r3, r7, #28
 80051ee:	4611      	mov	r1, r2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f001 fb88 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 80051f6:	f107 031c 	add.w	r3, r7, #28
 80051fa:	4619      	mov	r1, r3
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	47a0      	blx	r4
 8005200:	f107 031c 	add.w	r3, r7, #28
 8005204:	4618      	mov	r0, r3
 8005206:	f001 ff36 	bl	8007076 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005210:	6a12      	ldr	r2, [r2, #32]
 8005212:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8005214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3388      	adds	r3, #136	; 0x88
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	4798      	blx	r3
 800522a:	e017      	b.n	800525c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800522c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522e:	7c1b      	ldrb	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d013      	beq.n	800525c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3368      	adds	r3, #104	; 0x68
 800523a:	681c      	ldr	r4, [r3, #0]
 800523c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005240:	491b      	ldr	r1, [pc, #108]	; (80052b0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8005242:	4618      	mov	r0, r3
 8005244:	f001 fb5f 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8005248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800524c:	4619      	mov	r1, r3
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	47a0      	blx	r4
 8005252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f001 ff0d 	bl	8007076 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3368      	adds	r3, #104	; 0x68
 8005262:	681c      	ldr	r4, [r3, #0]
 8005264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005268:	4912      	ldr	r1, [pc, #72]	; (80052b4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800526a:	4618      	mov	r0, r3
 800526c:	f001 fb4b 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8005270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005274:	4619      	mov	r1, r3
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	47a0      	blx	r4
 800527a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800527e:	4618      	mov	r0, r3
 8005280:	f001 fef9 	bl	8007076 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8005284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800528a:	f107 0314 	add.w	r3, r7, #20
 800528e:	4618      	mov	r0, r3
 8005290:	f001 fef1 	bl	8007076 <_ZN12SimpleStringD1Ev>
    while (cur) {
 8005294:	e749      	b.n	800512a <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8005296:	bf00      	nop
 8005298:	3738      	adds	r7, #56	; 0x38
 800529a:	46bd      	mov	sp, r7
 800529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a0:	08014d74 	.word	0x08014d74
 80052a4:	08014eb4 	.word	0x08014eb4
 80052a8:	10624dd3 	.word	0x10624dd3
 80052ac:	08014eb8 	.word	0x08014eb8
 80052b0:	08014f14 	.word	0x08014f14
 80052b4:	08014f24 	.word	0x08014f24

080052b8 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 80052b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ba:	b091      	sub	sp, #68	; 0x44
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68d9      	ldr	r1, [r3, #12]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f107 0210 	add.w	r2, r7, #16
 80052d4:	4610      	mov	r0, r2
 80052d6:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80052d8:	f107 0310 	add.w	r3, r7, #16
 80052dc:	4618      	mov	r0, r3
 80052de:	f001 fe9d 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 80052e2:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3314      	adds	r3, #20
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4610      	mov	r0, r2
 80052f4:	4798      	blx	r3
 80052f6:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80052f8:	461e      	mov	r6, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3380      	adds	r3, #128	; 0x80
 8005300:	681c      	ldr	r4, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68d9      	ldr	r1, [r3, #12]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3318      	adds	r3, #24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f107 0220 	add.w	r2, r7, #32
 8005314:	4610      	mov	r0, r2
 8005316:	4798      	blx	r3
 8005318:	f107 0318 	add.w	r3, r7, #24
 800531c:	f107 0220 	add.w	r2, r7, #32
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4618      	mov	r0, r3
 8005324:	47a0      	blx	r4
 8005326:	f107 0318 	add.w	r3, r7, #24
 800532a:	4618      	mov	r0, r3
 800532c:	f001 fe76 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8005330:	4603      	mov	r3, r0
 8005332:	f107 0008 	add.w	r0, r7, #8
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	4633      	mov	r3, r6
 800533a:	462a      	mov	r2, r5
 800533c:	4924      	ldr	r1, [pc, #144]	; (80053d0 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800533e:	f002 fb27 	bl	8007990 <_Z16StringFromFormatPKcz>
 8005342:	f107 0318 	add.w	r3, r7, #24
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fe95 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800534c:	f107 0320 	add.w	r3, r7, #32
 8005350:	4618      	mov	r0, r3
 8005352:	f001 fe90 	bl	8007076 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8005356:	f107 0310 	add.w	r3, r7, #16
 800535a:	4618      	mov	r0, r3
 800535c:	f001 fe8b 	bl	8007076 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3368      	adds	r3, #104	; 0x68
 8005366:	681c      	ldr	r4, [r3, #0]
 8005368:	f107 0308 	add.w	r3, r7, #8
 800536c:	4618      	mov	r0, r3
 800536e:	f001 fe55 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8005372:	4602      	mov	r2, r0
 8005374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005378:	4611      	mov	r1, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fac3 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8005380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	47a0      	blx	r4
 800538a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800538e:	4618      	mov	r0, r3
 8005390:	f001 fe71 	bl	8007076 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3368      	adds	r3, #104	; 0x68
 800539a:	681c      	ldr	r4, [r3, #0]
 800539c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053a0:	490c      	ldr	r1, [pc, #48]	; (80053d4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 faaf 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 80053a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	47a0      	blx	r4
 80053b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 fe5d 	bl	8007076 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80053bc:	f107 0308 	add.w	r3, r7, #8
 80053c0:	4618      	mov	r0, r3
 80053c2:	f001 fe58 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 80053c6:	bf00      	nop
 80053c8:	373c      	adds	r7, #60	; 0x3c
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ce:	bf00      	nop
 80053d0:	08014f34 	.word	0x08014f34
 80053d4:	08014f70 	.word	0x08014f70

080053d8 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 80053d8:	b590      	push	{r4, r7, lr}
 80053da:	b08d      	sub	sp, #52	; 0x34
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3368      	adds	r3, #104	; 0x68
 80053e6:	681c      	ldr	r4, [r3, #0]
 80053e8:	f107 0308 	add.w	r3, r7, #8
 80053ec:	4933      	ldr	r1, [pc, #204]	; (80054bc <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fa89 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 80053f4:	f107 0308 	add.w	r3, r7, #8
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	47a0      	blx	r4
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	4618      	mov	r0, r3
 8005404:	f001 fe37 	bl	8007076 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3368      	adds	r3, #104	; 0x68
 800540e:	681c      	ldr	r4, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3380      	adds	r3, #128	; 0x80
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6912      	ldr	r2, [r2, #16]
 800541c:	3230      	adds	r2, #48	; 0x30
 800541e:	f107 0010 	add.w	r0, r7, #16
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4798      	blx	r3
 8005426:	f107 0310 	add.w	r3, r7, #16
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	47a0      	blx	r4
 8005430:	f107 0310 	add.w	r3, r7, #16
 8005434:	4618      	mov	r0, r3
 8005436:	f001 fe1e 	bl	8007076 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3368      	adds	r3, #104	; 0x68
 8005440:	681c      	ldr	r4, [r3, #0]
 8005442:	f107 0318 	add.w	r3, r7, #24
 8005446:	491e      	ldr	r1, [pc, #120]	; (80054c0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8005448:	4618      	mov	r0, r3
 800544a:	f001 fa5c 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800544e:	f107 0318 	add.w	r3, r7, #24
 8005452:	4619      	mov	r1, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	47a0      	blx	r4
 8005458:	f107 0318 	add.w	r3, r7, #24
 800545c:	4618      	mov	r0, r3
 800545e:	f001 fe0a 	bl	8007076 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3368      	adds	r3, #104	; 0x68
 8005468:	681c      	ldr	r4, [r3, #0]
 800546a:	f107 0320 	add.w	r3, r7, #32
 800546e:	4915      	ldr	r1, [pc, #84]	; (80054c4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8005470:	4618      	mov	r0, r3
 8005472:	f001 fa48 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8005476:	f107 0320 	add.w	r3, r7, #32
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	47a0      	blx	r4
 8005480:	f107 0320 	add.w	r3, r7, #32
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fdf6 	bl	8007076 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3368      	adds	r3, #104	; 0x68
 8005490:	681c      	ldr	r4, [r3, #0]
 8005492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005496:	490c      	ldr	r1, [pc, #48]	; (80054c8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8005498:	4618      	mov	r0, r3
 800549a:	f001 fa34 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800549e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	47a0      	blx	r4
 80054a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fde2 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 80054b2:	bf00      	nop
 80054b4:	3734      	adds	r7, #52	; 0x34
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd90      	pop	{r4, r7, pc}
 80054ba:	bf00      	nop
 80054bc:	08014f7c 	.word	0x08014f7c
 80054c0:	08014f8c 	.word	0x08014f8c
 80054c4:	08014f9c 	.word	0x08014f9c
 80054c8:	08014fb8 	.word	0x08014fb8

080054cc <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3360      	adds	r3, #96	; 0x60
 80054da:	681c      	ldr	r4, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	335c      	adds	r3, #92	; 0x5c
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6912      	ldr	r2, [r2, #16]
 80054e8:	3214      	adds	r2, #20
 80054ea:	f107 0008 	add.w	r0, r7, #8
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	4798      	blx	r3
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	47a0      	blx	r4
 80054fc:	f107 0308 	add.w	r3, r7, #8
 8005500:	4618      	mov	r0, r3
 8005502:	f001 fdb8 	bl	8007076 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3370      	adds	r3, #112	; 0x70
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	4798      	blx	r3
    writeTestSuiteSummary();
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3374      	adds	r3, #116	; 0x74
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4798      	blx	r3
    writeProperties();
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3378      	adds	r3, #120	; 0x78
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	4798      	blx	r3
    writeTestCases();
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	337c      	adds	r3, #124	; 0x7c
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	4798      	blx	r3
    writeFileEnding();
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	338c      	adds	r3, #140	; 0x8c
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	4798      	blx	r3
    closeFile();
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	336c      	adds	r3, #108	; 0x6c
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bd90      	pop	{r4, r7, pc}

08005556 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	3330      	adds	r3, #48	; 0x30
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f001 fe08 	bl	8007194 <_ZN12SimpleStringpLEPKc>
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 80055cc:	b590      	push	{r4, r7, lr}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d113      	bne.n	800560a <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	3201      	adds	r2, #1
 80055ea:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 80055ec:	f240 1233 	movw	r2, #307	; 0x133
 80055f0:	4908      	ldr	r1, [pc, #32]	; (8005614 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 80055f2:	2034      	movs	r0, #52	; 0x34
 80055f4:	f000 fa9e 	bl	8005b34 <_ZnwjPKci>
 80055f8:	4604      	mov	r4, r0
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	4620      	mov	r0, r4
 80055fe:	f002 ff4f 	bl	80084a0 <_ZN11TestFailureC1ERKS_>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	60dc      	str	r4, [r3, #12]
    }
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	bd90      	pop	{r4, r7, pc}
 8005612:	bf00      	nop
 8005614:	08014d78 	.word	0x08014d78

08005618 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8005618:	b5b0      	push	{r4, r5, r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8005624:	681d      	ldr	r5, [r3, #0]
 8005626:	6838      	ldr	r0, [r7, #0]
 8005628:	f001 fcf8 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800562c:	4602      	mov	r2, r0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691c      	ldr	r4, [r3, #16]
 8005632:	4905      	ldr	r1, [pc, #20]	; (8005648 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8005634:	4610      	mov	r0, r2
 8005636:	47a8      	blx	r5
 8005638:	4603      	mov	r3, r0
 800563a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800563c:	bf00      	nop
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bdb0      	pop	{r4, r5, r7, pc}
 8005644:	200000b0 	.word	0x200000b0
 8005648:	08014fc8 	.word	0x08014fc8

0800564c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800564c:	b590      	push	{r4, r7, lr}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8005656:	4b08      	ldr	r3, [pc, #32]	; (8005678 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8005658:	681c      	ldr	r4, [r3, #0]
 800565a:	6838      	ldr	r0, [r7, #0]
 800565c:	f001 fcde 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	47a0      	blx	r4
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	bd90      	pop	{r4, r7, pc}
 8005676:	bf00      	nop
 8005678:	200000b4 	.word	0x200000b4

0800567c <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6912      	ldr	r2, [r2, #16]
 800568c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800568e:	4610      	mov	r0, r2
 8005690:	4798      	blx	r3
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	200000b8 	.word	0x200000b8

080056a0 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
        return false;
 80056ae:	2300      	movs	r3, #0
    }
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
    {
 80056c4:	4a04      	ldr	r2, [pc, #16]	; (80056d8 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
    }
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	08016e84 	.word	0x08016e84

080056dc <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
    }
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff ffe9 	bl	80056bc <_ZN17MemoryLeakFailureD1Ev>
 80056ea:	2104      	movs	r1, #4
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fa35 	bl	8005b5c <_ZdlPvj>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	687c      	ldr	r4, [r7, #4]
 8005706:	f000 fc71 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800570a:	4603      	mov	r3, r0
 800570c:	4618      	mov	r0, r3
 800570e:	f00b f972 	bl	80109f6 <_ZN18MemoryLeakDetector8getMutexEv>
 8005712:	4603      	mov	r3, r0
 8005714:	4619      	mov	r1, r3
 8005716:	4620      	mov	r0, r4
 8005718:	f000 fe4a 	bl	80063b0 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	bd90      	pop	{r4, r7, pc}

08005726 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fe4f 	bl	80063d4 <_ZN15ScopedMutexLockD1Ev>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b087      	sub	sp, #28
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800574c:	f000 fc4e 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005750:	4604      	mov	r4, r0
 8005752:	f004 faf7 	bl	8009d44 <_Z25getCurrentMallocAllocatorv>
 8005756:	4601      	mov	r1, r0
 8005758:	2301      	movs	r3, #1
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4620      	mov	r0, r4
 8005766:	f00b fb89 	bl	8010e7c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800576a:	4603      	mov	r3, r0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b087      	sub	sp, #28
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8005780:	f000 fc34 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005784:	4603      	mov	r3, r0
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	4618      	mov	r0, r3
 800578a:	f00b f9e3 	bl	8010b54 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800578e:	f000 fc2d 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005792:	4604      	mov	r4, r0
 8005794:	f004 fad6 	bl	8009d44 <_Z25getCurrentMallocAllocatorv>
 8005798:	4601      	mov	r1, r0
 800579a:	2301      	movs	r3, #1
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4620      	mov	r0, r4
 80057a8:	f00b fb9c 	bl	8010ee4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd90      	pop	{r4, r7, pc}

080057b4 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 80057b4:	b590      	push	{r4, r7, lr}
 80057b6:	b089      	sub	sp, #36	; 0x24
 80057b8:	af04      	add	r7, sp, #16
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 80057c2:	f000 fc13 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80057c6:	4604      	mov	r4, r0
 80057c8:	f004 fabc 	bl	8009d44 <_Z25getCurrentMallocAllocatorv>
 80057cc:	4601      	mov	r1, r0
 80057ce:	2301      	movs	r3, #1
 80057d0:	9302      	str	r3, [sp, #8]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4620      	mov	r0, r4
 80057e0:	f00b fbe4 	bl	8010fac <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 80057e4:	4603      	mov	r3, r0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd90      	pop	{r4, r7, pc}
	...

080057f0 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <_ZL13normal_mallocjPKcj+0x20>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	4798      	blx	r3
 8005804:	4603      	mov	r3, r0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	200000c4 	.word	0x200000c4

08005814 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <_ZL14normal_reallocPvjPKcj+0x24>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	4798      	blx	r3
 800582c:	4603      	mov	r3, r0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	200000c8 	.word	0x200000c8

0800583c <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8005848:	4b03      	ldr	r3, [pc, #12]	; (8005858 <_ZL11normal_freePvPKcj+0x1c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	4798      	blx	r3
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	200000cc 	.word	0x200000cc

0800585c <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800585c:	b590      	push	{r4, r7, lr}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8005864:	f107 0308 	add.w	r3, r7, #8
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff ff47 	bl	80056fc <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800586e:	f000 fbbd 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005872:	4604      	mov	r4, r0
 8005874:	f004 f9b6 	bl	8009be4 <_Z22getCurrentNewAllocatorv>
 8005878:	4601      	mov	r1, r0
 800587a:	2300      	movs	r3, #0
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	4620      	mov	r0, r4
 8005880:	f00b fa6a 	bl	8010d58 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8005884:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005886:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8005888:	f107 0308 	add.w	r3, r7, #8
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ff4a 	bl	8005726 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8005892:	4623      	mov	r3, r4
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	bd90      	pop	{r4, r7, pc}

0800589c <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80058a4:	f000 fba2 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80058a8:	4604      	mov	r4, r0
 80058aa:	f004 f99b 	bl	8009be4 <_Z22getCurrentNewAllocatorv>
 80058ae:	4601      	mov	r1, r0
 80058b0:	2300      	movs	r3, #0
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	4620      	mov	r0, r4
 80058b6:	f00b fa4f 	bl	8010d58 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80058ba:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80058bc:	68fb      	ldr	r3, [r7, #12]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd90      	pop	{r4, r7, pc}

080058c6 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 80058c6:	b590      	push	{r4, r7, lr}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80058ce:	f000 fb8d 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80058d2:	4604      	mov	r4, r0
 80058d4:	f004 f986 	bl	8009be4 <_Z22getCurrentNewAllocatorv>
 80058d8:	4601      	mov	r1, r0
 80058da:	2300      	movs	r3, #0
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4620      	mov	r0, r4
 80058e0:	f00b fa3a 	bl	8010d58 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80058e4:	4603      	mov	r3, r0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd90      	pop	{r4, r7, pc}

080058ee <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 80058ee:	b590      	push	{r4, r7, lr}
 80058f0:	b089      	sub	sp, #36	; 0x24
 80058f2:	af02      	add	r7, sp, #8
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 80058fa:	f000 fb77 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80058fe:	4604      	mov	r4, r0
 8005900:	f004 f970 	bl	8009be4 <_Z22getCurrentNewAllocatorv>
 8005904:	4601      	mov	r1, r0
 8005906:	2300      	movs	r3, #0
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4620      	mov	r0, r4
 8005914:	f00b fab2 	bl	8010e7c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8005918:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800591a:	697b      	ldr	r3, [r7, #20]
}
 800591c:	4618      	mov	r0, r3
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	bd90      	pop	{r4, r7, pc}

08005924 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8005924:	b590      	push	{r4, r7, lr}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800592c:	f000 fb5e 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005930:	4604      	mov	r4, r0
 8005932:	f004 f9af 	bl	8009c94 <_Z27getCurrentNewArrayAllocatorv>
 8005936:	4601      	mov	r1, r0
 8005938:	2300      	movs	r3, #0
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4620      	mov	r0, r4
 800593e:	f00b fa0b 	bl	8010d58 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8005942:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005944:	68fb      	ldr	r3, [r7, #12]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	bd90      	pop	{r4, r7, pc}

0800594e <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800594e:	b590      	push	{r4, r7, lr}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8005956:	f000 fb49 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800595a:	4604      	mov	r4, r0
 800595c:	f004 f99a 	bl	8009c94 <_Z27getCurrentNewArrayAllocatorv>
 8005960:	4601      	mov	r1, r0
 8005962:	2300      	movs	r3, #0
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4620      	mov	r0, r4
 8005968:	f00b f9f6 	bl	8010d58 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800596c:	4603      	mov	r3, r0
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	bd90      	pop	{r4, r7, pc}

08005976 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8005976:	b590      	push	{r4, r7, lr}
 8005978:	b089      	sub	sp, #36	; 0x24
 800597a:	af02      	add	r7, sp, #8
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8005982:	f000 fb33 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005986:	4604      	mov	r4, r0
 8005988:	f004 f984 	bl	8009c94 <_Z27getCurrentNewArrayAllocatorv>
 800598c:	4601      	mov	r1, r0
 800598e:	2300      	movs	r3, #0
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4620      	mov	r0, r4
 800599c:	f00b fa6e 	bl	8010e7c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80059a0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80059a2:	697b      	ldr	r3, [r7, #20]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd90      	pop	{r4, r7, pc}

080059ac <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 80059b4:	f000 fb1a 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80059b8:	4603      	mov	r3, r0
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	4618      	mov	r0, r3
 80059be:	f00b f8c9 	bl	8010b54 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 80059c2:	f000 fb13 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80059c6:	4604      	mov	r4, r0
 80059c8:	f004 f90c 	bl	8009be4 <_Z22getCurrentNewAllocatorv>
 80059cc:	4601      	mov	r1, r0
 80059ce:	2300      	movs	r3, #0
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4620      	mov	r0, r4
 80059d4:	f00b fad0 	bl	8010f78 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd90      	pop	{r4, r7, pc}

080059e0 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 80059e8:	f000 fb00 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80059ec:	4603      	mov	r3, r0
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f00b f8af 	bl	8010b54 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 80059f6:	f000 faf9 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80059fa:	4604      	mov	r4, r0
 80059fc:	f004 f94a 	bl	8009c94 <_Z27getCurrentNewArrayAllocatorv>
 8005a00:	4601      	mov	r1, r0
 8005a02:	2300      	movs	r3, #0
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	4620      	mov	r0, r4
 8005a08:	f00b fab6 	bl	8010f78 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd90      	pop	{r4, r7, pc}

08005a14 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8005a1c:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <_ZL19normal_operator_newj+0x1c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
 8005a24:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005a26:	68fb      	ldr	r3, [r7, #12]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	200000c4 	.word	0x200000c4

08005a34 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
 8005a44:	4603      	mov	r3, r0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	200000c4 	.word	0x200000c4

08005a54 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8005a60:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	4798      	blx	r3
 8005a68:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005a6a:	697b      	ldr	r3, [r7, #20]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	200000c4 	.word	0x200000c4

08005a78 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <_ZL25normal_operator_new_arrayj+0x1c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
 8005a88:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	200000c4 	.word	0x200000c4

08005a98 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
 8005aa8:	4603      	mov	r3, r0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200000c4 	.word	0x200000c4

08005ab8 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	4798      	blx	r3
 8005acc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005ace:	697b      	ldr	r3, [r7, #20]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	200000c4 	.word	0x200000c4

08005adc <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <_ZL22normal_operator_deletePv+0x18>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	4798      	blx	r3
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	200000cc 	.word	0x200000cc

08005af8 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	4798      	blx	r3
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	200000cc 	.word	0x200000cc

08005b14 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8005b1c:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <_Znwj+0x1c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
 8005b24:	4603      	mov	r3, r0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000028 	.word	0x20000028

08005b34 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <_ZnwjPKci+0x24>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	4798      	blx	r3
 8005b4c:	4603      	mov	r3, r0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000030 	.word	0x20000030

08005b5c <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8005b66:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <_ZdlPvj+0x1c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4798      	blx	r3
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000040 	.word	0x20000040

08005b7c <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <_ZnajPKci+0x24>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	4798      	blx	r3
 8005b94:	4603      	mov	r3, r0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	2000003c 	.word	0x2000003c

08005ba4 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8005bac:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <_ZdaPv+0x18>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000044 	.word	0x20000044

08005bc0 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8005bca:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <_ZdaPvj+0x1c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	4798      	blx	r3
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000044 	.word	0x20000044

08005be0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8005be4:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8005be6:	4a13      	ldr	r2, [pc, #76]	; (8005c34 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8005be8:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8005bea:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8005bec:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8005bee:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8005bf0:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8005bf2:	4a14      	ldr	r2, [pc, #80]	; (8005c44 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8005bf4:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8005bf8:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8005bfa:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8005bfc:	4b14      	ldr	r3, [pc, #80]	; (8005c50 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8005bfe:	4a15      	ldr	r2, [pc, #84]	; (8005c54 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8005c00:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8005c04:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8005c06:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8005c0a:	4a16      	ldr	r2, [pc, #88]	; (8005c64 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8005c0c:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8005c0e:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8005c10:	4a16      	ldr	r2, [pc, #88]	; (8005c6c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8005c12:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8005c14:	4b16      	ldr	r3, [pc, #88]	; (8005c70 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8005c16:	4a17      	ldr	r2, [pc, #92]	; (8005c74 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8005c18:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8005c1a:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8005c1c:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8005c1e:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8005c20:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8005c22:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8005c24:	601a      	str	r2, [r3, #0]

#endif
}
 8005c26:	bf00      	nop
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	20000028 	.word	0x20000028
 8005c34:	08005a15 	.word	0x08005a15
 8005c38:	2000002c 	.word	0x2000002c
 8005c3c:	08005a35 	.word	0x08005a35
 8005c40:	20000030 	.word	0x20000030
 8005c44:	08005a55 	.word	0x08005a55
 8005c48:	20000034 	.word	0x20000034
 8005c4c:	08005a79 	.word	0x08005a79
 8005c50:	20000038 	.word	0x20000038
 8005c54:	08005a99 	.word	0x08005a99
 8005c58:	2000003c 	.word	0x2000003c
 8005c5c:	08005ab9 	.word	0x08005ab9
 8005c60:	20000040 	.word	0x20000040
 8005c64:	08005add 	.word	0x08005add
 8005c68:	20000044 	.word	0x20000044
 8005c6c:	08005af9 	.word	0x08005af9
 8005c70:	20000010 	.word	0x20000010
 8005c74:	080057f1 	.word	0x080057f1
 8005c78:	20000018 	.word	0x20000018
 8005c7c:	08005815 	.word	0x08005815
 8005c80:	20000014 	.word	0x20000014
 8005c84:	0800583d 	.word	0x0800583d

08005c88 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8005c8c:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d004      	beq.n	8005ca0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a07      	ldr	r2, [pc, #28]	; (8005cb8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d101      	bne.n	8005ca4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8005ca4:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000028 	.word	0x20000028
 8005cb4:	0800589d 	.word	0x0800589d
 8005cb8:	0800585d 	.word	0x0800585d

08005cbc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8005cc0:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	bfcc      	ite	gt
 8005cd2:	2301      	movgt	r3, #1
 8005cd4:	2300      	movle	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d12e      	bne.n	8005d3a <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8005cdc:	4b19      	ldr	r3, [pc, #100]	; (8005d44 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8005ce2:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8005ce4:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8005cea:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8005cec:	4b19      	ldr	r3, [pc, #100]	; (8005d54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8005cf2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8005cf4:	4b19      	ldr	r3, [pc, #100]	; (8005d5c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a19      	ldr	r2, [pc, #100]	; (8005d60 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8005cfa:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8005cfc:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a19      	ldr	r2, [pc, #100]	; (8005d68 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8005d02:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8005d04:	4b19      	ldr	r3, [pc, #100]	; (8005d6c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a19      	ldr	r2, [pc, #100]	; (8005d70 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8005d0a:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8005d12:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a19      	ldr	r2, [pc, #100]	; (8005d80 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8005d1a:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8005d1c:	4b19      	ldr	r3, [pc, #100]	; (8005d84 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a19      	ldr	r2, [pc, #100]	; (8005d88 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8005d22:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8005d24:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8005d2a:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8005d2c:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8005d32:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8005d34:	f7ff ff54 	bl	8005be0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8005d38:	e000      	b.n	8005d3c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8005d3a:	bf00      	nop
#endif
}
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	200004b8 	.word	0x200004b8
 8005d44:	20000028 	.word	0x20000028
 8005d48:	20000048 	.word	0x20000048
 8005d4c:	2000002c 	.word	0x2000002c
 8005d50:	2000004c 	.word	0x2000004c
 8005d54:	20000030 	.word	0x20000030
 8005d58:	20000050 	.word	0x20000050
 8005d5c:	20000034 	.word	0x20000034
 8005d60:	20000054 	.word	0x20000054
 8005d64:	20000038 	.word	0x20000038
 8005d68:	20000058 	.word	0x20000058
 8005d6c:	2000003c 	.word	0x2000003c
 8005d70:	2000005c 	.word	0x2000005c
 8005d74:	20000040 	.word	0x20000040
 8005d78:	20000060 	.word	0x20000060
 8005d7c:	20000044 	.word	0x20000044
 8005d80:	20000064 	.word	0x20000064
 8005d84:	20000010 	.word	0x20000010
 8005d88:	2000001c 	.word	0x2000001c
 8005d8c:	20000018 	.word	0x20000018
 8005d90:	20000024 	.word	0x20000024
 8005d94:	20000014 	.word	0x20000014
 8005d98:	20000020 	.word	0x20000020

08005d9c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8005da0:	4b1f      	ldr	r3, [pc, #124]	; (8005e20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	4a1e      	ldr	r2, [pc, #120]	; (8005e20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bfcc      	ite	gt
 8005db2:	2301      	movgt	r3, #1
 8005db4:	2300      	movle	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d12c      	bne.n	8005e16 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8005dbc:	4b19      	ldr	r3, [pc, #100]	; (8005e24 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8005dc2:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a19      	ldr	r2, [pc, #100]	; (8005e30 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 8005dca:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a19      	ldr	r2, [pc, #100]	; (8005e38 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8005dd2:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8005dd4:	4b19      	ldr	r3, [pc, #100]	; (8005e3c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a19      	ldr	r2, [pc, #100]	; (8005e40 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 8005dda:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8005ddc:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a19      	ldr	r2, [pc, #100]	; (8005e48 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8005de2:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a19      	ldr	r2, [pc, #100]	; (8005e50 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 8005dea:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 8005dec:	4b19      	ldr	r3, [pc, #100]	; (8005e54 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a19      	ldr	r2, [pc, #100]	; (8005e58 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 8005df2:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a19      	ldr	r2, [pc, #100]	; (8005e60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 8005dfa:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8005dfc:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8005e02:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8005e04:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a19      	ldr	r2, [pc, #100]	; (8005e70 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8005e0a:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8005e0c:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a19      	ldr	r2, [pc, #100]	; (8005e78 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	e000      	b.n	8005e18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8005e16:	bf00      	nop
#endif
}
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	200004b8 	.word	0x200004b8
 8005e24:	20000048 	.word	0x20000048
 8005e28:	20000028 	.word	0x20000028
 8005e2c:	2000004c 	.word	0x2000004c
 8005e30:	2000002c 	.word	0x2000002c
 8005e34:	20000050 	.word	0x20000050
 8005e38:	20000030 	.word	0x20000030
 8005e3c:	20000054 	.word	0x20000054
 8005e40:	20000034 	.word	0x20000034
 8005e44:	20000058 	.word	0x20000058
 8005e48:	20000038 	.word	0x20000038
 8005e4c:	2000005c 	.word	0x2000005c
 8005e50:	2000003c 	.word	0x2000003c
 8005e54:	20000060 	.word	0x20000060
 8005e58:	20000040 	.word	0x20000040
 8005e5c:	20000064 	.word	0x20000064
 8005e60:	20000044 	.word	0x20000044
 8005e64:	2000001c 	.word	0x2000001c
 8005e68:	20000010 	.word	0x20000010
 8005e6c:	20000024 	.word	0x20000024
 8005e70:	20000018 	.word	0x20000018
 8005e74:	20000020 	.word	0x20000020
 8005e78:	20000014 	.word	0x20000014

08005e7c <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
    {
 8005e84:	4a05      	ldr	r2, [pc, #20]	; (8005e9c <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff fc15 	bl	80056bc <_ZN17MemoryLeakFailureD1Ev>
    }
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	08016e70 	.word	0x08016e70

08005ea0 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
    }
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ffe7 	bl	8005e7c <_ZN25MemoryLeakWarningReporterD1Ev>
 8005eae:	2104      	movs	r1, #4
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff fe53 	bl	8005b5c <_ZdlPvj>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <_ZN14TestTerminatorC1Ev+0x1c>)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	080176c8 	.word	0x080176c8

08005ee0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff ffe8 	bl	8005ec0 <_ZN14TestTerminatorC1Ev>
 8005ef0:	4a03      	ldr	r2, [pc, #12]	; (8005f00 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	080176a0 	.word	0x080176a0

08005f04 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8005f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f06:	b099      	sub	sp, #100	; 0x64
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8005f0e:	f007 ffbd 	bl	800de8c <_ZN10UtestShell10getCurrentEv>
 8005f12:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8005f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	339c      	adds	r3, #156	; 0x9c
 8005f1a:	681c      	ldr	r4, [r3, #0]
 8005f1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f22:	4618      	mov	r0, r3
 8005f24:	f006 fddc 	bl	800cae0 <_ZNK10UtestShell7getNameEv>
 8005f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 f875 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8005f32:	4605      	mov	r5, r0
 8005f34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005f36:	f006 fea2 	bl	800cc7e <_ZNK10UtestShell13getLineNumberEv>
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fcdf 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8005f48:	f107 000c 	add.w	r0, r7, #12
 8005f4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	4633      	mov	r3, r6
 8005f54:	462a      	mov	r2, r5
 8005f56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f58:	f002 ff2c 	bl	8008db4 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff ffbb 	bl	8005ee0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8005f6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005f6e:	f107 030c 	add.w	r3, r7, #12
 8005f72:	4619      	mov	r1, r3
 8005f74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005f76:	47a0      	blx	r4
 8005f78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f008 f87f 	bl	800e080 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8005f82:	f107 030c 	add.w	r3, r7, #12
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 f9ac 	bl	80062e4 <_ZN11FailFailureD1Ev>
 8005f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 f870 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8005f96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f86b 	bl	8007076 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8005fa0:	bf00      	nop
 8005fa2:	375c      	adds	r7, #92	; 0x5c
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fa8 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	4a04      	ldr	r2, [pc, #16]	; (8005fc4 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	08016e84 	.word	0x08016e84

08005fc8 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff ffe8 	bl	8005fa8 <_ZN17MemoryLeakFailureC1Ev>
 8005fd8:	4a03      	ldr	r2, [pc, #12]	; (8005fe8 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	08016e70 	.word	0x08016e70

08005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 8005fec:	b598      	push	{r3, r4, r7, lr}
 8005fee:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d11b      	bne.n	8006030 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8005ff8:	f7ff fe60 	bl	8005cbc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8005ffc:	2004      	movs	r0, #4
 8005ffe:	f7ff fd89 	bl	8005b14 <_Znwj>
 8006002:	4603      	mov	r3, r0
 8006004:	461c      	mov	r4, r3
 8006006:	4620      	mov	r0, r4
 8006008:	f7ff ffde 	bl	8005fc8 <_ZN25MemoryLeakWarningReporterC1Ev>
 800600c:	4b0b      	ldr	r3, [pc, #44]	; (800603c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800600e:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8006010:	f241 1050 	movw	r0, #4432	; 0x1150
 8006014:	f7ff fd7e 	bl	8005b14 <_Znwj>
 8006018:	4603      	mov	r3, r0
 800601a:	461c      	mov	r4, r3
 800601c:	4b07      	ldr	r3, [pc, #28]	; (800603c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4619      	mov	r1, r3
 8006022:	4620      	mov	r0, r4
 8006024:	f00a fc44 	bl	80108b0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8006028:	4b03      	ldr	r3, [pc, #12]	; (8006038 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800602a:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800602c:	f7ff feb6 	bl	8005d9c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8006030:	4b01      	ldr	r3, [pc, #4]	; (8006038 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8006032:	681b      	ldr	r3, [r3, #0]
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd98      	pop	{r3, r4, r7, pc}
 8006038:	200004c0 	.word	0x200004c0
 800603c:	200004bc 	.word	0x200004bc

08006040 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	765a      	strb	r2, [r3, #25]
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8006064:	f7ff fdbc 	bl	8005be0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8006068:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	3204      	adds	r2, #4
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	4790      	blx	r2
    delete globalReporter;
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	3204      	adds	r2, #4
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	4790      	blx	r2
    globalDetector = NULLPTR;
 800608c:	4b02      	ldr	r3, [pc, #8]	; (8006098 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	bf00      	nop
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	200004c0 	.word	0x200004c0
 800609c:	200004bc 	.word	0x200004bc

080060a0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f005 f815 	bl	800b0e0 <_ZN10TestPluginC1ERK12SimpleString>
 80060b6:	4a14      	ldr	r2, [pc, #80]	; (8006108 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	761a      	strb	r2, [r3, #24]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	765a      	strb	r2, [r3, #25]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d102      	bne.n	80060dc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 80060d6:	4a0d      	ldr	r2, [pc, #52]	; (800610c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	615a      	str	r2, [r3, #20]
 80060e8:	e004      	b.n	80060f4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 80060ea:	f7ff ff7f 	bl	8005fec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80060ee:	4602      	mov	r2, r0
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f00a fc6f 	bl	80109dc <_ZN18MemoryLeakDetector6enableEv>
}
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	08016e98 	.word	0x08016e98
 800610c:	200004c4 	.word	0x200004c4

08006110 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	4a09      	ldr	r2, [pc, #36]	; (8006140 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	7e5b      	ldrb	r3, [r3, #25]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8006126:	f7ff fd5b 	bl	8005be0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800612a:	f7ff ff99 	bl	8006060 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4618      	mov	r0, r3
 8006132:	f005 f811 	bl	800b158 <_ZN10TestPluginD1Ev>
    }
}
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	08016e98 	.word	0x08016e98

08006144 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
}
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff ffdf 	bl	8006110 <_ZN23MemoryLeakWarningPluginD1Ev>
 8006152:	2124      	movs	r1, #36	; 0x24
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff fd01 	bl	8005b5c <_ZdlPvj>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	4618      	mov	r0, r3
 8006176:	f00a fc14 	bl	80109a2 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fd ffb0 	bl	80040e0 <_ZNK10TestResult15getFailureCountEv>
 8006180:	4602      	mov	r2, r0
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b097      	sub	sp, #92	; 0x5c
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f00a fc0e 	bl	80109c2 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	2103      	movs	r1, #3
 80061ac:	4618      	mov	r0, r3
 80061ae:	f00a ffab 	bl	8011108 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80061b2:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	7e1b      	ldrb	r3, [r3, #24]
 80061b8:	f083 0301 	eor.w	r3, r3, #1
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00e      	beq.n	80061e0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d009      	beq.n	80061e0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a1c      	ldr	r4, [r3, #32]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7fd ff85 	bl	80040e0 <_ZNK10TestResult15getFailureCountEv>
 80061d6:	4603      	mov	r3, r0
 80061d8:	429c      	cmp	r4, r3
 80061da:	d101      	bne.n	80061e0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 80061e0:	2300      	movs	r3, #0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d04c      	beq.n	8006280 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 80061e6:	f7ff fd4f 	bl	8005c88 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d028      	beq.n	8006242 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	2103      	movs	r1, #3
 80061f6:	4618      	mov	r0, r3
 80061f8:	f00a ff4b 	bl	8011092 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80061fc:	4602      	mov	r2, r0
 80061fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006202:	4611      	mov	r1, r2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fb7e 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800620a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800620e:	f107 0310 	add.w	r3, r7, #16
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	4618      	mov	r0, r3
 8006216:	f002 f8c7 	bl	80083a8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800621a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800621e:	4618      	mov	r0, r3
 8006220:	f000 ff29 	bl	8007076 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3334      	adds	r3, #52	; 0x34
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f107 0210 	add.w	r2, r7, #16
 8006230:	4611      	mov	r1, r2
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8006236:	f107 0310 	add.w	r3, r7, #16
 800623a:	4618      	mov	r0, r3
 800623c:	f002 f974 	bl	8008528 <_ZN11TestFailureD1Ev>
 8006240:	e01e      	b.n	8006280 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01a      	beq.n	8006280 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3338      	adds	r3, #56	; 0x38
 8006250:	681c      	ldr	r4, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	461a      	mov	r2, r3
 8006258:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800625c:	4910      	ldr	r1, [pc, #64]	; (80062a0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800625e:	4618      	mov	r0, r3
 8006260:	f001 fb96 	bl	8007990 <_Z16StringFromFormatPKcz>
 8006264:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006268:	4618      	mov	r0, r3
 800626a:	f000 fed7 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800626e:	4603      	mov	r3, r0
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	47a0      	blx	r4
 8006276:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fefb 	bl	8007076 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	4618      	mov	r0, r3
 8006286:	f00a ff19 	bl	80110bc <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	61da      	str	r2, [r3, #28]
}
 8006296:	bf00      	nop
 8006298:	375c      	adds	r7, #92	; 0x5c
 800629a:	46bd      	mov	sp, r7
 800629c:	bd90      	pop	{r4, r7, pc}
 800629e:	bf00      	nop
 80062a0:	08014fcc 	.word	0x08014fcc

080062a4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	2102      	movs	r1, #2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f00a ff27 	bl	8011108 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80062ba:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d007      	beq.n	80062d4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	2102      	movs	r1, #2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f00a fee1 	bl	8011092 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80062d0:	4603      	mov	r3, r0
 80062d2:	e000      	b.n	80062d6 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 80062d4:	4b02      	ldr	r3, [pc, #8]	; (80062e0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	0801500c 	.word	0x0801500c

080062e4 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	4a05      	ldr	r2, [pc, #20]	; (8006304 <_ZN11FailFailureD1Ev+0x20>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f002 f917 	bl	8008528 <_ZN11TestFailureD1Ev>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	08016ee0 	.word	0x08016ee0

08006308 <_ZN11FailFailureD0Ev>:
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ffe7 	bl	80062e4 <_ZN11FailFailureD1Ev>
 8006316:	2134      	movs	r1, #52	; 0x34
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff fc1f 	bl	8005b5c <_ZdlPvj>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4618      	mov	r0, r3
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <_ZN11SimpleMutexC1Ev+0x20>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4798      	blx	r3
 8006336:	4602      	mov	r2, r0
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]
}
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	200000e8 	.word	0x200000e8

0800634c <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <_ZN11SimpleMutexD1Ev+0x20>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
}
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200000f4 	.word	0x200000f4

08006370 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <_ZN11SimpleMutex4LockEv+0x1c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	200000ec 	.word	0x200000ec

08006390 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	4610      	mov	r0, r2
 80063a2:	4798      	blx	r3
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	200000f0 	.word	0x200000f0

080063b0 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff ffd3 	bl	8006370 <_ZN11SimpleMutex4LockEv>
}
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff ffd5 	bl	8006390 <_ZN11SimpleMutex6UnlockEv>
}
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 80063f4:	4b05      	ldr	r3, [pc, #20]	; (800640c <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d103      	bne.n	8006404 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 80063fc:	f003 fc6c 	bl	8009cd8 <_Z24defaultNewArrayAllocatorv>
 8006400:	4603      	mov	r3, r0
 8006402:	e001      	b.n	8006408 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 8006404:	4b01      	ldr	r3, [pc, #4]	; (800640c <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 8006406:	681b      	ldr	r3, [r3, #0]
}
 8006408:	4618      	mov	r0, r3
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200004c8 	.word	0x200004c8

08006410 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 8006410:	b590      	push	{r4, r7, lr}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800641c:	f7ff ffe8 	bl	80063f0 <_ZN12SimpleString18getStringAllocatorEv>
 8006420:	6803      	ldr	r3, [r0, #0]
 8006422:	3308      	adds	r3, #8
 8006424:	681c      	ldr	r4, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	47a0      	blx	r4
 800642e:	4603      	mov	r3, r0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bd90      	pop	{r4, r7, pc}

08006438 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 8006438:	b590      	push	{r4, r7, lr}
 800643a:	b087      	sub	sp, #28
 800643c:	af02      	add	r7, sp, #8
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 8006446:	f7ff ffd3 	bl	80063f0 <_ZN12SimpleString18getStringAllocatorEv>
 800644a:	6803      	ldr	r3, [r0, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	681c      	ldr	r4, [r3, #0]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	68f9      	ldr	r1, [r7, #12]
 800645a:	47a0      	blx	r4
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	bd90      	pop	{r4, r7, pc}

08006464 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800646c:	2284      	movs	r2, #132	; 0x84
 800646e:	4906      	ldr	r1, [pc, #24]	; (8006488 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 8006470:	2001      	movs	r0, #1
 8006472:	f7ff ffcd 	bl	8006410 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8006476:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
    return empty;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	08015010 	.word	0x08015010

0800648c <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f001 f809 	bl	80074b0 <_ZN12SimpleString7isSpaceEc>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <_ZN12SimpleString4AtoUEPKc+0x20>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3301      	adds	r3, #1
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	e7f3      	b.n	8006494 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 ffe7 	bl	8007488 <_ZN12SimpleString7isDigitEc>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <_ZN12SimpleString4AtoUEPKc+0x40>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b2f      	cmp	r3, #47	; 0x2f
 80064c6:	d901      	bls.n	80064cc <_ZN12SimpleString4AtoUEPKc+0x40>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <_ZN12SimpleString4AtoUEPKc+0x42>
 80064cc:	2300      	movs	r3, #0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d010      	beq.n	80064f4 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	3b30      	subs	r3, #48	; 0x30
 80064ea:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3301      	adds	r3, #1
 80064f0:	607b      	str	r3, [r7, #4]
 80064f2:	e7dd      	b.n	80064b0 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 80064f4:	68fb      	ldr	r3, [r7, #12]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 ffd0 	bl	80074b0 <_ZN12SimpleString7isSpaceEc>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <_ZN12SimpleString4AtoIEPKc+0x20>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3301      	adds	r3, #1
 800651a:	607b      	str	r3, [r7, #4]
 800651c:	e7f3      	b.n	8006506 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 8006524:	7afb      	ldrb	r3, [r7, #11]
 8006526:	2b2d      	cmp	r3, #45	; 0x2d
 8006528:	d002      	beq.n	8006530 <_ZN12SimpleString4AtoIEPKc+0x32>
 800652a:	7afb      	ldrb	r3, [r7, #11]
 800652c:	2b2b      	cmp	r3, #43	; 0x2b
 800652e:	d102      	bne.n	8006536 <_ZN12SimpleString4AtoIEPKc+0x38>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3301      	adds	r3, #1
 8006534:	607b      	str	r3, [r7, #4]

    int  result = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f000 ffa2 	bl	8007488 <_ZN12SimpleString7isDigitEc>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00f      	beq.n	800656a <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	3b30      	subs	r3, #48	; 0x30
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3301      	adds	r3, #1
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	e7e7      	b.n	800653a <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800656a:	7afb      	ldrb	r3, [r7, #11]
 800656c:	2b2d      	cmp	r3, #45	; 0x2d
 800656e:	d102      	bne.n	8006576 <_ZN12SimpleString4AtoIEPKc+0x78>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	425b      	negs	r3, r3
 8006574:	e000      	b.n	8006578 <_ZN12SimpleString4AtoIEPKc+0x7a>
 8006576:	68fb      	ldr	r3, [r7, #12]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00c      	beq.n	80065ac <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d106      	bne.n	80065ac <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3301      	adds	r3, #1
 80065a2:	607b      	str	r3, [r7, #4]
       ++s2;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	3301      	adds	r3, #1
 80065a8:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 80065aa:	e7ee      	b.n	800658a <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	1ad3      	subs	r3, r2, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295
 80065d0:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3301      	adds	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf14      	ite	ne
 80065e4:	2301      	movne	r3, #1
 80065e6:	2300      	moveq	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d000      	beq.n	80065f0 <_ZN12SimpleString6StrLenEPKc+0x2c>
 80065ee:	e7f0      	b.n	80065d2 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 80065f0:	68fb      	ldr	r3, [r7, #12]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d013      	beq.n	8006638 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00f      	beq.n	8006638 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	781a      	ldrb	r2, [r3, #0]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d109      	bne.n	8006638 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3b01      	subs	r3, #1
 8006628:	607b      	str	r3, [r7, #4]
        ++s1;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3301      	adds	r3, #1
 800662e:	60fb      	str	r3, [r7, #12]
        ++s2;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	3301      	adds	r3, #1
 8006634:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 8006636:	e7e8      	b.n	800660a <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d006      	beq.n	800664c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	e000      	b.n	800664e <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800665a:	b480      	push	{r7}
 800665c:	b087      	sub	sp, #28
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	607a      	str	r2, [r7, #4]
    char* result = s1;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	e01e      	b.n	80066b8 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3b01      	subs	r3, #1
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	781a      	ldrb	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 80066b4:	e7e5      	b.n	8006682 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 80066b6:	697b      	ldr	r3, [r7, #20]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	e01b      	b.n	8006712 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d016      	beq.n	8006710 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 80066e2:	6838      	ldr	r0, [r7, #0]
 80066e4:	f7ff ff6e 	bl	80065c4 <_ZN12SimpleString6StrLenEPKc>
 80066e8:	4603      	mov	r3, r0
 80066ea:	461a      	mov	r2, r3
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff ff85 	bl	80065fe <_ZN12SimpleString7StrNCmpEPKcS1_j>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf0c      	ite	eq
 80066fa:	2301      	moveq	r3, #1
 80066fc:	2300      	movne	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	e004      	b.n	8006712 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3301      	adds	r3, #1
 800670c:	607b      	str	r3, [r7, #4]
 800670e:	e7e4      	b.n	80066da <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	4603      	mov	r3, r0
 8006722:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fed9 	bl	80074de <_ZN12SimpleString7isUpperEc>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <_ZN12SimpleString7ToLowerEc+0x20>
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	3320      	adds	r3, #32
 8006736:	b2db      	uxtb	r3, r3
 8006738:	e000      	b.n	800673c <_ZN12SimpleString7ToLowerEc+0x22>
 800673a:	79fb      	ldrb	r3, [r7, #7]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	613b      	str	r3, [r7, #16]

    while (n--)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	1e5a      	subs	r2, r3, #1
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	bf14      	ite	ne
 8006762:	2301      	movne	r3, #1
 8006764:	2300      	moveq	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d013      	beq.n	8006794 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d006      	beq.n	8006786 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	e007      	b.n	8006796 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	3301      	adds	r3, #1
 800678a:	617b      	str	r3, [r7, #20]
            ++p2;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	3301      	adds	r3, #1
 8006790:	613b      	str	r3, [r7, #16]
    while (n--)
 8006792:	e7e1      	b.n	8006758 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00d      	beq.n	80067d0 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6859      	ldr	r1, [r3, #4]
 80067bc:	23ee      	movs	r3, #238	; 0xee
 80067be:	4a06      	ldr	r2, [pc, #24]	; (80067d8 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 80067c0:	f7ff fe3a 	bl	8006438 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	605a      	str	r2, [r3, #4]
    }
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	08015010 	.word	0x08015010

080067dc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff ffdd 	bl	80067a4 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff fe37 	bl	8006464 <_ZNK12SimpleString14getEmptyStringEv>
 80067f6:	4602      	mov	r2, r0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	601a      	str	r2, [r3, #0]
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff ffc7 	bl	80067a4 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	4619      	mov	r1, r3
 8006822:	68b8      	ldr	r0, [r7, #8]
 8006824:	f000 fe12 	bl	800744c <_ZN12SimpleString15copyToNewBufferEPKcj>
 8006828:	4602      	mov	r2, r0
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]
}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff ffae 	bl	80067a4 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f240 1209 	movw	r2, #265	; 0x109
 8006856:	4907      	ldr	r1, [pc, #28]	; (8006874 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff fdd9 	bl	8006410 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	08015010 	.word	0x08015010

08006878 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff ff8d 	bl	80067a4 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	601a      	str	r2, [r3, #0]
}
 8006896:	bf00      	nop
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800689e:	b590      	push	{r4, r7, lr}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681c      	ldr	r4, [r3, #0]
 80068ac:	6838      	ldr	r0, [r7, #0]
 80068ae:	f000 fbc1 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 80068b2:	4603      	mov	r3, r0
 80068b4:	3301      	adds	r3, #1
 80068b6:	461a      	mov	r2, r3
 80068b8:	4621      	mov	r1, r4
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ffa2 	bl	8006804 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd90      	pop	{r4, r7, pc}

080068c8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 80068d2:	6838      	ldr	r0, [r7, #0]
 80068d4:	f7ff fe76 	bl	80065c4 <_ZN12SimpleString6StrLenEPKc>
 80068d8:	4603      	mov	r3, r0
 80068da:	3301      	adds	r3, #1
 80068dc:	461a      	mov	r2, r3
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ff8f 	bl	8006804 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
    return buffer_;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff ff5a 	bl	80067dc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8006928:	e003      	b.n	8006932 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff ffcb 	bl	80068c8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 8006954:	68b8      	ldr	r0, [r7, #8]
 8006956:	f7ff fe35 	bl	80065c4 <_ZN12SimpleString6StrLenEPKc>
 800695a:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	fb02 f303 	mul.w	r3, r2, r3
 8006964:	3301      	adds	r3, #1
 8006966:	4619      	mov	r1, r3
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff ff65 	bl	8006838 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8006974:	2300      	movs	r3, #0
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	429a      	cmp	r2, r3
 800697e:	d20e      	bcs.n	800699e <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3301      	adds	r3, #1
 8006984:	461a      	mov	r2, r3
 8006986:	68b9      	ldr	r1, [r7, #8]
 8006988:	69f8      	ldr	r0, [r7, #28]
 800698a:	f7ff fe66 	bl	800665a <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	4413      	add	r3, r2
 8006994:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	3301      	adds	r3, #1
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	e7ec      	b.n	8006978 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	2200      	movs	r2, #0
 80069a2:	701a      	strb	r2, [r3, #0]
}
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 80069c4:	6838      	ldr	r0, [r7, #0]
 80069c6:	f7ff ff92 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 80069ca:	4603      	mov	r3, r0
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff ff7a 	bl	80068c8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b082      	sub	sp, #8
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
    if (this != &other)
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d003      	beq.n	80069f8 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff ff53 	bl	800689e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 80069f8:	687b      	ldr	r3, [r7, #4]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 8006a02:	b590      	push	{r4, r7, lr}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff ff6e 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006a12:	4604      	mov	r4, r0
 8006a14:	6838      	ldr	r0, [r7, #0]
 8006a16:	f7ff ff6a 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff fe50 	bl	80066c4 <_ZN12SimpleString6StrStrEPKcS1_>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd90      	pop	{r4, r7, pc}

08006a38 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 8006a38:	b590      	push	{r4, r7, lr}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 8006a42:	f107 0308 	add.w	r3, r7, #8
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fabb 	bl	8006fc4 <_ZNK12SimpleString9lowerCaseEv>
 8006a4e:	f107 0310 	add.w	r3, r7, #16
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fab5 	bl	8006fc4 <_ZNK12SimpleString9lowerCaseEv>
 8006a5a:	f107 0210 	add.w	r2, r7, #16
 8006a5e:	f107 0308 	add.w	r3, r7, #8
 8006a62:	4611      	mov	r1, r2
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff ffcc 	bl	8006a02 <_ZNK12SimpleString8containsERKS_>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	461c      	mov	r4, r3
 8006a6e:	bf00      	nop
 8006a70:	f107 0310 	add.w	r3, r7, #16
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fafe 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 faf9 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8006a84:	4623      	mov	r3, r4
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd90      	pop	{r4, r7, pc}

08006a8e <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 8006a8e:	b590      	push	{r4, r7, lr}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 8006a98:	6838      	ldr	r0, [r7, #0]
 8006a9a:	f000 facb 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2301      	moveq	r3, #1
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <_ZNK12SimpleString10startsWithERKS_+0x24>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e022      	b.n	8006af8 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fabe 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	bf0c      	ite	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <_ZNK12SimpleString10startsWithERKS_+0x3e>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e015      	b.n	8006af8 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff ff0e 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	6838      	ldr	r0, [r7, #0]
 8006ad6:	f7ff ff0a 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006ada:	4603      	mov	r3, r0
 8006adc:	4619      	mov	r1, r3
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff fdf0 	bl	80066c4 <_ZN12SimpleString6StrStrEPKcS1_>
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff ff01 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006aec:	4603      	mov	r3, r0
 8006aee:	429c      	cmp	r4, r3
 8006af0:	bf0c      	ite	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	2300      	movne	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd90      	pop	{r4, r7, pc}

08006b00 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 8006b00:	b590      	push	{r4, r7, lr}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
    size_t length = size();
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fa92 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8006b10:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 8006b12:	6838      	ldr	r0, [r7, #0]
 8006b14:	f000 fa8e 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8006b18:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <_ZNK12SimpleString8endsWithERKS_+0x24>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e020      	b.n	8006b66 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <_ZNK12SimpleString8endsWithERKS_+0x2e>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e01b      	b.n	8006b66 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d201      	bcs.n	8006b3a <_ZNK12SimpleString8endsWithERKS_+0x3a>
 8006b36:	2300      	movs	r3, #0
 8006b38:	e015      	b.n	8006b66 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fed7 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006b40:	4601      	mov	r1, r0
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	18cc      	adds	r4, r1, r3
 8006b4a:	6838      	ldr	r0, [r7, #0]
 8006b4c:	f7ff fecf 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006b50:	4603      	mov	r3, r0
 8006b52:	4619      	mov	r1, r3
 8006b54:	4620      	mov	r0, r4
 8006b56:	f7ff fd13 	bl	8006580 <_ZN12SimpleString6StrCmpEPKcS1_>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bf0c      	ite	eq
 8006b60:	2301      	moveq	r3, #1
 8006b62:	2300      	movne	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd90      	pop	{r4, r7, pc}

08006b6e <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff feb6 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006b82:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]
    if (*str){
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d008      	beq.n	8006ba2 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 8006b90:	6838      	ldr	r0, [r7, #0]
 8006b92:	f7ff feac 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006b96:	4603      	mov	r3, r0
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6938      	ldr	r0, [r7, #16]
 8006b9c:	f7ff fd92 	bl	80066c4 <_ZN12SimpleString6StrStrEPKcS1_>
 8006ba0:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d014      	beq.n	8006bd4 <_ZNK12SimpleString5countERKS_+0x66>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d011      	beq.n	8006bd4 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	613b      	str	r3, [r7, #16]
        str++;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	613b      	str	r3, [r7, #16]
        num++;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 8006bc0:	6838      	ldr	r0, [r7, #0]
 8006bc2:	f7ff fe94 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6938      	ldr	r0, [r7, #16]
 8006bcc:	f7ff fd7a 	bl	80066c4 <_ZN12SimpleString6StrStrEPKcS1_>
 8006bd0:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 8006bd2:	e7e6      	b.n	8006ba2 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 8006bd4:	697b      	ldr	r3, [r7, #20]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 8006bde:	b590      	push	{r4, r7, lr}
 8006be0:	b091      	sub	sp, #68	; 0x44
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff ffbe 	bl	8006b6e <_ZNK12SimpleString5countERKS_>
 8006bf2:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff ff82 	bl	8006b00 <_ZNK12SimpleString8endsWithERKS_>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 8006c02:	2300      	movs	r3, #0
 8006c04:	e000      	b.n	8006c08 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 8006c06:	2301      	movs	r3, #1
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 8006c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	4413      	add	r3, r2
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 f84e 	bl	8007cb4 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7ff fe68 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006c1e:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 8006c20:	2300      	movs	r3, #0
 8006c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d235      	bcs.n	8006c98 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 8006c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 8006c30:	68b8      	ldr	r0, [r7, #8]
 8006c32:	f7ff fe5c 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006c36:	4603      	mov	r3, r0
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006c3c:	f7ff fd42 	bl	80066c4 <_ZN12SimpleString6StrStrEPKcS1_>
 8006c40:	4603      	mov	r3, r0
 8006c42:	3301      	adds	r3, #1
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 8006c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f8cd 	bl	8007de8 <_ZN22SimpleStringCollectionixEj>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	f107 031c 	add.w	r3, r7, #28
 8006c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fe55 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8006c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	f107 0014 	add.w	r0, r7, #20
 8006c66:	f107 011c 	add.w	r1, r7, #28
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f000 fb0c 	bl	8007288 <_ZNK12SimpleString9subStringEjj>
 8006c70:	f107 0314 	add.w	r3, r7, #20
 8006c74:	4619      	mov	r1, r3
 8006c76:	4620      	mov	r0, r4
 8006c78:	f7ff feb1 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8006c7c:	f107 0314 	add.w	r3, r7, #20
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 f9f8 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8006c86:	f107 031c 	add.w	r3, r7, #28
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 f9f3 	bl	8007076 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	3301      	adds	r3, #1
 8006c94:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c96:	e7c5      	b.n	8006c24 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d015      	beq.n	8006cca <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 8006c9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 f8a1 	bl	8007de8 <_ZN22SimpleStringCollectionixEj>
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fe29 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8006cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7ff fe8f 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8006cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 f9d6 	bl	8007076 <_ZN12SimpleStringD1Ev>
    }
}
 8006cca:	bf00      	nop
 8006ccc:	3744      	adds	r7, #68	; 0x44
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd90      	pop	{r4, r7, pc}

08006cd2 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f9a6 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8006ce8:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d218      	bcs.n	8006d28 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fdf9 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	78fa      	ldrb	r2, [r7, #3]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <_ZN12SimpleString7replaceEcc+0x4e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	78ba      	ldrb	r2, [r7, #2]
 8006d1e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e7e2      	b.n	8006cee <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08e      	sub	sp, #56	; 0x38
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 8006d3c:	f107 0310 	add.w	r3, r7, #16
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fddf 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8006d48:	f107 0310 	add.w	r3, r7, #16
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff ff0d 	bl	8006b6e <_ZNK12SimpleString5countERKS_>
 8006d54:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006d56:	f107 0310 	add.w	r3, r7, #16
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f98b 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 8006d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d071      	beq.n	8006e4a <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f964 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8006d6c:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 8006d6e:	68b8      	ldr	r0, [r7, #8]
 8006d70:	f7ff fc28 	bl	80065c4 <_ZN12SimpleString6StrLenEPKc>
 8006d74:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff fc24 	bl	80065c4 <_ZN12SimpleString6StrLenEPKc>
 8006d7c:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d82:	fb02 f203 	mul.w	r2, r2, r3
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	441a      	add	r2, r3
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d8e:	fb01 f303 	mul.w	r3, r1, r3
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	3301      	adds	r3, #1
 8006d96:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d951      	bls.n	8006e42 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 8006d9e:	f240 129d 	movw	r2, #413	; 0x19d
 8006da2:	492c      	ldr	r1, [pc, #176]	; (8006e54 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 8006da4:	69f8      	ldr	r0, [r7, #28]
 8006da6:	f7ff fb33 	bl	8006410 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8006daa:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 8006dac:	2300      	movs	r3, #0
 8006dae:	637b      	str	r3, [r7, #52]	; 0x34
 8006db0:	2300      	movs	r3, #0
 8006db2:	633b      	str	r3, [r7, #48]	; 0x30
 8006db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d236      	bcs.n	8006e2a <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff fd96 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc6:	4413      	add	r3, r2
 8006dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff fc16 	bl	80065fe <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2301      	moveq	r3, #1
 8006dda:	2300      	movne	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d011      	beq.n	8006e06 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	18d0      	adds	r0, r2, r3
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	3301      	adds	r3, #1
 8006dec:	461a      	mov	r2, r3
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	f7ff fc33 	bl	800665a <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 8006df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	4413      	add	r3, r2
 8006dfa:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 8006dfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	4413      	add	r3, r2
 8006e02:	637b      	str	r3, [r7, #52]	; 0x34
 8006e04:	e7d6      	b.n	8006db4 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff fd71 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e10:	441a      	add	r2, r3
 8006e12:	69b9      	ldr	r1, [r7, #24]
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	440b      	add	r3, r1
 8006e18:	7812      	ldrb	r2, [r2, #0]
 8006e1a:	701a      	strb	r2, [r3, #0]
                j++;
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	3301      	adds	r3, #1
 8006e20:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	3301      	adds	r3, #1
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 8006e28:	e7c4      	b.n	8006db4 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	4413      	add	r3, r2
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	69b9      	ldr	r1, [r7, #24]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fd1c 	bl	8006878 <_ZN12SimpleString19setInternalBufferToEPcj>
 8006e40:	e004      	b.n	8006e4c <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff fcca 	bl	80067dc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8006e48:	e000      	b.n	8006e4c <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 8006e4a:	bf00      	nop
}
 8006e4c:	3738      	adds	r7, #56	; 0x38
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	08015010 	.word	0x08015010

08006e58 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b089      	sub	sp, #36	; 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 8006e62:	493b      	ldr	r1, [pc, #236]	; (8006f50 <_ZNK12SimpleString9printableEv+0xf8>)
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fd4e 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 8006e6a:	6838      	ldr	r0, [r7, #0]
 8006e6c:	f000 f876 	bl	8006f5c <_ZNK12SimpleString16getPrintableSizeEv>
 8006e70:	4603      	mov	r3, r0
 8006e72:	3301      	adds	r3, #1
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff fcde 	bl	8006838 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 8006e7c:	6838      	ldr	r0, [r7, #0]
 8006e7e:	f000 f8d9 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8006e82:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d252      	bcs.n	8006f3a <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 8006ea0:	7cfb      	ldrb	r3, [r7, #19]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fb43 	bl	800752e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d012      	beq.n	8006ed4 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	18d0      	adds	r0, r2, r3
 8006eb6:	7cfb      	ldrb	r3, [r7, #19]
 8006eb8:	3b07      	subs	r3, #7
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4b25      	ldr	r3, [pc, #148]	; (8006f54 <_ZNK12SimpleString9printableEv+0xfc>)
 8006ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	f7ff fbc7 	bl	800665a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	3302      	adds	r3, #2
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e02e      	b.n	8006f32 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 8006ed4:	7cfb      	ldrb	r3, [r7, #19]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fb15 	bl	8007506 <_ZN12SimpleString9isControlEc>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01e      	beq.n	8006f20 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 8006ee2:	7cfa      	ldrb	r2, [r7, #19]
 8006ee4:	f107 0308 	add.w	r3, r7, #8
 8006ee8:	491b      	ldr	r1, [pc, #108]	; (8006f58 <_ZNK12SimpleString9printableEv+0x100>)
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fd50 	bl	8007990 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	18d4      	adds	r4, r2, r3
 8006ef8:	f107 0308 	add.w	r3, r7, #8
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 f88d 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2204      	movs	r2, #4
 8006f06:	4619      	mov	r1, r3
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f7ff fba6 	bl	800665a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	3304      	adds	r3, #4
 8006f12:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 8006f14:	f107 0308 	add.w	r3, r7, #8
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 f8ac 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8006f1e:	e008      	b.n	8006f32 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	7cfa      	ldrb	r2, [r7, #19]
 8006f2a:	701a      	strb	r2, [r3, #0]
            j++;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	3301      	adds	r3, #1
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	e7a8      	b.n	8006e8c <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]

    return result;
 8006f46:	bf00      	nop
}
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	3724      	adds	r7, #36	; 0x24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd90      	pop	{r4, r7, pc}
 8006f50:	080150d0 	.word	0x080150d0
 8006f54:	20000068 	.word	0x20000068
 8006f58:	080150d4 	.word	0x080150d4

08006f5c <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f865 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8006f6a:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 8006f70:	2300      	movs	r3, #0
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d21e      	bcs.n	8006fba <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	4413      	add	r3, r2
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 8006f88:	7afb      	ldrb	r3, [r7, #11]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 facf 	bl	800752e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e009      	b.n	8006fb2 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 8006f9e:	7afb      	ldrb	r3, [r7, #11]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fab0 	bl	8007506 <_ZN12SimpleString9isControlEc>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	3303      	adds	r3, #3
 8006fb0:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	e7dc      	b.n	8006f74 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 8006fba:	697b      	ldr	r3, [r7, #20]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 8006fc4:	b590      	push	{r4, r7, lr}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff fcec 	bl	80069ae <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f82c 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8006fdc:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d213      	bcs.n	8007012 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7ff fc7f 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	7819      	ldrb	r1, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	18d4      	adds	r4, r2, r3
 8007000:	4608      	mov	r0, r1
 8007002:	f7ff fb8a 	bl	800671a <_ZN12SimpleString7ToLowerEc>
 8007006:	4603      	mov	r3, r0
 8007008:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	e7e7      	b.n	8006fe2 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 8007012:	bf00      	nop
}
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	bd90      	pop	{r4, r7, pc}

0800701c <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
    return getBuffer();
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff fc62 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 800702a:	4603      	mov	r3, r0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff fc56 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8007042:	4603      	mov	r3, r0
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff fabd 	bl	80065c4 <_ZN12SimpleString6StrLenEPKc>
 800704a:	4603      	mov	r3, r0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff ffe9 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	bf0c      	ite	eq
 8007068:	2301      	moveq	r3, #1
 800706a:	2300      	movne	r3, #0
 800706c:	b2db      	uxtb	r3, r3
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff fb90 	bl	80067a4 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800708e:	b590      	push	{r4, r7, lr}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff ffbf 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800709e:	4604      	mov	r4, r0
 80070a0:	6838      	ldr	r0, [r7, #0]
 80070a2:	f7ff ffbb 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 80070a6:	4603      	mov	r3, r0
 80070a8:	4619      	mov	r1, r3
 80070aa:	4620      	mov	r0, r4
 80070ac:	f7ff fa68 	bl	8006580 <_ZN12SimpleString6StrCmpEPKcS1_>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	bf0c      	ite	eq
 80070b6:	2301      	moveq	r3, #1
 80070b8:	2300      	movne	r3, #0
 80070ba:	b2db      	uxtb	r3, r3
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd90      	pop	{r4, r7, pc}

080070c4 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 80070c4:	b590      	push	{r4, r7, lr}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 80070ce:	f107 0308 	add.w	r3, r7, #8
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff ff75 	bl	8006fc4 <_ZNK12SimpleString9lowerCaseEv>
 80070da:	f107 0310 	add.w	r3, r7, #16
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff ff6f 	bl	8006fc4 <_ZNK12SimpleString9lowerCaseEv>
 80070e6:	f107 0210 	add.w	r2, r7, #16
 80070ea:	f107 0308 	add.w	r3, r7, #8
 80070ee:	4611      	mov	r1, r2
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7ff ffcc 	bl	800708e <_ZeqRK12SimpleStringS1_>
 80070f6:	4603      	mov	r3, r0
 80070f8:	461c      	mov	r4, r3
 80070fa:	f107 0310 	add.w	r3, r7, #16
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff ffb9 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8007104:	f107 0308 	add.w	r3, r7, #8
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff ffb4 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800710e:	4623      	mov	r3, r4
}
 8007110:	4618      	mov	r0, r3
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	bd90      	pop	{r4, r7, pc}

08007118 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
    return !(left == right);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff ffb2 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800712a:	4603      	mov	r3, r0
 800712c:	f083 0301 	eor.w	r3, r3, #1
 8007130:	b2db      	uxtb	r3, r3
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 8007146:	68b8      	ldr	r0, [r7, #8]
 8007148:	f7ff fbd1 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 800714c:	4603      	mov	r3, r0
 800714e:	4619      	mov	r1, r3
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff fbd8 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fbc9 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 800715c:	4603      	mov	r3, r0
 800715e:	4619      	mov	r1, r3
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 f817 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    return t;
 8007166:	bf00      	nop
}
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800717a:	6838      	ldr	r0, [r7, #0]
 800717c:	f7ff fbb7 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 8007180:	4603      	mov	r3, r0
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f805 	bl	8007194 <_ZN12SimpleStringpLEPKc>
 800718a:	4603      	mov	r3, r0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff ff48 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 80071a4:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 80071a6:	6838      	ldr	r0, [r7, #0]
 80071a8:	f7ff fa0c 	bl	80065c4 <_ZN12SimpleString6StrLenEPKc>
 80071ac:	4603      	mov	r3, r0
 80071ae:	3301      	adds	r3, #1
 80071b0:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	4413      	add	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fb97 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 80071c0:	4603      	mov	r3, r0
 80071c2:	68f9      	ldr	r1, [r7, #12]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f941 	bl	800744c <_ZN12SimpleString15copyToNewBufferEPKcj>
 80071ca:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	4413      	add	r3, r2
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff fa3f 	bl	800665a <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff fb49 	bl	8006878 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 80071e6:	687b      	ldr	r3, [r7, #4]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b08b      	sub	sp, #44	; 0x2c
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7ff ff18 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8007204:	4604      	mov	r4, r0
 8007206:	68b8      	ldr	r0, [r7, #8]
 8007208:	f7ff ff14 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800720c:	4603      	mov	r3, r0
 800720e:	429c      	cmp	r4, r3
 8007210:	bf8c      	ite	hi
 8007212:	2301      	movhi	r3, #1
 8007214:	2300      	movls	r3, #0
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	461a      	mov	r2, r3
 8007220:	68f9      	ldr	r1, [r7, #12]
 8007222:	68b8      	ldr	r0, [r7, #8]
 8007224:	f7ff ffe4 	bl	80071f0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 8007228:	e02b      	b.n	8007282 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 8007232:	68b8      	ldr	r0, [r7, #8]
 8007234:	f7ff fefe 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8007238:	4604      	mov	r4, r0
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f7ff fefa 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8007240:	4603      	mov	r3, r0
 8007242:	1ae2      	subs	r2, r4, r3
 8007244:	f107 0114 	add.w	r1, r7, #20
 8007248:	f107 0320 	add.w	r3, r7, #32
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff fb75 	bl	800693c <_ZN12SimpleStringC1EPKcj>
 8007252:	f107 0318 	add.w	r3, r7, #24
 8007256:	f107 0120 	add.w	r1, r7, #32
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff ff6c 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8007262:	f107 0318 	add.w	r3, r7, #24
 8007266:	4619      	mov	r1, r3
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f7ff fbb8 	bl	80069de <_ZN12SimpleStringaSERKS_>
 800726e:	f107 0318 	add.w	r3, r7, #24
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff feff 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8007278:	f107 0320 	add.w	r3, r7, #32
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff fefa 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 8007282:	372c      	adds	r7, #44	; 0x2c
 8007284:	46bd      	mov	sp, r7
 8007286:	bd90      	pop	{r4, r7, pc}

08007288 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 8007296:	68b8      	ldr	r0, [r7, #8]
 8007298:	f7ff fecc 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800729c:	4603      	mov	r3, r0
 800729e:	3b01      	subs	r3, #1
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	bf8c      	ite	hi
 80072a6:	2301      	movhi	r3, #1
 80072a8:	2300      	movls	r3, #0
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d004      	beq.n	80072ba <_ZNK12SimpleString9subStringEjj+0x32>
 80072b0:	4919      	ldr	r1, [pc, #100]	; (8007318 <_ZNK12SimpleString9subStringEjj+0x90>)
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7ff fb27 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 80072b8:	e029      	b.n	800730e <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 80072ba:	68b8      	ldr	r0, [r7, #8]
 80072bc:	f7ff fb17 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 80072c0:	4602      	mov	r2, r0
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	441a      	add	r2, r3
 80072c6:	f107 0310 	add.w	r3, r7, #16
 80072ca:	4611      	mov	r1, r2
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fb1a 	bl	8006906 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 80072d2:	f107 0310 	add.w	r3, r7, #16
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff feac 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 80072dc:	4602      	mov	r2, r0
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	4293      	cmp	r3, r2
 80072e2:	bf34      	ite	cc
 80072e4:	2301      	movcc	r3, #1
 80072e6:	2300      	movcs	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	4413      	add	r3, r2
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]

    return newString;
 80072f8:	f107 0310 	add.w	r3, r7, #16
 80072fc:	4619      	mov	r1, r3
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff fb55 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 8007304:	f107 0310 	add.w	r3, r7, #16
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff feb4 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	080150d0 	.word	0x080150d0

0800731c <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f04f 33ff 	mov.w	r3, #4294967295
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	f7ff ffa9 	bl	8007288 <_ZNK12SimpleString9subStringEjj>
}
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff fad0 	bl	80068ee <_ZNK12SimpleString9getBufferEv>
 800734e:	4602      	mov	r2, r0
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	4413      	add	r3, r2
 8007354:	781b      	ldrb	r3, [r3, #0]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	461a      	mov	r2, r3
 800736e:	2100      	movs	r1, #0
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f805 	bl	8007380 <_ZNK12SimpleString8findFromEjc>
 8007376:	4603      	mov	r3, r0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7ff fe50 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8007394:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d213      	bcs.n	80073ca <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff ffca 	bl	800733e <_ZNK12SimpleString2atEj>
 80073aa:	4603      	mov	r3, r0
 80073ac:	461a      	mov	r2, r3
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	4293      	cmp	r3, r2
 80073b2:	bf0c      	ite	eq
 80073b4:	2301      	moveq	r3, #1
 80073b6:	2300      	movne	r3, #0
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <_ZNK12SimpleString8findFromEjc+0x42>
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	e005      	b.n	80073ce <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	3301      	adds	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	e7e7      	b.n	800739a <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4611      	mov	r1, r2
 80073e4:	461a      	mov	r2, r3
 80073e6:	460b      	mov	r3, r1
 80073e8:	71fb      	strb	r3, [r7, #7]
 80073ea:	4613      	mov	r3, r2
 80073ec:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	4619      	mov	r1, r3
 80073f2:	68b8      	ldr	r0, [r7, #8]
 80073f4:	f7ff ffb3 	bl	800735e <_ZNK12SimpleString4findEc>
 80073f8:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d104      	bne.n	800740c <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 8007402:	4911      	ldr	r1, [pc, #68]	; (8007448 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff fa7e 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800740a:	e019      	b.n	8007440 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800740c:	79bb      	ldrb	r3, [r7, #6]
 800740e:	461a      	mov	r2, r3
 8007410:	6979      	ldr	r1, [r7, #20]
 8007412:	68b8      	ldr	r0, [r7, #8]
 8007414:	f7ff ffb4 	bl	8007380 <_ZNK12SimpleString8findFromEjc>
 8007418:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d106      	bne.n	8007430 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff ff77 	bl	800731c <_ZNK12SimpleString9subStringEj>
 800742e:	e007      	b.n	8007440 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	68b9      	ldr	r1, [r7, #8]
 800743c:	f7ff ff24 	bl	8007288 <_ZNK12SimpleString9subStringEjj>
}
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	080150d0 	.word	0x080150d0

0800744c <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 8007456:	f240 2275 	movw	r2, #629	; 0x275
 800745a:	490a      	ldr	r1, [pc, #40]	; (8007484 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800745c:	6838      	ldr	r0, [r7, #0]
 800745e:	f7fe ffd7 	bl	8006410 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007462:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff f8f6 	bl	800665a <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	3b01      	subs	r3, #1
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800747a:	68fb      	ldr	r3, [r7, #12]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	08015010 	.word	0x08015010

08007488 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	2b2f      	cmp	r3, #47	; 0x2f
 8007496:	d904      	bls.n	80074a2 <_ZN12SimpleString7isDigitEc+0x1a>
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	2b39      	cmp	r3, #57	; 0x39
 800749c:	d801      	bhi.n	80074a2 <_ZN12SimpleString7isDigitEc+0x1a>
 800749e:	2301      	movs	r3, #1
 80074a0:	e000      	b.n	80074a4 <_ZN12SimpleString7isDigitEc+0x1c>
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d005      	beq.n	80074cc <_ZN12SimpleString7isSpaceEc+0x1c>
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d904      	bls.n	80074d0 <_ZN12SimpleString7isSpaceEc+0x20>
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	2b0d      	cmp	r3, #13
 80074ca:	d801      	bhi.n	80074d0 <_ZN12SimpleString7isSpaceEc+0x20>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <_ZN12SimpleString7isSpaceEc+0x22>
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	4603      	mov	r3, r0
 80074e6:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	2b40      	cmp	r3, #64	; 0x40
 80074ec:	d904      	bls.n	80074f8 <_ZN12SimpleString7isUpperEc+0x1a>
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	2b5a      	cmp	r3, #90	; 0x5a
 80074f2:	d801      	bhi.n	80074f8 <_ZN12SimpleString7isUpperEc+0x1a>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <_ZN12SimpleString7isUpperEc+0x1c>
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	4603      	mov	r3, r0
 800750e:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	2b1f      	cmp	r3, #31
 8007514:	d902      	bls.n	800751c <_ZN12SimpleString9isControlEc+0x16>
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	2b7f      	cmp	r3, #127	; 0x7f
 800751a:	d101      	bne.n	8007520 <_ZN12SimpleString9isControlEc+0x1a>
 800751c:	2301      	movs	r3, #1
 800751e:	e000      	b.n	8007522 <_ZN12SimpleString9isControlEc+0x1c>
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	4603      	mov	r3, r0
 8007536:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	2b06      	cmp	r3, #6
 800753c:	d904      	bls.n	8007548 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	2b0d      	cmp	r3, #13
 8007542:	d801      	bhi.n	8007548 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <_Z10StringFromPKc>:
{
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
}

SimpleString StringFrom(const char *value)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff f9cf 	bl	8006906 <_ZN12SimpleStringC1EPKc>
}
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 8007570:	b590      	push	{r4, r7, lr}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800757a:	2400      	movs	r4, #0
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00e      	beq.n	80075a0 <_Z25PrintableStringFromOrNullPKc+0x30>
 8007582:	f107 0308 	add.w	r3, r7, #8
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff ffe4 	bl	8007556 <_Z10StringFromPKc>
 800758e:	2401      	movs	r4, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f107 0208 	add.w	r2, r7, #8
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fc5d 	bl	8006e58 <_ZNK12SimpleString9printableEv>
 800759e:	e004      	b.n	80075aa <_Z25PrintableStringFromOrNullPKc+0x3a>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4908      	ldr	r1, [pc, #32]	; (80075c4 <_Z25PrintableStringFromOrNullPKc+0x54>)
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff ffd6 	bl	8007556 <_Z10StringFromPKc>
 80075aa:	2c00      	cmp	r4, #0
 80075ac:	d004      	beq.n	80075b8 <_Z25PrintableStringFromOrNullPKc+0x48>
 80075ae:	f107 0308 	add.w	r3, r7, #8
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff fd5f 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80075b8:	bf00      	nop
}
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd90      	pop	{r4, r7, pc}
 80075c2:	bf00      	nop
 80075c4:	080150f0 	.word	0x080150f0

080075c8 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	4904      	ldr	r1, [pc, #16]	; (80075e8 <_Z10StringFromi+0x20>)
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 f9d9 	bl	8007990 <_Z16StringFromFormatPKcz>
}
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	080150f8 	.word	0x080150f8

080075ec <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	4904      	ldr	r1, [pc, #16]	; (800760c <_Z10StringFroml+0x20>)
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 f9c7 	bl	8007990 <_Z16StringFromFormatPKcz>
}
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	080150fc 	.word	0x080150fc

08007610 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800761a:	f107 0308 	add.w	r3, r7, #8
 800761e:	4910      	ldr	r1, [pc, #64]	; (8007660 <_Z10StringFromPKv+0x50>)
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff f970 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8007626:	f107 0310 	add.w	r3, r7, #16
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f945 	bl	80078bc <_Z13HexStringFromPKv>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f107 0210 	add.w	r2, r7, #16
 8007638:	f107 0108 	add.w	r1, r7, #8
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff fd7c 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8007642:	f107 0310 	add.w	r3, r7, #16
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff fd15 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800764c:	f107 0308 	add.w	r3, r7, #8
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fd10 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8007656:	bf00      	nop
}
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	08015100 	.word	0x08015100

08007664 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800766e:	f107 0308 	add.w	r3, r7, #8
 8007672:	4910      	ldr	r1, [pc, #64]	; (80076b4 <_Z10StringFromPFvvE+0x50>)
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff f946 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800767a:	f107 0310 	add.w	r3, r7, #16
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	4618      	mov	r0, r3
 8007682:	f000 f92f 	bl	80078e4 <_Z13HexStringFromPFvvE>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f107 0210 	add.w	r2, r7, #16
 800768c:	f107 0108 	add.w	r1, r7, #8
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff fd52 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8007696:	f107 0310 	add.w	r3, r7, #16
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff fceb 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80076a0:	f107 0308 	add.w	r3, r7, #8
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7ff fce6 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80076aa:	bf00      	nop
}
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	08015100 	.word	0x08015100

080076b8 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	4904      	ldr	r1, [pc, #16]	; (80076d8 <_Z13HexStringFroml+0x20>)
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 f961 	bl	8007990 <_Z16StringFromFormatPKcz>
}
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	08015104 	.word	0x08015104

080076dc <_Z13HexStringFroma>:
{
    return StringFromFormat("%x", value);
}

SimpleString HexStringFrom(signed char value)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 80076e8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4912      	ldr	r1, [pc, #72]	; (8007738 <_Z13HexStringFroma+0x5c>)
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 f94d 	bl	8007990 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 80076f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da16      	bge.n	800772c <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff fc98 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8007704:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	1e9a      	subs	r2, r3, #2
 800770a:	f107 030c 	add.w	r3, r7, #12
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff fe03 	bl	800731c <_ZNK12SimpleString9subStringEj>
 8007716:	f107 030c 	add.w	r3, r7, #12
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff f95e 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8007722:	f107 030c 	add.w	r3, r7, #12
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff fca5 	bl	8007076 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800772c:	bf00      	nop
}
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	08015108 	.word	0x08015108

0800773c <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	4904      	ldr	r1, [pc, #16]	; (800775c <_Z13HexStringFromm+0x20>)
 800774c:	4618      	mov	r0, r3
 800774e:	f000 f91f 	bl	8007990 <_Z16StringFromFormatPKcz>
}
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	08015104 	.word	0x08015104

08007760 <_Z30BracketsFormattedHexStringFroml>:
{
    return BracketsFormattedHexString(HexStringFrom(value));
}

SimpleString BracketsFormattedHexStringFrom(long value)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800776a:	f107 0308 	add.w	r3, r7, #8
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff ffa1 	bl	80076b8 <_Z13HexStringFroml>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f107 0208 	add.w	r2, r7, #8
 800777c:	4611      	mov	r1, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f846 	bl	8007810 <_Z26BracketsFormattedHexString12SimpleString>
 8007784:	f107 0308 	add.w	r3, r7, #8
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff fc74 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800778e:	bf00      	nop
}
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 80077a2:	f107 0308 	add.w	r3, r7, #8
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff ffc7 	bl	800773c <_Z13HexStringFromm>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f107 0208 	add.w	r2, r7, #8
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 f82a 	bl	8007810 <_Z26BracketsFormattedHexString12SimpleString>
 80077bc:	f107 0308 	add.w	r3, r7, #8
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff fc58 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80077c6:	bf00      	nop
}
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 80077dc:	f107 0308 	add.w	r3, r7, #8
 80077e0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff ff78 	bl	80076dc <_Z13HexStringFroma>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f107 0208 	add.w	r2, r7, #8
 80077f2:	4611      	mov	r1, r2
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 f80b 	bl	8007810 <_Z26BracketsFormattedHexString12SimpleString>
 80077fa:	f107 0308 	add.w	r3, r7, #8
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff fc39 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8007804:	bf00      	nop
}
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
	...

08007810 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b088      	sub	sp, #32
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800781a:	f107 0310 	add.w	r3, r7, #16
 800781e:	4917      	ldr	r1, [pc, #92]	; (800787c <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff f870 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8007826:	f107 0308 	add.w	r3, r7, #8
 800782a:	f107 0110 	add.w	r1, r7, #16
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff fc82 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8007836:	f107 0318 	add.w	r3, r7, #24
 800783a:	4911      	ldr	r1, [pc, #68]	; (8007880 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff f862 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f107 0218 	add.w	r2, r7, #24
 8007848:	f107 0108 	add.w	r1, r7, #8
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fc74 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8007852:	f107 0318 	add.w	r3, r7, #24
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fc0d 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800785c:	f107 0308 	add.w	r3, r7, #8
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff fc08 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8007866:	f107 0310 	add.w	r3, r7, #16
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff fc03 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8007870:	bf00      	nop
}
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	3720      	adds	r7, #32
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	0801510c 	.word	0x0801510c
 8007880:	08015110 	.word	0x08015110

08007884 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800788c:	1d3b      	adds	r3, r7, #4
 800788e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 80078a8:	1d3b      	adds	r3, r7, #4
 80078aa:	60fb      	str	r3, [r7, #12]
    return *long_value;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 80078c6:	6838      	ldr	r0, [r7, #0]
 80078c8:	f7ff ffdc 	bl	8007884 <_ZL25convertPointerToLongValuePKv>
 80078cc:	4602      	mov	r2, r0
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4903      	ldr	r1, [pc, #12]	; (80078e0 <_Z13HexStringFromPKv+0x24>)
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 f85c 	bl	8007990 <_Z16StringFromFormatPKcz>
}
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	08015104 	.word	0x08015104

080078e4 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 80078ee:	6838      	ldr	r0, [r7, #0]
 80078f0:	f7ff ffd6 	bl	80078a0 <_ZL33convertFunctionPointerToLongValuePFvvE>
 80078f4:	4602      	mov	r2, r0
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4903      	ldr	r1, [pc, #12]	; (8007908 <_Z13HexStringFromPFvvE+0x24>)
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f848 	bl	8007990 <_Z16StringFromFormatPKcz>
}
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	08015104 	.word	0x08015104

0800790c <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af02      	add	r7, sp, #8
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	ed87 0b00 	vstr	d0, [r7]
 8007918:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800791a:	4b18      	ldr	r3, [pc, #96]	; (800797c <_Z10StringFromdi+0x70>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	ed97 0b00 	vldr	d0, [r7]
 8007922:	4798      	blx	r3
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	bf14      	ite	ne
 800792a:	2301      	movne	r3, #1
 800792c:	2300      	moveq	r3, #0
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 8007934:	4912      	ldr	r1, [pc, #72]	; (8007980 <_Z10StringFromdi+0x74>)
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7fe ffe5 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800793c:	e01a      	b.n	8007974 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800793e:	4b11      	ldr	r3, [pc, #68]	; (8007984 <_Z10StringFromdi+0x78>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	ed97 0b00 	vldr	d0, [r7]
 8007946:	4798      	blx	r3
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	bf14      	ite	ne
 800794e:	2301      	movne	r3, #1
 8007950:	2300      	moveq	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 8007958:	490b      	ldr	r1, [pc, #44]	; (8007988 <_Z10StringFromdi+0x7c>)
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7fe ffd3 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8007960:	e008      	b.n	8007974 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007968:	e9cd 2300 	strd	r2, r3, [sp]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	4907      	ldr	r1, [pc, #28]	; (800798c <_Z10StringFromdi+0x80>)
 8007970:	f000 f80e 	bl	8007990 <_Z16StringFromFormatPKcz>
}
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	200000e0 	.word	0x200000e0
 8007980:	08015144 	.word	0x08015144
 8007984:	200000e4 	.word	0x200000e4
 8007988:	08015158 	.word	0x08015158
 800798c:	08015168 	.word	0x08015168

08007990 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 8007990:	b40e      	push	{r1, r2, r3}
 8007992:	b580      	push	{r7, lr}
 8007994:	b087      	sub	sp, #28
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800799a:	4910      	ldr	r1, [pc, #64]	; (80079dc <_Z16StringFromFormatPKcz+0x4c>)
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7fe ffb2 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 80079a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80079a6:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 80079a8:	f107 0310 	add.w	r3, r7, #16
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 f839 	bl	8007a28 <_Z17VStringFromFormatPKcSt9__va_list>
 80079b6:	f107 0310 	add.w	r3, r7, #16
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff f80e 	bl	80069de <_ZN12SimpleStringaSERKS_>
 80079c2:	f107 0310 	add.w	r3, r7, #16
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fb55 	bl	8007076 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 80079cc:	bf00      	nop
}
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079d8:	b003      	add	sp, #12
 80079da:	4770      	bx	lr
 80079dc:	080150d0 	.word	0x080150d0

080079e0 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	4904      	ldr	r1, [pc, #16]	; (8007a00 <_Z10StringFromj+0x20>)
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff ffcd 	bl	8007990 <_Z16StringFromFormatPKcz>
}
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	08015174 	.word	0x08015174

08007a04 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	4904      	ldr	r1, [pc, #16]	; (8007a24 <_Z10StringFromm+0x20>)
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff ffbb 	bl	8007990 <_Z16StringFromFormatPKcz>
}
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	08015178 	.word	0x08015178

08007a28 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 8007a28:	b590      	push	{r4, r7, lr}
 8007a2a:	b0a7      	sub	sp, #156	; 0x9c
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 8007a38:	492e      	ldr	r1, [pc, #184]	; (8007af4 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f7fe ff63 	bl	8006906 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 8007a40:	4b2d      	ldr	r3, [pc, #180]	; (8007af8 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8007a42:	681c      	ldr	r4, [r3, #0]
 8007a44:	f107 0014 	add.w	r0, r7, #20
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	2164      	movs	r1, #100	; 0x64
 8007a4e:	47a0      	blx	r4
 8007a50:	4603      	mov	r3, r0
 8007a52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 8007a56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a5a:	2b63      	cmp	r3, #99	; 0x63
 8007a5c:	d813      	bhi.n	8007a86 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 8007a5e:	f107 0214 	add.w	r2, r7, #20
 8007a62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe ff4c 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8007a6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007a72:	4619      	mov	r1, r3
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7fe ffb2 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8007a7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff faf9 	bl	8007076 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 8007a84:	e031      	b.n	8007aea <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 8007a86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 8007a90:	f240 32c3 	movw	r2, #963	; 0x3c3
 8007a94:	4919      	ldr	r1, [pc, #100]	; (8007afc <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8007a96:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8007a9a:	f7fe fcb9 	bl	8006410 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007a9e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 8007aa2:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8007aa4:	681c      	ldr	r4, [r3, #0]
 8007aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007aae:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8007ab2:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 8007ab4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007ab8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe ff22 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8007ac2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7fe ff88 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8007ace:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff facf 	bl	8007076 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 8007ad8:	f240 33c7 	movw	r3, #967	; 0x3c7
 8007adc:	4a07      	ldr	r2, [pc, #28]	; (8007afc <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8007ade:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ae2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8007ae6:	f7fe fca7 	bl	8006438 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 8007aea:	bf00      	nop
}
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	379c      	adds	r7, #156	; 0x9c
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd90      	pop	{r4, r7, pc}
 8007af4:	080150d0 	.word	0x080150d0
 8007af8:	200000ac 	.word	0x200000ac
 8007afc:	08015010 	.word	0x08015010

08007b00 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08a      	sub	sp, #40	; 0x28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
    SimpleString result;
 8007b0c:	491f      	ldr	r1, [pc, #124]	; (8007b8c <_Z16StringFromBinaryPKhj+0x8c>)
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7fe fef9 	bl	8006906 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 8007b14:	2300      	movs	r3, #0
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
 8007b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d219      	bcs.n	8007b54 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	4413      	add	r3, r2
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f107 0314 	add.w	r3, r7, #20
 8007b2e:	4918      	ldr	r1, [pc, #96]	; (8007b90 <_Z16StringFromBinaryPKhj+0x90>)
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7ff ff2d 	bl	8007990 <_Z16StringFromFormatPKcz>
 8007b36:	f107 0314 	add.w	r3, r7, #20
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff fb17 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8007b42:	f107 0314 	add.w	r3, r7, #20
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff fa95 	bl	8007076 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	3301      	adds	r3, #1
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
 8007b52:	e7e1      	b.n	8007b18 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f7ff fa6d 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	f107 001c 	add.w	r0, r7, #28
 8007b62:	2200      	movs	r2, #0
 8007b64:	68f9      	ldr	r1, [r7, #12]
 8007b66:	f7ff fb8f 	bl	8007288 <_ZNK12SimpleString9subStringEjj>
 8007b6a:	f107 031c 	add.w	r3, r7, #28
 8007b6e:	4619      	mov	r1, r3
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f7fe ff34 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8007b76:	f107 031c 	add.w	r3, r7, #28
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fa7b 	bl	8007076 <_ZN12SimpleStringD1Ev>

    return result;
 8007b80:	bf00      	nop
}
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	3728      	adds	r7, #40	; 0x28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	080150d0 	.word	0x080150d0
 8007b90:	0801517c 	.word	0x0801517c

08007b94 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d006      	beq.n	8007bb4 <_Z22StringFromBinaryOrNullPKhj+0x20>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	68b9      	ldr	r1, [r7, #8]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff ffa7 	bl	8007b00 <_Z16StringFromBinaryPKhj>
 8007bb2:	e004      	b.n	8007bbe <_Z22StringFromBinaryOrNullPKhj+0x2a>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4904      	ldr	r1, [pc, #16]	; (8007bc8 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7ff fccc 	bl	8007556 <_Z10StringFromPKc>
}
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	080150f0 	.word	0x080150f0

08007bcc <_Z20StringFromMaskedBitsmmj>:
{
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
}

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8007bda:	4925      	ldr	r1, [pc, #148]	; (8007c70 <_Z20StringFromMaskedBitsmmj+0xa4>)
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f7fe fe92 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d802      	bhi.n	8007bee <_Z20StringFromMaskedBitsmmj+0x22>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	e000      	b.n	8007bf0 <_Z20StringFromMaskedBitsmmj+0x24>
 8007bee:	2320      	movs	r3, #32
 8007bf0:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d22d      	bcs.n	8007c66 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00c      	beq.n	8007c2e <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <_Z20StringFromMaskedBitsmmj+0x56>
 8007c1e:	4b15      	ldr	r3, [pc, #84]	; (8007c74 <_Z20StringFromMaskedBitsmmj+0xa8>)
 8007c20:	e000      	b.n	8007c24 <_Z20StringFromMaskedBitsmmj+0x58>
 8007c22:	4b15      	ldr	r3, [pc, #84]	; (8007c78 <_Z20StringFromMaskedBitsmmj+0xac>)
 8007c24:	4619      	mov	r1, r3
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7ff fab4 	bl	8007194 <_ZN12SimpleStringpLEPKc>
 8007c2c:	e003      	b.n	8007c36 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 8007c2e:	4913      	ldr	r1, [pc, #76]	; (8007c7c <_Z20StringFromMaskedBitsmmj+0xb0>)
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff faaf 	bl	8007194 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	2b07      	cmp	r3, #7
 8007c3e:	d108      	bne.n	8007c52 <_Z20StringFromMaskedBitsmmj+0x86>
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d003      	beq.n	8007c52 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 8007c4a:	490d      	ldr	r1, [pc, #52]	; (8007c80 <_Z20StringFromMaskedBitsmmj+0xb4>)
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff faa1 	bl	8007194 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	3301      	adds	r3, #1
 8007c62:	61fb      	str	r3, [r7, #28]
 8007c64:	e7cd      	b.n	8007c02 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 8007c66:	bf00      	nop
}
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	3720      	adds	r7, #32
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	080150d0 	.word	0x080150d0
 8007c74:	080151a8 	.word	0x080151a8
 8007c78:	080151ac 	.word	0x080151ac
 8007c7c:	080151b0 	.word	0x080151b0
 8007c80:	080151b4 	.word	0x080151b4

08007c84 <_ZN22SimpleStringCollectionC1Ev>:
    }

    return StringFromFormat("%u%s", number, suffix);
}

SimpleStringCollection::SimpleStringCollection()
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4907      	ldr	r1, [pc, #28]	; (8007cb0 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe fe37 	bl	8006906 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]
    size_ = 0;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	60da      	str	r2, [r3, #12]
}
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	080150d0 	.word	0x080150d0

08007cb4 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 8007cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d01e      	beq.n	8007d04 <_ZN22SimpleStringCollection8allocateEj+0x50>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3b04      	subs	r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	18d4      	adds	r4, r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	429c      	cmp	r4, r3
 8007cdc:	d004      	beq.n	8007ce8 <_ZN22SimpleStringCollection8allocateEj+0x34>
 8007cde:	3c08      	subs	r4, #8
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f7ff f9c8 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8007ce6:	e7f6      	b.n	8007cd6 <_ZN22SimpleStringCollection8allocateEj+0x22>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f1a3 0208 	sub.w	r2, r3, #8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3b04      	subs	r3, #4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4610      	mov	r0, r2
 8007d00:	f7fd ff5e 	bl	8005bc0 <_ZdaPvj>

    size_ = _size;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68dc      	ldr	r4, [r3, #12]
 8007d0e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8007d12:	d202      	bcs.n	8007d1a <_ZN22SimpleStringCollection8allocateEj+0x66>
 8007d14:	1c63      	adds	r3, r4, #1
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	e001      	b.n	8007d1e <_ZN22SimpleStringCollection8allocateEj+0x6a>
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1e:	f240 4227 	movw	r2, #1063	; 0x427
 8007d22:	4910      	ldr	r1, [pc, #64]	; (8007d64 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fd ff29 	bl	8005b7c <_ZnajPKci>
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	1d2b      	adds	r3, r5, #4
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	2208      	movs	r2, #8
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	1d2b      	adds	r3, r5, #4
 8007d36:	601c      	str	r4, [r3, #0]
 8007d38:	f105 0308 	add.w	r3, r5, #8
 8007d3c:	1e62      	subs	r2, r4, #1
 8007d3e:	4614      	mov	r4, r2
 8007d40:	461e      	mov	r6, r3
 8007d42:	2c00      	cmp	r4, #0
 8007d44:	db06      	blt.n	8007d54 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 8007d46:	4908      	ldr	r1, [pc, #32]	; (8007d68 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f7fe fddc 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8007d4e:	3608      	adds	r6, #8
 8007d50:	3c01      	subs	r4, #1
 8007d52:	e7f6      	b.n	8007d42 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 8007d54:	f105 0208 	add.w	r2, r5, #8
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d64:	08015010 	.word	0x08015010
 8007d68:	080150d0 	.word	0x080150d0

08007d6c <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 8007d6c:	b590      	push	{r4, r7, lr}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01e      	beq.n	8007dba <_ZN22SimpleStringCollectionD1Ev+0x4e>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3b04      	subs	r3, #4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	18d4      	adds	r4, r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	429c      	cmp	r4, r3
 8007d92:	d004      	beq.n	8007d9e <_ZN22SimpleStringCollectionD1Ev+0x32>
 8007d94:	3c08      	subs	r4, #8
 8007d96:	4620      	mov	r0, r4
 8007d98:	f7ff f96d 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8007d9c:	e7f6      	b.n	8007d8c <_ZN22SimpleStringCollectionD1Ev+0x20>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f1a3 0208 	sub.w	r2, r3, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3b04      	subs	r3, #4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3301      	adds	r3, #1
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7fd ff03 	bl	8005bc0 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff f959 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd90      	pop	{r4, r7, pc}

08007dce <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
    return size_;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
	...

08007de8 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d315      	bcc.n	8007e28 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	1d1c      	adds	r4, r3, #4
 8007e00:	f107 0308 	add.w	r3, r7, #8
 8007e04:	490d      	ldr	r1, [pc, #52]	; (8007e3c <_ZN22SimpleStringCollectionixEj+0x54>)
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe fd7d 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8007e0c:	f107 0308 	add.w	r3, r7, #8
 8007e10:	4619      	mov	r1, r3
 8007e12:	4620      	mov	r0, r4
 8007e14:	f7fe fde3 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8007e18:	f107 0308 	add.w	r3, r7, #8
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff f92a 	bl	8007076 <_ZN12SimpleStringD1Ev>
        return empty_;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3304      	adds	r3, #4
 8007e26:	e004      	b.n	8007e32 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	4413      	add	r3, r2
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd90      	pop	{r4, r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	080150d0 	.word	0x080150d0

08007e40 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fc f970 	bl	8004130 <_ZN17ConsoleTestOutputC1Ev>
 8007e50:	4a08      	ldr	r2, [pc, #32]	; (8007e74 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	611a      	str	r2, [r3, #16]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3314      	adds	r3, #20
 8007e60:	4905      	ldr	r1, [pc, #20]	; (8007e78 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe fd4f 	bl	8006906 <_ZN12SimpleStringC1EPKc>
{
}
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	08016f0c 	.word	0x08016f0c
 8007e78:	080151d0 	.word	0x080151d0

08007e7c <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	4a08      	ldr	r2, [pc, #32]	; (8007ea8 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3314      	adds	r3, #20
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff f8f1 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fc f95c 	bl	8004154 <_ZN17ConsoleTestOutputD1Ev>
{
}
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	08016f0c 	.word	0x08016f0c

08007eac <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
}
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff ffe1 	bl	8007e7c <_ZN18TeamCityTestOutputD1Ev>
 8007eba:	211c      	movs	r1, #28
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fd fe4d 	bl	8005b5c <_ZdlPvj>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	332c      	adds	r3, #44	; 0x2c
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	492b      	ldr	r1, [pc, #172]	; (8007f90 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 8007ee6:	f107 0308 	add.w	r3, r7, #8
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f004 fdf7 	bl	800cae0 <_ZNK10UtestShell7getNameEv>
 8007ef2:	f107 0308 	add.w	r3, r7, #8
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff f890 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8007efc:	4603      	mov	r3, r0
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f919 	bl	8008138 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8007f06:	f107 0308 	add.w	r3, r7, #8
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff f8b3 	bl	8007076 <_ZN12SimpleStringD1Ev>
    print("']\n");
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	332c      	adds	r3, #44	; 0x2c
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	491e      	ldr	r1, [pc, #120]	; (8007f94 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4798      	blx	r3
    if (!test.willRun()) {
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3318      	adds	r3, #24
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6838      	ldr	r0, [r7, #0]
 8007f2a:	4798      	blx	r3
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f083 0301 	eor.w	r3, r3, #1
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d024      	beq.n	8007f82 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	332c      	adds	r3, #44	; 0x2c
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4915      	ldr	r1, [pc, #84]	; (8007f98 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 8007f48:	f107 0310 	add.w	r3, r7, #16
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f004 fdc6 	bl	800cae0 <_ZNK10UtestShell7getNameEv>
 8007f54:	f107 0310 	add.w	r3, r7, #16
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff f85f 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f8e8 	bl	8008138 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8007f68:	f107 0310 	add.w	r3, r7, #16
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff f882 	bl	8007076 <_ZN12SimpleStringD1Ev>
        print("']\n");
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	332c      	adds	r3, #44	; 0x2c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4905      	ldr	r1, [pc, #20]	; (8007f94 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4798      	blx	r3
    }
    currtest_ = &test;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	611a      	str	r2, [r3, #16]
}
 8007f88:	bf00      	nop
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	080151d4 	.word	0x080151d4
 8007f94:	080151f4 	.word	0x080151f4
 8007f98:	080151f8 	.word	0x080151f8

08007f9c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8007f9c:	b5b0      	push	{r4, r5, r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d03b      	beq.n	8008026 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	332c      	adds	r3, #44	; 0x2c
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	491d      	ldr	r1, [pc, #116]	; (8008030 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 8007fba:	4610      	mov	r0, r2
 8007fbc:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	f107 0308 	add.w	r3, r7, #8
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f004 fd89 	bl	800cae0 <_ZNK10UtestShell7getNameEv>
 8007fce:	f107 0308 	add.w	r3, r7, #8
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff f822 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f8ab 	bl	8008138 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8007fe2:	f107 0308 	add.w	r3, r7, #8
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff f845 	bl	8007076 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	332c      	adds	r3, #44	; 0x2c
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	490f      	ldr	r1, [pc, #60]	; (8008034 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 8007ffc:	687d      	ldr	r5, [r7, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3334      	adds	r3, #52	; 0x34
 8008004:	681c      	ldr	r4, [r3, #0]
 8008006:	6838      	ldr	r0, [r7, #0]
 8008008:	f004 fa0a 	bl	800c420 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800800c:	4603      	mov	r3, r0
 800800e:	4619      	mov	r1, r3
 8008010:	4628      	mov	r0, r5
 8008012:	47a0      	blx	r4
    print("']\n");
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	332c      	adds	r3, #44	; 0x2c
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4906      	ldr	r1, [pc, #24]	; (8008038 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 8008020:	4610      	mov	r0, r2
 8008022:	4798      	blx	r3
 8008024:	e000      	b.n	8008028 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 8008026:	bf00      	nop
}
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bdb0      	pop	{r4, r5, r7, pc}
 800802e:	bf00      	nop
 8008030:	08015218 	.word	0x08015218
 8008034:	08015238 	.word	0x08015238
 8008038:	080151f4 	.word	0x080151f4

0800803c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800803c:	b590      	push	{r4, r7, lr}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f103 0414 	add.w	r4, r3, #20
 800804c:	f107 0308 	add.w	r3, r7, #8
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f004 fd53 	bl	800cafe <_ZNK10UtestShell8getGroupEv>
 8008058:	f107 0308 	add.w	r3, r7, #8
 800805c:	4619      	mov	r1, r3
 800805e:	4620      	mov	r0, r4
 8008060:	f7fe fcbd 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8008064:	f107 0308 	add.w	r3, r7, #8
 8008068:	4618      	mov	r0, r3
 800806a:	f7ff f804 	bl	8007076 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	332c      	adds	r3, #44	; 0x2c
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	490c      	ldr	r1, [pc, #48]	; (80080ac <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800807a:	4610      	mov	r0, r2
 800807c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3314      	adds	r3, #20
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe ffca 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8008088:	4603      	mov	r3, r0
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f853 	bl	8008138 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	332c      	adds	r3, #44	; 0x2c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4904      	ldr	r1, [pc, #16]	; (80080b0 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800809e:	4610      	mov	r0, r2
 80080a0:	4798      	blx	r3
}
 80080a2:	bf00      	nop
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd90      	pop	{r4, r7, pc}
 80080aa:	bf00      	nop
 80080ac:	08015248 	.word	0x08015248
 80080b0:	080151f4 	.word	0x080151f4

080080b4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 80080b4:	b590      	push	{r4, r7, lr}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f103 0414 	add.w	r4, r3, #20
 80080c4:	f107 0308 	add.w	r3, r7, #8
 80080c8:	4918      	ldr	r1, [pc, #96]	; (800812c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fc1b 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 80080d0:	f107 0308 	add.w	r3, r7, #8
 80080d4:	4619      	mov	r1, r3
 80080d6:	4620      	mov	r0, r4
 80080d8:	f7fe ffd9 	bl	800708e <_ZeqRK12SimpleStringS1_>
 80080dc:	4603      	mov	r3, r0
 80080de:	461c      	mov	r4, r3
 80080e0:	f107 0308 	add.w	r3, r7, #8
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe ffc6 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80080ea:	2c00      	cmp	r4, #0
 80080ec:	d11a      	bne.n	8008124 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	332c      	adds	r3, #44	; 0x2c
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	490d      	ldr	r1, [pc, #52]	; (8008130 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 80080fa:	4610      	mov	r0, r2
 80080fc:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3314      	adds	r3, #20
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe ff8a 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8008108:	4603      	mov	r3, r0
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f813 	bl	8008138 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	332c      	adds	r3, #44	; 0x2c
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4905      	ldr	r1, [pc, #20]	; (8008134 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800811e:	4610      	mov	r0, r2
 8008120:	4798      	blx	r3
 8008122:	e000      	b.n	8008126 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 8008124:	bf00      	nop
}
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	bd90      	pop	{r4, r7, pc}
 800812c:	080151d0 	.word	0x080151d0
 8008130:	0801526c 	.word	0x0801526c
 8008134:	080151f4 	.word	0x080151f4

08008138 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
    while (*s) {
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d03f      	beq.n	80081ca <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b27      	cmp	r3, #39	; 0x27
 8008150:	d00b      	beq.n	800816a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b7c      	cmp	r3, #124	; 0x7c
 8008158:	d007      	beq.n	800816a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2b5b      	cmp	r3, #91	; 0x5b
 8008160:	d003      	beq.n	800816a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b5d      	cmp	r3, #93	; 0x5d
 8008168:	d107      	bne.n	800817a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800816a:	237c      	movs	r3, #124	; 0x7c
 800816c:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	73bb      	strb	r3, [r7, #14]
 8008178:	e01a      	b.n	80081b0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b0d      	cmp	r3, #13
 8008180:	d106      	bne.n	8008190 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 8008182:	237c      	movs	r3, #124	; 0x7c
 8008184:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 8008186:	2372      	movs	r3, #114	; 0x72
 8008188:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	73bb      	strb	r3, [r7, #14]
 800818e:	e00f      	b.n	80081b0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b0a      	cmp	r3, #10
 8008196:	d106      	bne.n	80081a6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 8008198:	237c      	movs	r3, #124	; 0x7c
 800819a:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800819c:	236e      	movs	r3, #110	; 0x6e
 800819e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73bb      	strb	r3, [r7, #14]
 80081a4:	e004      	b.n	80081b0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3328      	adds	r3, #40	; 0x28
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f107 010c 	add.w	r1, r7, #12
 80081be:	4610      	mov	r0, r2
 80081c0:	4798      	blx	r3
        s++;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	3301      	adds	r3, #1
 80081c6:	603b      	str	r3, [r7, #0]
    while (*s) {
 80081c8:	e7bb      	b.n	8008142 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 80081d4:	b5b0      	push	{r4, r5, r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	332c      	adds	r3, #44	; 0x2c
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4968      	ldr	r1, [pc, #416]	; (800838c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 80081ea:	4610      	mov	r0, r2
 80081ec:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3310      	adds	r3, #16
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f107 0208 	add.w	r2, r7, #8
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	f107 0308 	add.w	r3, r7, #8
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe ff09 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800820a:	4603      	mov	r3, r0
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff ff92 	bl	8008138 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008214:	f107 0308 	add.w	r3, r7, #8
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe ff2c 	bl	8007076 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	332c      	adds	r3, #44	; 0x2c
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4959      	ldr	r1, [pc, #356]	; (8008390 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800822a:	4610      	mov	r0, r2
 800822c:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800822e:	6838      	ldr	r0, [r7, #0]
 8008230:	f000 fa15 	bl	800865e <_ZNK11TestFailure17isOutsideTestFileEv>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800823a:	6838      	ldr	r0, [r7, #0]
 800823c:	f000 fa21 	bl	8008682 <_ZNK11TestFailure18isInHelperFunctionEv>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800824a:	2300      	movs	r3, #0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d042      	beq.n	80082d6 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	332c      	adds	r3, #44	; 0x2c
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	494e      	ldr	r1, [pc, #312]	; (8008394 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 8008260:	687d      	ldr	r5, [r7, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	332c      	adds	r3, #44	; 0x2c
 8008268:	681c      	ldr	r4, [r3, #0]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	331c      	adds	r3, #28
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f107 0210 	add.w	r2, r7, #16
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	4610      	mov	r0, r2
 800827a:	4798      	blx	r3
 800827c:	f107 0310 	add.w	r3, r7, #16
 8008280:	4618      	mov	r0, r3
 8008282:	f7fe fecb 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8008286:	4603      	mov	r3, r0
 8008288:	4619      	mov	r1, r3
 800828a:	4628      	mov	r0, r5
 800828c:	47a0      	blx	r4
 800828e:	f107 0310 	add.w	r3, r7, #16
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe feef 	bl	8007076 <_ZN12SimpleStringD1Ev>
        print(":");
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	332c      	adds	r3, #44	; 0x2c
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	493d      	ldr	r1, [pc, #244]	; (8008398 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
        print(failure.getTestLineNumber());
 80082a8:	687d      	ldr	r5, [r7, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3334      	adds	r3, #52	; 0x34
 80082b0:	681c      	ldr	r4, [r3, #0]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3320      	adds	r3, #32
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6838      	ldr	r0, [r7, #0]
 80082bc:	4798      	blx	r3
 80082be:	4603      	mov	r3, r0
 80082c0:	4619      	mov	r1, r3
 80082c2:	4628      	mov	r0, r5
 80082c4:	47a0      	blx	r4
        print("): ");
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	332c      	adds	r3, #44	; 0x2c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4932      	ldr	r1, [pc, #200]	; (800839c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 80082d2:	4610      	mov	r0, r2
 80082d4:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f107 0218 	add.w	r2, r7, #24
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	4610      	mov	r0, r2
 80082e6:	4798      	blx	r3
 80082e8:	f107 0318 	add.w	r3, r7, #24
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe fe95 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 80082f2:	4603      	mov	r3, r0
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff ff1e 	bl	8008138 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80082fc:	f107 0318 	add.w	r3, r7, #24
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe feb8 	bl	8007076 <_ZN12SimpleStringD1Ev>
    print(":");
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	332c      	adds	r3, #44	; 0x2c
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4921      	ldr	r1, [pc, #132]	; (8008398 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8008312:	4610      	mov	r0, r2
 8008314:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 8008316:	687d      	ldr	r5, [r7, #4]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3334      	adds	r3, #52	; 0x34
 800831e:	681c      	ldr	r4, [r3, #0]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3314      	adds	r3, #20
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6838      	ldr	r0, [r7, #0]
 800832a:	4798      	blx	r3
 800832c:	4603      	mov	r3, r0
 800832e:	4619      	mov	r1, r3
 8008330:	4628      	mov	r0, r5
 8008332:	47a0      	blx	r4

    print("' details='");
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	332c      	adds	r3, #44	; 0x2c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4918      	ldr	r1, [pc, #96]	; (80083a0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3318      	adds	r3, #24
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f107 0220 	add.w	r2, r7, #32
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	4610      	mov	r0, r2
 8008354:	4798      	blx	r3
 8008356:	f107 0320 	add.w	r3, r7, #32
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fe5e 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8008360:	4603      	mov	r3, r0
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff fee7 	bl	8008138 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800836a:	f107 0320 	add.w	r3, r7, #32
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe fe81 	bl	8007076 <_ZN12SimpleStringD1Ev>
    print("']\n");
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	332c      	adds	r3, #44	; 0x2c
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4909      	ldr	r1, [pc, #36]	; (80083a4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
}
 8008384:	bf00      	nop
 8008386:	3728      	adds	r7, #40	; 0x28
 8008388:	46bd      	mov	sp, r7
 800838a:	bdb0      	pop	{r4, r5, r7, pc}
 800838c:	08015290 	.word	0x08015290
 8008390:	080152b0 	.word	0x080152b0
 8008394:	080152bc 	.word	0x080152bc
 8008398:	080152cc 	.word	0x080152cc
 800839c:	080152d0 	.word	0x080152d0
 80083a0:	080152d4 	.word	0x080152d4
 80083a4:	080151f4 	.word	0x080151f4

080083a8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 80083b4:	4a1a      	ldr	r2, [pc, #104]	; (8008420 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3314      	adds	r3, #20
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	3204      	adds	r2, #4
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	4610      	mov	r0, r2
 80083ca:	4798      	blx	r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	330c      	adds	r3, #12
 80083d0:	68b9      	ldr	r1, [r7, #8]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f004 fb84 	bl	800cae0 <_ZNK10UtestShell7getNameEv>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3314      	adds	r3, #20
 80083dc:	68b9      	ldr	r1, [r7, #8]
 80083de:	4618      	mov	r0, r3
 80083e0:	f004 fc3e 	bl	800cc60 <_ZNK10UtestShell7getFileEv>
 80083e4:	68b8      	ldr	r0, [r7, #8]
 80083e6:	f004 fc4a 	bl	800cc7e <_ZNK10UtestShell13getLineNumberEv>
 80083ea:	4602      	mov	r2, r0
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	61da      	str	r2, [r3, #28]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3320      	adds	r3, #32
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f004 fc32 	bl	800cc60 <_ZNK10UtestShell7getFileEv>
 80083fc:	68b8      	ldr	r0, [r7, #8]
 80083fe:	f004 fc3e 	bl	800cc7e <_ZNK10UtestShell13getLineNumberEv>
 8008402:	4602      	mov	r2, r0
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	629a      	str	r2, [r3, #40]	; 0x28
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	332c      	adds	r3, #44	; 0x2c
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe facd 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
{
}
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	080171d8 	.word	0x080171d8

08008424 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 8008432:	4a19      	ldr	r2, [pc, #100]	; (8008498 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3314      	adds	r3, #20
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	3204      	adds	r2, #4
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	4610      	mov	r0, r2
 8008448:	4798      	blx	r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	330c      	adds	r3, #12
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	4618      	mov	r0, r3
 8008452:	f004 fb45 	bl	800cae0 <_ZNK10UtestShell7getNameEv>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3314      	adds	r3, #20
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe fa52 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	61da      	str	r2, [r3, #28]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3320      	adds	r3, #32
 800846c:	68b9      	ldr	r1, [r7, #8]
 800846e:	4618      	mov	r0, r3
 8008470:	f004 fbf6 	bl	800cc60 <_ZNK10UtestShell7getFileEv>
 8008474:	68b8      	ldr	r0, [r7, #8]
 8008476:	f004 fc02 	bl	800cc7e <_ZNK10UtestShell13getLineNumberEv>
 800847a:	4602      	mov	r2, r0
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	629a      	str	r2, [r3, #40]	; 0x28
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	332c      	adds	r3, #44	; 0x2c
 8008484:	4905      	ldr	r1, [pc, #20]	; (800849c <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fa3d 	bl	8006906 <_ZN12SimpleStringC1EPKc>
{
}
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	080171d8 	.word	0x080171d8
 800849c:	080152e0 	.word	0x080152e0

080084a0 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 80084aa:	4a1e      	ldr	r2, [pc, #120]	; (8008524 <_ZN11TestFailureC1ERKS_+0x84>)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	1d1a      	adds	r2, r3, #4
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4619      	mov	r1, r3
 80084ba:	4610      	mov	r0, r2
 80084bc:	f7fe fa77 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f103 020c 	add.w	r2, r3, #12
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	330c      	adds	r3, #12
 80084ca:	4619      	mov	r1, r3
 80084cc:	4610      	mov	r0, r2
 80084ce:	f7fe fa6e 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f103 0214 	add.w	r2, r3, #20
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	3314      	adds	r3, #20
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f7fe fa65 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	69da      	ldr	r2, [r3, #28]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	61da      	str	r2, [r3, #28]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f103 0220 	add.w	r2, r3, #32
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	3320      	adds	r3, #32
 80084f6:	4619      	mov	r1, r3
 80084f8:	4610      	mov	r0, r2
 80084fa:	f7fe fa58 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	629a      	str	r2, [r3, #40]	; 0x28
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	332c      	adds	r3, #44	; 0x2c
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f7fe fa4b 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
{
}
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	080171d8 	.word	0x080171d8

08008528 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	4a10      	ldr	r2, [pc, #64]	; (8008574 <_ZN11TestFailureD1Ev+0x4c>)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	332c      	adds	r3, #44	; 0x2c
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fd9b 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3320      	adds	r3, #32
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe fd96 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3314      	adds	r3, #20
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fd91 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	330c      	adds	r3, #12
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fd8c 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3304      	adds	r3, #4
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fd87 	bl	8007076 <_ZN12SimpleStringD1Ev>
{
}
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	080171d8 	.word	0x080171d8

08008578 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
}
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7ff ffd1 	bl	8008528 <_ZN11TestFailureD1Ev>
 8008586:	2134      	movs	r1, #52	; 0x34
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7fd fae7 	bl	8005b5c <_ZdlPvj>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
    return fileName_;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	3314      	adds	r3, #20
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7fe fa00 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
}
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
    return testFileName_;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	3320      	adds	r3, #32
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fe f9f1 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
}
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
    return testName_;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	3304      	adds	r3, #4
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7fe f9e2 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
}
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	330c      	adds	r3, #12
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fe f9d3 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
}
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	69db      	ldr	r3, [r3, #28]
}
 800861c:	4618      	mov	r0, r3
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
    return message_;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	332c      	adds	r3, #44	; 0x2c
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7fe f9ac 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
}
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f103 0220 	add.w	r2, r3, #32
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3314      	adds	r3, #20
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f7fe fd50 	bl	8007118 <_ZneRK12SimpleStringS1_>
 8008678:	4603      	mov	r3, r0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69da      	ldr	r2, [r3, #28]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008692:	429a      	cmp	r2, r3
 8008694:	bf34      	ite	cc
 8008696:	2301      	movcc	r3, #1
 8008698:	2300      	movcs	r3, #0
 800869a:	b2db      	uxtb	r3, r3
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 80086a8:	b590      	push	{r4, r7, lr}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7fe fcb0 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 80086bc:	4604      	mov	r4, r0
 80086be:	6838      	ldr	r0, [r7, #0]
 80086c0:	f7fe fcac 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 80086c4:	4603      	mov	r3, r0
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	4622      	mov	r2, r4
 80086ca:	4903      	ldr	r1, [pc, #12]	; (80086d8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 80086cc:	f7ff f960 	bl	8007990 <_Z16StringFromFormatPKcz>
}
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd90      	pop	{r4, r7, pc}
 80086d8:	080152ec 	.word	0x080152ec

080086dc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 80086dc:	b590      	push	{r4, r7, lr}
 80086de:	b097      	sub	sp, #92	; 0x5c
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 80086ea:	494c      	ldr	r1, [pc, #304]	; (800881c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f7fe f90a 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 80086f2:	2314      	movs	r3, #20
 80086f4:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 80086f6:	230a      	movs	r3, #10
 80086f8:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 80086fa:	f107 0320 	add.w	r3, r7, #32
 80086fe:	220a      	movs	r2, #10
 8008700:	4947      	ldr	r1, [pc, #284]	; (8008820 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe f91a 	bl	800693c <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 8008708:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800870c:	f107 0120 	add.w	r1, r7, #32
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fd11 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8008718:	f107 0318 	add.w	r3, r7, #24
 800871c:	f107 0220 	add.w	r2, r7, #32
 8008720:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe fd08 	bl	800713a <_ZNK12SimpleStringplERKS_>
 800872a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe fca1 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8008734:	f107 0310 	add.w	r3, r7, #16
 8008738:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800873a:	493a      	ldr	r1, [pc, #232]	; (8008824 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff f927 	bl	8007990 <_Z16StringFromFormatPKcz>

    result += "\n";
 8008742:	4939      	ldr	r1, [pc, #228]	; (8008828 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f7fe fd25 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800874a:	f107 0310 	add.w	r3, r7, #16
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fc64 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8008754:	4604      	mov	r4, r0
 8008756:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800875a:	f107 0118 	add.w	r1, r7, #24
 800875e:	2314      	movs	r3, #20
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	f7fe fd91 	bl	8007288 <_ZNK12SimpleString9subStringEjj>
 8008766:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800876a:	4618      	mov	r0, r3
 800876c:	f7fe fc56 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8008770:	4603      	mov	r3, r0
 8008772:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008776:	4622      	mov	r2, r4
 8008778:	492c      	ldr	r1, [pc, #176]	; (800882c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800877a:	f7ff f909 	bl	8007990 <_Z16StringFromFormatPKcz>
 800877e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008782:	4619      	mov	r1, r3
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7fe fcf3 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800878a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe fc71 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8008794:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008798:	4618      	mov	r0, r3
 800879a:	f7fe fc6c 	bl	8007076 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800879e:	f107 0310 	add.w	r3, r7, #16
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fc46 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f103 020a 	add.w	r2, r3, #10
 80087ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80087b2:	491b      	ldr	r1, [pc, #108]	; (8008820 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe f8c1 	bl	800693c <_ZN12SimpleStringC1EPKcj>
 80087ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fc2c 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 80087c4:	4602      	mov	r2, r0
 80087c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80087ca:	4919      	ldr	r1, [pc, #100]	; (8008830 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff f8df 	bl	8007990 <_Z16StringFromFormatPKcz>
 80087d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80087d6:	4619      	mov	r1, r3
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f7fe fcc9 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 80087de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe fc47 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80087e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fc42 	bl	8007076 <_ZN12SimpleStringD1Ev>
    return result;
 80087f2:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 80087f4:	f107 0310 	add.w	r3, r7, #16
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe fc3c 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 80087fe:	f107 0318 	add.w	r3, r7, #24
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fc37 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8008808:	f107 0320 	add.w	r3, r7, #32
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe fc32 	bl	8007076 <_ZN12SimpleStringD1Ev>
    return result;
 8008812:	bf00      	nop
}
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	375c      	adds	r7, #92	; 0x5c
 8008818:	46bd      	mov	sp, r7
 800881a:	bd90      	pop	{r4, r7, pc}
 800881c:	0801530c 	.word	0x0801530c
 8008820:	08015310 	.word	0x08015310
 8008824:	08015314 	.word	0x08015314
 8008828:	0801533c 	.word	0x0801533c
 800882c:	08015340 	.word	0x08015340
 8008830:	08015348 	.word	0x08015348

08008834 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 8008834:	b590      	push	{r4, r7, lr}
 8008836:	b087      	sub	sp, #28
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 8008840:	491a      	ldr	r1, [pc, #104]	; (80088ac <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f7fe f85f 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7fe fc03 	bl	8007054 <_ZNK12SimpleString7isEmptyEv>
 800884e:	4603      	mov	r3, r0
 8008850:	f083 0301 	eor.w	r3, r3, #1
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d022      	beq.n	80088a0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800885a:	f107 0310 	add.w	r3, r7, #16
 800885e:	4914      	ldr	r1, [pc, #80]	; (80088b0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe f850 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8008866:	f107 0310 	add.w	r3, r7, #16
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7fe f90e 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 8008872:	4603      	mov	r3, r0
 8008874:	f083 0301 	eor.w	r3, r3, #1
 8008878:	b2dc      	uxtb	r4, r3
 800887a:	f107 0310 	add.w	r3, r7, #16
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fbf9 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8008884:	2c00      	cmp	r4, #0
 8008886:	d003      	beq.n	8008890 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 8008888:	490a      	ldr	r1, [pc, #40]	; (80088b4 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f7fe fc82 	bl	8007194 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 8008890:	6879      	ldr	r1, [r7, #4]
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7fe fc6c 	bl	8007170 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 8008898:	4907      	ldr	r1, [pc, #28]	; (80088b8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7fe fc7a 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 80088a0:	bf00      	nop
}
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd90      	pop	{r4, r7, pc}
 80088aa:	bf00      	nop
 80088ac:	0801530c 	.word	0x0801530c
 80088b0:	08015350 	.word	0x08015350
 80088b4:	0801535c 	.word	0x0801535c
 80088b8:	08015368 	.word	0x08015368

080088bc <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 80088bc:	b590      	push	{r4, r7, lr}
 80088be:	b089      	sub	sp, #36	; 0x24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	68b9      	ldr	r1, [r7, #8]
 80088d2:	f7ff fda7 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80088d6:	4a19      	ldr	r2, [pc, #100]	; (800893c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80088e2:	68f9      	ldr	r1, [r7, #12]
 80088e4:	f107 0310 	add.w	r3, r7, #16
 80088e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff ffa2 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80088f0:	f107 0310 	add.w	r3, r7, #16
 80088f4:	4619      	mov	r1, r3
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7fe f871 	bl	80069de <_ZN12SimpleStringaSERKS_>
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fbb8 	bl	8007076 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800890c:	68f9      	ldr	r1, [r7, #12]
 800890e:	f107 0018 	add.w	r0, r7, #24
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008916:	f7ff fec7 	bl	80086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800891a:	f107 0318 	add.w	r3, r7, #24
 800891e:	4619      	mov	r1, r3
 8008920:	4620      	mov	r0, r4
 8008922:	f7fe fc25 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8008926:	f107 0318 	add.w	r3, r7, #24
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fba3 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4618      	mov	r0, r3
 8008934:	3724      	adds	r7, #36	; 0x24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd90      	pop	{r4, r7, pc}
 800893a:	bf00      	nop
 800893c:	080171ac 	.word	0x080171ac

08008940 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 8008940:	b5b0      	push	{r4, r5, r7, lr}
 8008942:	b094      	sub	sp, #80	; 0x50
 8008944:	af00      	add	r7, sp, #0
 8008946:	6278      	str	r0, [r7, #36]	; 0x24
 8008948:	6239      	str	r1, [r7, #32]
 800894a:	61fa      	str	r2, [r7, #28]
 800894c:	61bb      	str	r3, [r7, #24]
 800894e:	ed87 0b04 	vstr	d0, [r7, #16]
 8008952:	ed87 1b02 	vstr	d1, [r7, #8]
 8008956:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800895a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	6a39      	ldr	r1, [r7, #32]
 8008962:	f7ff fd5f 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008966:	4a4a      	ldr	r2, [pc, #296]	; (8008a90 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff ff5a 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008980:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008984:	4619      	mov	r1, r3
 8008986:	4620      	mov	r0, r4
 8008988:	f7fe f829 	bl	80069de <_ZN12SimpleStringaSERKS_>
 800898c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008990:	4618      	mov	r0, r3
 8008992:	f7fe fb70 	bl	8007076 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800899c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800899e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089a2:	2107      	movs	r1, #7
 80089a4:	ed97 0b04 	vldr	d0, [r7, #16]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fe ffaf 	bl	800790c <_Z10StringFromdi>
 80089ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089b2:	2107      	movs	r1, #7
 80089b4:	ed97 0b02 	vldr	d0, [r7, #8]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe ffa7 	bl	800790c <_Z10StringFromdi>
 80089be:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80089c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80089ca:	4629      	mov	r1, r5
 80089cc:	f7ff fe6c 	bl	80086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80089d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089d4:	4619      	mov	r1, r3
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7fe fbca 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 80089dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe fb48 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80089e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fb43 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80089f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fb3e 	bl	8007076 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	332c      	adds	r3, #44	; 0x2c
 80089fe:	4925      	ldr	r1, [pc, #148]	; (8008a94 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe fbc7 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008a0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008a10:	2107      	movs	r1, #7
 8008a12:	ed97 0b00 	vldr	d0, [r7]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe ff78 	bl	800790c <_Z10StringFromdi>
 8008a1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008a20:	4619      	mov	r1, r3
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7fe fba4 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8008a28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe fb22 	bl	8007076 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	332c      	adds	r3, #44	; 0x2c
 8008a36:	4918      	ldr	r1, [pc, #96]	; (8008a98 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fbab 	bl	8007194 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 8008a3e:	4b17      	ldr	r3, [pc, #92]	; (8008a9c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	ed97 0b04 	vldr	d0, [r7, #16]
 8008a46:	4798      	blx	r3
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10f      	bne.n	8008a6e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	ed97 0b02 	vldr	d0, [r7, #8]
 8008a56:	4798      	blx	r3
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d107      	bne.n	8008a6e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	ed97 0b00 	vldr	d0, [r7]
 8008a66:	4798      	blx	r3
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e000      	b.n	8008a74 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 8008a72:	2300      	movs	r3, #0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d005      	beq.n	8008a84 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	332c      	adds	r3, #44	; 0x2c
 8008a7c:	4908      	ldr	r1, [pc, #32]	; (8008aa0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fb88 	bl	8007194 <_ZN12SimpleStringpLEPKc>
}
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	4618      	mov	r0, r3
 8008a88:	3750      	adds	r7, #80	; 0x50
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	08017180 	.word	0x08017180
 8008a94:	0801536c 	.word	0x0801536c
 8008a98:	08015384 	.word	0x08015384
 8008a9c:	200000e0 	.word	0x200000e0
 8008aa0:	08015388 	.word	0x08015388

08008aa4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8008aa4:	b590      	push	{r4, r7, lr}
 8008aa6:	b093      	sub	sp, #76	; 0x4c
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	f7ff fcb3 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008abe:	4a4f      	ldr	r2, [pc, #316]	; (8008bfc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008aca:	68f9      	ldr	r1, [r7, #12]
 8008acc:	f107 0320 	add.w	r3, r7, #32
 8008ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff feae 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008ad8:	f107 0320 	add.w	r3, r7, #32
 8008adc:	4619      	mov	r1, r3
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f7fd ff7d 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8008ae4:	f107 0320 	add.w	r3, r7, #32
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fac4 	bl	8007076 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8008aee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008af0:	f7fe fa94 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8008af4:	4602      	mov	r2, r0
 8008af6:	f107 0318 	add.w	r3, r7, #24
 8008afa:	4611      	mov	r1, r2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fe fd37 	bl	8007570 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8008b02:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008b04:	f7fe fa8a 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	f107 0310 	add.w	r3, r7, #16
 8008b0e:	4611      	mov	r1, r2
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe fd2d 	bl	8007570 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008b1c:	68f9      	ldr	r1, [r7, #12]
 8008b1e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008b22:	f107 0310 	add.w	r3, r7, #16
 8008b26:	f107 0218 	add.w	r2, r7, #24
 8008b2a:	f7ff fdbd 	bl	80086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b32:	4619      	mov	r1, r3
 8008b34:	4620      	mov	r0, r4
 8008b36:	f7fe fb1b 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8008b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fa99 	bl	8007076 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 8008b44:	2300      	movs	r3, #0
 8008b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b4a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008b4c:	f7fe fbf7 	bl	800733e <_ZNK12SimpleString2atEj>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461c      	mov	r4, r3
 8008b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b56:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b58:	f7fe fbf1 	bl	800733e <_ZNK12SimpleString2atEj>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	429c      	cmp	r4, r3
 8008b60:	bf0c      	ite	eq
 8008b62:	2301      	moveq	r3, #1
 8008b64:	2300      	movne	r3, #0
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 8008b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6e:	3301      	adds	r3, #1
 8008b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b72:	e7e9      	b.n	8008b48 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8008b74:	2300      	movs	r3, #0
 8008b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b78:	f107 0310 	add.w	r3, r7, #16
 8008b7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fbdd 	bl	800733e <_ZNK12SimpleString2atEj>
 8008b84:	4603      	mov	r3, r0
 8008b86:	461c      	mov	r4, r3
 8008b88:	f107 0318 	add.w	r3, r7, #24
 8008b8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fbd5 	bl	800733e <_ZNK12SimpleString2atEj>
 8008b94:	4603      	mov	r3, r0
 8008b96:	429c      	cmp	r4, r3
 8008b98:	bf0c      	ite	eq
 8008b9a:	2301      	moveq	r3, #1
 8008b9c:	2300      	movne	r3, #0
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008baa:	e7e5      	b.n	8008b78 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008bb2:	68f9      	ldr	r1, [r7, #12]
 8008bb4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008bb8:	f107 0210 	add.w	r2, r7, #16
 8008bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	f7ff fd8b 	bl	80086dc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8008bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f7fe facf 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8008bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe fa4d 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8008bdc:	f107 0310 	add.w	r3, r7, #16
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fe fa48 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8008be6:	f107 0318 	add.w	r3, r7, #24
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fe fa43 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3744      	adds	r7, #68	; 0x44
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd90      	pop	{r4, r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	08017154 	.word	0x08017154

08008c00 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 8008c00:	b590      	push	{r4, r7, lr}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	68b9      	ldr	r1, [r7, #8]
 8008c16:	f7ff fc05 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008c1a:	4a1a      	ldr	r2, [pc, #104]	; (8008c84 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008c26:	68f9      	ldr	r1, [r7, #12]
 8008c28:	f107 0310 	add.w	r3, r7, #16
 8008c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff fe00 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008c34:	f107 0310 	add.w	r3, r7, #16
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f7fd fecf 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8008c40:	f107 0310 	add.w	r3, r7, #16
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fe fa16 	bl	8007076 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	332c      	adds	r3, #44	; 0x2c
 8008c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fe fa8d 	bl	8007170 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	332c      	adds	r3, #44	; 0x2c
 8008c5a:	490b      	ldr	r1, [pc, #44]	; (8008c88 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fe fa99 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	332c      	adds	r3, #44	; 0x2c
 8008c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe fa81 	bl	8007170 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	332c      	adds	r3, #44	; 0x2c
 8008c72:	4906      	ldr	r1, [pc, #24]	; (8008c8c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fe fa8d 	bl	8007194 <_ZN12SimpleStringpLEPKc>
}
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	371c      	adds	r7, #28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd90      	pop	{r4, r7, pc}
 8008c84:	08017128 	.word	0x08017128
 8008c88:	080153ac 	.word	0x080153ac
 8008c8c:	080153b0 	.word	0x080153b0

08008c90 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8008c90:	b5b0      	push	{r4, r5, r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	f7ff fbbd 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008caa:	4a1c      	ldr	r2, [pc, #112]	; (8008d1c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	f107 0310 	add.w	r3, r7, #16
 8008cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff fdb8 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008cc4:	f107 0310 	add.w	r3, r7, #16
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f7fd fe87 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8008cd0:	f107 0310 	add.w	r3, r7, #16
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe f9ce 	bl	8007076 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008ce0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008ce2:	f7fe f99b 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cea:	f7fe f997 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f107 0018 	add.w	r0, r7, #24
 8008cf4:	462a      	mov	r2, r5
 8008cf6:	490a      	ldr	r1, [pc, #40]	; (8008d20 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 8008cf8:	f7fe fe4a 	bl	8007990 <_Z16StringFromFormatPKcz>
 8008cfc:	f107 0318 	add.w	r3, r7, #24
 8008d00:	4619      	mov	r1, r3
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7fe fa34 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8008d08:	f107 0318 	add.w	r3, r7, #24
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe f9b2 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4618      	mov	r0, r3
 8008d16:	3720      	adds	r7, #32
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8008d1c:	080170fc 	.word	0x080170fc
 8008d20:	080153bc 	.word	0x080153bc

08008d24 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	f7ff fb73 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008d3e:	4a1a      	ldr	r2, [pc, #104]	; (8008da8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008d4a:	68f9      	ldr	r1, [r7, #12]
 8008d4c:	f107 0310 	add.w	r3, r7, #16
 8008d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff fd6e 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008d58:	f107 0310 	add.w	r3, r7, #16
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f7fd fe3d 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8008d64:	f107 0310 	add.w	r3, r7, #16
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fe f984 	bl	8007076 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	332c      	adds	r3, #44	; 0x2c
 8008d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fe f9fb 	bl	8007170 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	332c      	adds	r3, #44	; 0x2c
 8008d7e:	490b      	ldr	r1, [pc, #44]	; (8008dac <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fe fa07 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	332c      	adds	r3, #44	; 0x2c
 8008d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fe f9ef 	bl	8007170 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	332c      	adds	r3, #44	; 0x2c
 8008d96:	4906      	ldr	r1, [pc, #24]	; (8008db0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fe f9fb 	bl	8007194 <_ZN12SimpleStringpLEPKc>
}
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4618      	mov	r0, r3
 8008da2:	371c      	adds	r7, #28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd90      	pop	{r4, r7, pc}
 8008da8:	080170d0 	.word	0x080170d0
 8008dac:	080153ac 	.word	0x080153ac
 8008db0:	080153b0 	.word	0x080153b0

08008db4 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	68b9      	ldr	r1, [r7, #8]
 8008dca:	f7ff fb2b 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008dce:	4a07      	ldr	r2, [pc, #28]	; (8008dec <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	332c      	adds	r3, #44	; 0x2c
 8008dd8:	69b9      	ldr	r1, [r7, #24]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fd fdff 	bl	80069de <_ZN12SimpleStringaSERKS_>
}
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	08016ee0 	.word	0x08016ee0

08008df0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 8008df0:	b590      	push	{r4, r7, lr}
 8008df2:	b09d      	sub	sp, #116	; 0x74
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	68b9      	ldr	r1, [r7, #8]
 8008e06:	f7ff fb0d 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008e0a:	4a5d      	ldr	r2, [pc, #372]	; (8008f80 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008e16:	68f9      	ldr	r1, [r7, #12]
 8008e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff fd07 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f7fd fdd6 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8008e32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe f91d 	bl	8007076 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8008e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e40:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fbd1 	bl	80075ec <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 8008e4a:	f107 0320 	add.w	r3, r7, #32
 8008e4e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe fbca 	bl	80075ec <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8008e58:	f107 0120 	add.w	r1, r7, #32
 8008e5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e60:	2220      	movs	r2, #32
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe f9c4 	bl	80071f0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8008e68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e6c:	4945      	ldr	r1, [pc, #276]	; (8008f84 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fd fd49 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8008e74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e78:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008e7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe f95a 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8008e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008e8a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe fc66 	bl	8007760 <_Z30BracketsFormattedHexStringFroml>
 8008e94:	f107 0318 	add.w	r3, r7, #24
 8008e98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008e9c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe f94a 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8008ea6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe f8e3 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8008eb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe f8de 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8008eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe f8d9 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8008ec4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ec8:	492e      	ldr	r1, [pc, #184]	; (8008f84 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fd fd1b 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8008ed0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ed4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008ed8:	f107 0120 	add.w	r1, r7, #32
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe f92c 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8008ee2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008ee6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fc38 	bl	8007760 <_Z30BracketsFormattedHexStringFroml>
 8008ef0:	f107 0310 	add.w	r3, r7, #16
 8008ef4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008ef8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fe f91c 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8008f02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe f8b5 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8008f0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fe f8b0 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8008f16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe f8ab 	bl	8007076 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008f26:	68f9      	ldr	r1, [r7, #12]
 8008f28:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8008f2c:	f107 0318 	add.w	r3, r7, #24
 8008f30:	f107 0210 	add.w	r2, r7, #16
 8008f34:	f7ff fbb8 	bl	80086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008f38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f7fe f916 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8008f44:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe f894 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8008f4e:	f107 0310 	add.w	r3, r7, #16
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe f88f 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8008f58:	f107 0318 	add.w	r3, r7, #24
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe f88a 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8008f62:	f107 0320 	add.w	r3, r7, #32
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe f885 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8008f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe f880 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3774      	adds	r7, #116	; 0x74
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd90      	pop	{r4, r7, pc}
 8008f80:	080170a4 	.word	0x080170a4
 8008f84:	08015310 	.word	0x08015310

08008f88 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8008f88:	b590      	push	{r4, r7, lr}
 8008f8a:	b09d      	sub	sp, #116	; 0x74
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	f7ff fa41 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008fa2:	4a5d      	ldr	r2, [pc, #372]	; (8009118 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008fae:	68f9      	ldr	r1, [r7, #12]
 8008fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fb4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff fc3b 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008fbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f7fd fd0a 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8008fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fe f851 	bl	8007076 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8008fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fd8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fd11 	bl	8007a04 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 8008fe2:	f107 0320 	add.w	r3, r7, #32
 8008fe6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe fd0a 	bl	8007a04 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8008ff0:	f107 0120 	add.w	r1, r7, #32
 8008ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe f8f8 	bl	80071f0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009000:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009004:	4945      	ldr	r1, [pc, #276]	; (800911c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8009006:	4618      	mov	r0, r3
 8009008:	f7fd fc7d 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800900c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009010:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009014:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe f88e 	bl	800713a <_ZNK12SimpleStringplERKS_>
 800901e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009022:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fbb6 	bl	8007798 <_Z30BracketsFormattedHexStringFromm>
 800902c:	f107 0318 	add.w	r3, r7, #24
 8009030:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009034:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009038:	4618      	mov	r0, r3
 800903a:	f7fe f87e 	bl	800713a <_ZNK12SimpleStringplERKS_>
 800903e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe f817 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8009048:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe f812 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8009052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe f80d 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800905c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009060:	492e      	ldr	r1, [pc, #184]	; (800911c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8009062:	4618      	mov	r0, r3
 8009064:	f7fd fc4f 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8009068:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800906c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009070:	f107 0120 	add.w	r1, r7, #32
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe f860 	bl	800713a <_ZNK12SimpleStringplERKS_>
 800907a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800907e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fb88 	bl	8007798 <_Z30BracketsFormattedHexStringFromm>
 8009088:	f107 0310 	add.w	r3, r7, #16
 800908c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009090:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe f850 	bl	800713a <_ZNK12SimpleStringplERKS_>
 800909a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fd ffe9 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80090a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fd ffe4 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80090ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fd ffdf 	bl	8007076 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80090be:	68f9      	ldr	r1, [r7, #12]
 80090c0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80090c4:	f107 0318 	add.w	r3, r7, #24
 80090c8:	f107 0210 	add.w	r2, r7, #16
 80090cc:	f7ff faec 	bl	80086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80090d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80090d4:	4619      	mov	r1, r3
 80090d6:	4620      	mov	r0, r4
 80090d8:	f7fe f84a 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 80090dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fd ffc8 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80090e6:	f107 0310 	add.w	r3, r7, #16
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fd ffc3 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80090f0:	f107 0318 	add.w	r3, r7, #24
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fd ffbe 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 80090fa:	f107 0320 	add.w	r3, r7, #32
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fd ffb9 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8009104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009108:	4618      	mov	r0, r3
 800910a:	f7fd ffb4 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4618      	mov	r0, r3
 8009112:	3774      	adds	r7, #116	; 0x74
 8009114:	46bd      	mov	sp, r7
 8009116:	bd90      	pop	{r4, r7, pc}
 8009118:	08017078 	.word	0x08017078
 800911c:	08015310 	.word	0x08015310

08009120 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 8009120:	b590      	push	{r4, r7, lr}
 8009122:	b09d      	sub	sp, #116	; 0x74
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
 800912c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	68b9      	ldr	r1, [r7, #8]
 8009136:	f7ff f975 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800913a:	4a5f      	ldr	r2, [pc, #380]	; (80092b8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009146:	68f9      	ldr	r1, [r7, #12]
 8009148:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800914c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009150:	4618      	mov	r0, r3
 8009152:	f7ff fb6f 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800915a:	4619      	mov	r1, r3
 800915c:	4620      	mov	r0, r4
 800915e:	f7fd fc3e 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8009162:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009166:	4618      	mov	r0, r3
 8009168:	f7fd ff85 	bl	8007076 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800916c:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8009170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe fa26 	bl	80075c8 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800917c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8009180:	f107 0320 	add.w	r3, r7, #32
 8009184:	4611      	mov	r1, r2
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe fa1e 	bl	80075c8 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800918c:	f107 0120 	add.w	r1, r7, #32
 8009190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009194:	2220      	movs	r2, #32
 8009196:	4618      	mov	r0, r3
 8009198:	f7fe f82a 	bl	80071f0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800919c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80091a0:	4946      	ldr	r1, [pc, #280]	; (80092bc <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fd fbaf 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 80091a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80091ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80091b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fd ffc0 	bl	800713a <_ZNK12SimpleStringplERKS_>
 80091ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80091be:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 80091c2:	4611      	mov	r1, r2
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fe fb03 	bl	80077d0 <_Z30BracketsFormattedHexStringFroma>
 80091ca:	f107 0318 	add.w	r3, r7, #24
 80091ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80091d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fd ffaf 	bl	800713a <_ZNK12SimpleStringplERKS_>
 80091dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fd ff48 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80091e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fd ff43 	bl	8007076 <_ZN12SimpleStringD1Ev>
 80091f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fd ff3e 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80091fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80091fe:	492f      	ldr	r1, [pc, #188]	; (80092bc <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8009200:	4618      	mov	r0, r3
 8009202:	f7fd fb80 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8009206:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800920a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800920e:	f107 0120 	add.w	r1, r7, #32
 8009212:	4618      	mov	r0, r3
 8009214:	f7fd ff91 	bl	800713a <_ZNK12SimpleStringplERKS_>
 8009218:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800921c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fad4 	bl	80077d0 <_Z30BracketsFormattedHexStringFroma>
 8009228:	f107 0310 	add.w	r3, r7, #16
 800922c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009230:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009234:	4618      	mov	r0, r3
 8009236:	f7fd ff80 	bl	800713a <_ZNK12SimpleStringplERKS_>
 800923a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800923e:	4618      	mov	r0, r3
 8009240:	f7fd ff19 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8009244:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009248:	4618      	mov	r0, r3
 800924a:	f7fd ff14 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800924e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009252:	4618      	mov	r0, r3
 8009254:	f7fd ff0f 	bl	8007076 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8009264:	f107 0318 	add.w	r3, r7, #24
 8009268:	f107 0210 	add.w	r2, r7, #16
 800926c:	f7ff fa1c 	bl	80086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009270:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009274:	4619      	mov	r1, r3
 8009276:	4620      	mov	r0, r4
 8009278:	f7fd ff7a 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800927c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009280:	4618      	mov	r0, r3
 8009282:	f7fd fef8 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009286:	f107 0310 	add.w	r3, r7, #16
 800928a:	4618      	mov	r0, r3
 800928c:	f7fd fef3 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009290:	f107 0318 	add.w	r3, r7, #24
 8009294:	4618      	mov	r0, r3
 8009296:	f7fd feee 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800929a:	f107 0320 	add.w	r3, r7, #32
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fd fee9 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 80092a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fd fee4 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4618      	mov	r0, r3
 80092b2:	3774      	adds	r7, #116	; 0x74
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd90      	pop	{r4, r7, pc}
 80092b8:	0801704c 	.word	0x0801704c
 80092bc:	08015310 	.word	0x08015310

080092c0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 80092c0:	b590      	push	{r4, r7, lr}
 80092c2:	b093      	sub	sp, #76	; 0x4c
 80092c4:	af02      	add	r7, sp, #8
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	68b9      	ldr	r1, [r7, #8]
 80092d6:	f7ff f8a5 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80092da:	4a4a      	ldr	r2, [pc, #296]	; (8009404 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	f107 0320 	add.w	r3, r7, #32
 80092ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7ff faa0 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80092f4:	f107 0320 	add.w	r3, r7, #32
 80092f8:	4619      	mov	r1, r3
 80092fa:	4620      	mov	r0, r4
 80092fc:	f7fd fb6f 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8009300:	f107 0320 	add.w	r3, r7, #32
 8009304:	4618      	mov	r0, r3
 8009306:	f7fd feb6 	bl	8007076 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800930a:	f107 0318 	add.w	r3, r7, #24
 800930e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009310:	4618      	mov	r0, r3
 8009312:	f7fe f92d 	bl	8007570 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8009316:	f107 0310 	add.w	r3, r7, #16
 800931a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe f927 	bl	8007570 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009328:	68f9      	ldr	r1, [r7, #12]
 800932a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800932e:	f107 0310 	add.w	r3, r7, #16
 8009332:	f107 0218 	add.w	r2, r7, #24
 8009336:	f7ff f9b7 	bl	80086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800933a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800933e:	4619      	mov	r1, r3
 8009340:	4620      	mov	r0, r4
 8009342:	f7fd ff15 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8009346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800934a:	4618      	mov	r0, r3
 800934c:	f7fd fe93 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8009350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009352:	2b00      	cmp	r3, #0
 8009354:	d046      	beq.n	80093e4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 8009356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009358:	2b00      	cmp	r3, #0
 800935a:	d043      	beq.n	80093e4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800935c:	2300      	movs	r3, #0
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009360:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009364:	4413      	add	r3, r2
 8009366:	781a      	ldrb	r2, [r3, #0]
 8009368:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800936a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936c:	440b      	add	r3, r1
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	429a      	cmp	r2, r3
 8009372:	d103      	bne.n	800937c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 8009374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009376:	3301      	adds	r3, #1
 8009378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800937a:	e7f1      	b.n	8009360 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800937c:	2300      	movs	r3, #0
 800937e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009380:	f107 0310 	add.w	r3, r7, #16
 8009384:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009386:	4618      	mov	r0, r3
 8009388:	f7fd ffd9 	bl	800733e <_ZNK12SimpleString2atEj>
 800938c:	4603      	mov	r3, r0
 800938e:	461c      	mov	r4, r3
 8009390:	f107 0318 	add.w	r3, r7, #24
 8009394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009396:	4618      	mov	r0, r3
 8009398:	f7fd ffd1 	bl	800733e <_ZNK12SimpleString2atEj>
 800939c:	4603      	mov	r3, r0
 800939e:	429c      	cmp	r4, r3
 80093a0:	bf0c      	ite	eq
 80093a2:	2301      	moveq	r3, #1
 80093a4:	2300      	movne	r3, #0
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	3301      	adds	r3, #1
 80093b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80093b2:	e7e5      	b.n	8009380 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80093ba:	68f9      	ldr	r1, [r7, #12]
 80093bc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80093c0:	f107 0210 	add.w	r2, r7, #16
 80093c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	f7ff f987 	bl	80086dc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 80093ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093d2:	4619      	mov	r1, r3
 80093d4:	4620      	mov	r0, r4
 80093d6:	f7fd fecb 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 80093da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fd fe49 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 80093e4:	f107 0310 	add.w	r3, r7, #16
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fd fe44 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 80093ee:	f107 0318 	add.w	r3, r7, #24
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fd fe3f 	bl	8007076 <_ZN12SimpleStringD1Ev>
    }
}
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4618      	mov	r0, r3
 80093fc:	3744      	adds	r7, #68	; 0x44
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd90      	pop	{r4, r7, pc}
 8009402:	bf00      	nop
 8009404:	08017020 	.word	0x08017020

08009408 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8009408:	b590      	push	{r4, r7, lr}
 800940a:	b093      	sub	sp, #76	; 0x4c
 800940c:	af02      	add	r7, sp, #8
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	68b9      	ldr	r1, [r7, #8]
 800941e:	f7ff f801 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009422:	4a55      	ldr	r2, [pc, #340]	; (8009578 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800942e:	68f9      	ldr	r1, [r7, #12]
 8009430:	f107 0320 	add.w	r3, r7, #32
 8009434:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff f9fc 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800943c:	f107 0320 	add.w	r3, r7, #32
 8009440:	4619      	mov	r1, r3
 8009442:	4620      	mov	r0, r4
 8009444:	f7fd facb 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8009448:	f107 0320 	add.w	r3, r7, #32
 800944c:	4618      	mov	r0, r3
 800944e:	f7fd fe12 	bl	8007076 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8009452:	f107 0318 	add.w	r3, r7, #24
 8009456:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009458:	4618      	mov	r0, r3
 800945a:	f7fe f889 	bl	8007570 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800945e:	f107 0310 	add.w	r3, r7, #16
 8009462:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009464:	4618      	mov	r0, r3
 8009466:	f7fe f883 	bl	8007570 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009470:	68f9      	ldr	r1, [r7, #12]
 8009472:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009476:	f107 0310 	add.w	r3, r7, #16
 800947a:	f107 0218 	add.w	r2, r7, #24
 800947e:	f7ff f913 	bl	80086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009486:	4619      	mov	r1, r3
 8009488:	4620      	mov	r0, r4
 800948a:	f7fd fe71 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800948e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009492:	4618      	mov	r0, r3
 8009494:	f7fd fdef 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8009498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800949a:	2b00      	cmp	r3, #0
 800949c:	d05c      	beq.n	8009558 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800949e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d059      	beq.n	8009558 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 80094a4:	2300      	movs	r3, #0
 80094a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ac:	4413      	add	r3, r2
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fd f932 	bl	800671a <_ZN12SimpleString7ToLowerEc>
 80094b6:	4603      	mov	r3, r0
 80094b8:	461c      	mov	r4, r3
 80094ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094be:	4413      	add	r3, r2
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7fd f929 	bl	800671a <_ZN12SimpleString7ToLowerEc>
 80094c8:	4603      	mov	r3, r0
 80094ca:	429c      	cmp	r4, r3
 80094cc:	bf0c      	ite	eq
 80094ce:	2301      	moveq	r3, #1
 80094d0:	2300      	movne	r3, #0
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 80094d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094da:	3301      	adds	r3, #1
 80094dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094de:	e7e3      	b.n	80094a8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 80094e4:	f107 0310 	add.w	r3, r7, #16
 80094e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd ff27 	bl	800733e <_ZNK12SimpleString2atEj>
 80094f0:	4603      	mov	r3, r0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fd f911 	bl	800671a <_ZN12SimpleString7ToLowerEc>
 80094f8:	4603      	mov	r3, r0
 80094fa:	461c      	mov	r4, r3
 80094fc:	f107 0318 	add.w	r3, r7, #24
 8009500:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009502:	4618      	mov	r0, r3
 8009504:	f7fd ff1b 	bl	800733e <_ZNK12SimpleString2atEj>
 8009508:	4603      	mov	r3, r0
 800950a:	4618      	mov	r0, r3
 800950c:	f7fd f905 	bl	800671a <_ZN12SimpleString7ToLowerEc>
 8009510:	4603      	mov	r3, r0
 8009512:	429c      	cmp	r4, r3
 8009514:	bf0c      	ite	eq
 8009516:	2301      	moveq	r3, #1
 8009518:	2300      	movne	r3, #0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	3301      	adds	r3, #1
 8009524:	63bb      	str	r3, [r7, #56]	; 0x38
 8009526:	e7dd      	b.n	80094e4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800952e:	68f9      	ldr	r1, [r7, #12]
 8009530:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009534:	f107 0210 	add.w	r2, r7, #16
 8009538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	f7ff f8cd 	bl	80086dc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8009542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009546:	4619      	mov	r1, r3
 8009548:	4620      	mov	r0, r4
 800954a:	f7fd fe11 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800954e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009552:	4618      	mov	r0, r3
 8009554:	f7fd fd8f 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8009558:	f107 0310 	add.w	r3, r7, #16
 800955c:	4618      	mov	r0, r3
 800955e:	f7fd fd8a 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8009562:	f107 0318 	add.w	r3, r7, #24
 8009566:	4618      	mov	r0, r3
 8009568:	f7fd fd85 	bl	8007076 <_ZN12SimpleStringD1Ev>
    }
}
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4618      	mov	r0, r3
 8009570:	3744      	adds	r7, #68	; 0x44
 8009572:	46bd      	mov	sp, r7
 8009574:	bd90      	pop	{r4, r7, pc}
 8009576:	bf00      	nop
 8009578:	08016ff4 	.word	0x08016ff4

0800957c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800957c:	b5b0      	push	{r4, r5, r7, lr}
 800957e:	b092      	sub	sp, #72	; 0x48
 8009580:	af02      	add	r7, sp, #8
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	68b9      	ldr	r1, [r7, #8]
 8009592:	f7fe ff47 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009596:	4a40      	ldr	r2, [pc, #256]	; (8009698 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80095a2:	68f9      	ldr	r1, [r7, #12]
 80095a4:	f107 031c 	add.w	r3, r7, #28
 80095a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff f942 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80095b0:	f107 031c 	add.w	r3, r7, #28
 80095b4:	4619      	mov	r1, r3
 80095b6:	4620      	mov	r0, r4
 80095b8:	f7fd fa11 	bl	80069de <_ZN12SimpleStringaSERKS_>
 80095bc:	f107 031c 	add.w	r3, r7, #28
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fd fd58 	bl	8007076 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 80095c6:	f107 0314 	add.w	r3, r7, #20
 80095ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe fae0 	bl	8007b94 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80095da:	68fd      	ldr	r5, [r7, #12]
 80095dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe fad5 	bl	8007b94 <_Z22StringFromBinaryOrNullPKhj>
 80095ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095ee:	f107 0314 	add.w	r3, r7, #20
 80095f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7ff f856 	bl	80086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80095fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009600:	4619      	mov	r1, r3
 8009602:	4620      	mov	r0, r4
 8009604:	f7fd fdb4 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8009608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800960c:	4618      	mov	r0, r3
 800960e:	f7fd fd32 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8009612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009616:	4618      	mov	r0, r3
 8009618:	f7fd fd2d 	bl	8007076 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800961c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961e:	2b00      	cmp	r3, #0
 8009620:	d02f      	beq.n	8009682 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 8009622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009624:	2b00      	cmp	r3, #0
 8009626:	d02c      	beq.n	8009682 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8009628:	2300      	movs	r3, #0
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800962c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009630:	4413      	add	r3, r2
 8009632:	781a      	ldrb	r2, [r3, #0]
 8009634:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009638:	440b      	add	r3, r1
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d103      	bne.n	8009648 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 8009640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009642:	3301      	adds	r3, #1
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009646:	e7f1      	b.n	800962c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009652:	4613      	mov	r3, r2
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	4413      	add	r3, r2
 8009658:	1c5d      	adds	r5, r3, #1
 800965a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800965e:	f107 0214 	add.w	r2, r7, #20
 8009662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	462b      	mov	r3, r5
 8009668:	f7ff f838 	bl	80086dc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800966c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009670:	4619      	mov	r1, r3
 8009672:	4620      	mov	r0, r4
 8009674:	f7fd fd7c 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8009678:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800967c:	4618      	mov	r0, r3
 800967e:	f7fd fcfa 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8009682:	f107 0314 	add.w	r3, r7, #20
 8009686:	4618      	mov	r0, r3
 8009688:	f7fd fcf5 	bl	8007076 <_ZN12SimpleStringD1Ev>
	}
}
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4618      	mov	r0, r3
 8009690:	3740      	adds	r7, #64	; 0x40
 8009692:	46bd      	mov	sp, r7
 8009694:	bdb0      	pop	{r4, r5, r7, pc}
 8009696:	bf00      	nop
 8009698:	08016fc8 	.word	0x08016fc8

0800969c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800969c:	b5b0      	push	{r4, r5, r7, lr}
 800969e:	b08c      	sub	sp, #48	; 0x30
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	f7fe feb7 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80096b6:	4a26      	ldr	r2, [pc, #152]	; (8009750 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80096c2:	68f9      	ldr	r1, [r7, #12]
 80096c4:	f107 0310 	add.w	r3, r7, #16
 80096c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff f8b2 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80096d0:	f107 0310 	add.w	r3, r7, #16
 80096d4:	4619      	mov	r1, r3
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7fd f981 	bl	80069de <_ZN12SimpleStringaSERKS_>
 80096dc:	f107 0310 	add.w	r3, r7, #16
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd fcc8 	bl	8007076 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80096ec:	68fd      	ldr	r5, [r7, #12]
 80096ee:	f107 0020 	add.w	r0, r7, #32
 80096f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096f8:	f7fe fa68 	bl	8007bcc <_Z20StringFromMaskedBitsmmj>
 80096fc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009704:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009706:	f7fe fa61 	bl	8007bcc <_Z20StringFromMaskedBitsmmj>
 800970a:	f107 0018 	add.w	r0, r7, #24
 800970e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009712:	f107 0220 	add.w	r2, r7, #32
 8009716:	4629      	mov	r1, r5
 8009718:	f7fe ffc6 	bl	80086a8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800971c:	f107 0318 	add.w	r3, r7, #24
 8009720:	4619      	mov	r1, r3
 8009722:	4620      	mov	r0, r4
 8009724:	f7fd fd24 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 8009728:	f107 0318 	add.w	r3, r7, #24
 800972c:	4618      	mov	r0, r3
 800972e:	f7fd fca2 	bl	8007076 <_ZN12SimpleStringD1Ev>
 8009732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009736:	4618      	mov	r0, r3
 8009738:	f7fd fc9d 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800973c:	f107 0320 	add.w	r3, r7, #32
 8009740:	4618      	mov	r0, r3
 8009742:	f7fd fc98 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4618      	mov	r0, r3
 800974a:	3730      	adds	r7, #48	; 0x30
 800974c:	46bd      	mov	sp, r7
 800974e:	bdb0      	pop	{r4, r5, r7, pc}
 8009750:	08016f9c 	.word	0x08016f9c

08009754 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 8009754:	b590      	push	{r4, r7, lr}
 8009756:	b089      	sub	sp, #36	; 0x24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	68b9      	ldr	r1, [r7, #8]
 800976a:	f7fe fe5b 	bl	8008424 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800976e:	4a1a      	ldr	r2, [pc, #104]	; (80097d8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800977a:	68f9      	ldr	r1, [r7, #12]
 800977c:	f107 0310 	add.w	r3, r7, #16
 8009780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009782:	4618      	mov	r0, r3
 8009784:	f7ff f856 	bl	8008834 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009788:	f107 0310 	add.w	r3, r7, #16
 800978c:	4619      	mov	r1, r3
 800978e:	4620      	mov	r0, r4
 8009790:	f7fd f925 	bl	80069de <_ZN12SimpleStringaSERKS_>
 8009794:	f107 0310 	add.w	r3, r7, #16
 8009798:	4618      	mov	r0, r3
 800979a:	f7fd fc6c 	bl	8007076 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80097a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097a6:	f7fd fc39 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 80097aa:	4602      	mov	r2, r0
 80097ac:	f107 0318 	add.w	r3, r7, #24
 80097b0:	490a      	ldr	r1, [pc, #40]	; (80097dc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe f8ec 	bl	8007990 <_Z16StringFromFormatPKcz>
 80097b8:	f107 0318 	add.w	r3, r7, #24
 80097bc:	4619      	mov	r1, r3
 80097be:	4620      	mov	r0, r4
 80097c0:	f7fd fcd6 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 80097c4:	f107 0318 	add.w	r3, r7, #24
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fd fc54 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	4618      	mov	r0, r3
 80097d2:	3724      	adds	r7, #36	; 0x24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd90      	pop	{r4, r7, pc}
 80097d8:	08016f70 	.word	0x08016f70
 80097dc:	080153e0 	.word	0x080153e0

080097e0 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	4a05      	ldr	r2, [pc, #20]	; (8009800 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fe99 	bl	8008528 <_ZN11TestFailureD1Ev>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4618      	mov	r0, r3
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	08016f70 	.word	0x08016f70

08009804 <_ZN25FeatureUnsupportedFailureD0Ev>:
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ffe7 	bl	80097e0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8009812:	2134      	movs	r1, #52	; 0x34
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7fc f9a1 	bl	8005b5c <_ZdlPvj>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	4a05      	ldr	r2, [pc, #20]	; (8009844 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fe77 	bl	8008528 <_ZN11TestFailureD1Ev>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	08016f9c 	.word	0x08016f9c

08009848 <_ZN16BitsEqualFailureD0Ev>:
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff ffe7 	bl	8009824 <_ZN16BitsEqualFailureD1Ev>
 8009856:	2134      	movs	r1, #52	; 0x34
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7fc f97f 	bl	8005b5c <_ZdlPvj>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	4a05      	ldr	r2, [pc, #20]	; (8009888 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fe55 	bl	8008528 <_ZN11TestFailureD1Ev>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	08016fc8 	.word	0x08016fc8

0800988c <_ZN18BinaryEqualFailureD0Ev>:
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff ffe7 	bl	8009868 <_ZN18BinaryEqualFailureD1Ev>
 800989a:	2134      	movs	r1, #52	; 0x34
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7fc f95d 	bl	8005b5c <_ZdlPvj>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	4a05      	ldr	r2, [pc, #20]	; (80098cc <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fe fe33 	bl	8008528 <_ZN11TestFailureD1Ev>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	08016ff4 	.word	0x08016ff4

080098d0 <_ZN24StringEqualNoCaseFailureD0Ev>:
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff ffe7 	bl	80098ac <_ZN24StringEqualNoCaseFailureD1Ev>
 80098de:	2134      	movs	r1, #52	; 0x34
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7fc f93b 	bl	8005b5c <_ZdlPvj>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4618      	mov	r0, r3
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	4a05      	ldr	r2, [pc, #20]	; (8009910 <_ZN18StringEqualFailureD1Ev+0x20>)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe fe11 	bl	8008528 <_ZN11TestFailureD1Ev>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	08017020 	.word	0x08017020

08009914 <_ZN18StringEqualFailureD0Ev>:
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7ff ffe7 	bl	80098f0 <_ZN18StringEqualFailureD1Ev>
 8009922:	2134      	movs	r1, #52	; 0x34
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7fc f919 	bl	8005b5c <_ZdlPvj>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	4a05      	ldr	r2, [pc, #20]	; (8009954 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fdef 	bl	8008528 <_ZN11TestFailureD1Ev>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4618      	mov	r0, r3
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	0801704c 	.word	0x0801704c

08009958 <_ZN23SignedBytesEqualFailureD0Ev>:
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff ffe7 	bl	8009934 <_ZN23SignedBytesEqualFailureD1Ev>
 8009966:	2134      	movs	r1, #52	; 0x34
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7fc f8f7 	bl	8005b5c <_ZdlPvj>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	4a05      	ldr	r2, [pc, #20]	; (8009998 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4618      	mov	r0, r3
 800998a:	f7fe fdcd 	bl	8008528 <_ZN11TestFailureD1Ev>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	08017078 	.word	0x08017078

0800999c <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff ffe7 	bl	8009978 <_ZN25UnsignedLongsEqualFailureD1Ev>
 80099aa:	2134      	movs	r1, #52	; 0x34
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7fc f8d5 	bl	8005b5c <_ZdlPvj>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4618      	mov	r0, r3
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	4a05      	ldr	r2, [pc, #20]	; (80099dc <_ZN17LongsEqualFailureD1Ev+0x20>)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fe fdab 	bl	8008528 <_ZN11TestFailureD1Ev>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	080170a4 	.word	0x080170a4

080099e0 <_ZN17LongsEqualFailureD0Ev>:
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7ff ffe7 	bl	80099bc <_ZN17LongsEqualFailureD1Ev>
 80099ee:	2134      	movs	r1, #52	; 0x34
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7fc f8b3 	bl	8005b5c <_ZdlPvj>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	4a05      	ldr	r2, [pc, #20]	; (8009a20 <_ZN12CheckFailureD1Ev+0x20>)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fe fd89 	bl	8008528 <_ZN11TestFailureD1Ev>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	080170d0 	.word	0x080170d0

08009a24 <_ZN12CheckFailureD0Ev>:
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff ffe7 	bl	8009a00 <_ZN12CheckFailureD1Ev>
 8009a32:	2134      	movs	r1, #52	; 0x34
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7fc f891 	bl	8005b5c <_ZdlPvj>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	4a05      	ldr	r2, [pc, #20]	; (8009a64 <_ZN15ContainsFailureD1Ev+0x20>)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe fd67 	bl	8008528 <_ZN11TestFailureD1Ev>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	080170fc 	.word	0x080170fc

08009a68 <_ZN15ContainsFailureD0Ev>:
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff ffe7 	bl	8009a44 <_ZN15ContainsFailureD1Ev>
 8009a76:	2134      	movs	r1, #52	; 0x34
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7fc f86f 	bl	8005b5c <_ZdlPvj>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	4a05      	ldr	r2, [pc, #20]	; (8009aa8 <_ZN17ComparisonFailureD1Ev+0x20>)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	601a      	str	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fd45 	bl	8008528 <_ZN11TestFailureD1Ev>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	08017128 	.word	0x08017128

08009aac <_ZN17ComparisonFailureD0Ev>:
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff ffe7 	bl	8009a88 <_ZN17ComparisonFailureD1Ev>
 8009aba:	2134      	movs	r1, #52	; 0x34
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7fc f84d 	bl	8005b5c <_ZdlPvj>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	4a05      	ldr	r2, [pc, #20]	; (8009aec <_ZN17CheckEqualFailureD1Ev+0x20>)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fe fd23 	bl	8008528 <_ZN11TestFailureD1Ev>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	08017154 	.word	0x08017154

08009af0 <_ZN17CheckEqualFailureD0Ev>:
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7ff ffe7 	bl	8009acc <_ZN17CheckEqualFailureD1Ev>
 8009afe:	2134      	movs	r1, #52	; 0x34
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7fc f82b 	bl	8005b5c <_ZdlPvj>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	4a05      	ldr	r2, [pc, #20]	; (8009b30 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fe fd01 	bl	8008528 <_ZN11TestFailureD1Ev>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	08017180 	.word	0x08017180

08009b34 <_ZN19DoublesEqualFailureD0Ev>:
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff ffe7 	bl	8009b10 <_ZN19DoublesEqualFailureD1Ev>
 8009b42:	2134      	movs	r1, #52	; 0x34
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7fc f809 	bl	8005b5c <_ZdlPvj>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	4a05      	ldr	r2, [pc, #20]	; (8009b74 <_ZN13EqualsFailureD1Ev+0x20>)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fe fcdf 	bl	8008528 <_ZN11TestFailureD1Ev>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	080171ac 	.word	0x080171ac

08009b78 <_ZN13EqualsFailureD0Ev>:
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff ffe7 	bl	8009b54 <_ZN13EqualsFailureD1Ev>
 8009b86:	2134      	movs	r1, #52	; 0x34
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7fb ffe7 	bl	8005b5c <_ZdlPvj>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 8009b98:	b5b0      	push	{r4, r5, r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af02      	add	r7, sp, #8
 8009b9e:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 8009ba0:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <_ZL13checkedMallocj+0x40>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	4798      	blx	r3
 8009ba8:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10e      	bne.n	8009bce <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 8009bb0:	f004 f96c 	bl	800de8c <_ZN10UtestShell10getCurrentEv>
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	3368      	adds	r3, #104	; 0x68
 8009bba:	681d      	ldr	r5, [r3, #0]
 8009bbc:	f004 f976 	bl	800deac <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	2325      	movs	r3, #37	; 0x25
 8009bc6:	4a05      	ldr	r2, [pc, #20]	; (8009bdc <_ZL13checkedMallocj+0x44>)
 8009bc8:	4905      	ldr	r1, [pc, #20]	; (8009be0 <_ZL13checkedMallocj+0x48>)
 8009bca:	4620      	mov	r0, r4
 8009bcc:	47a8      	blx	r5
    return mem;
 8009bce:	68fb      	ldr	r3, [r7, #12]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8009bd8:	200000c4 	.word	0x200000c4
 8009bdc:	08015454 	.word	0x08015454
 8009be0:	08015474 	.word	0x08015474

08009be4 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 8009be8:	4b04      	ldr	r3, [pc, #16]	; (8009bfc <_Z22getCurrentNewAllocatorv+0x18>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <_Z22getCurrentNewAllocatorv+0x10>
 8009bf0:	f000 f806 	bl	8009c00 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 8009bf4:	4b01      	ldr	r3, [pc, #4]	; (8009bfc <_Z22getCurrentNewAllocatorv+0x18>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	200004cc 	.word	0x200004cc

08009c00 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 8009c04:	f000 f810 	bl	8009c28 <_Z19defaultNewAllocatorv>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	4a02      	ldr	r2, [pc, #8]	; (8009c14 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 8009c0c:	6013      	str	r3, [r2, #0]
}
 8009c0e:	bf00      	nop
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	200004cc 	.word	0x200004cc

08009c18 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	4801      	ldr	r0, [pc, #4]	; (8009c24 <__tcf_0+0xc>)
 8009c1e:	f000 f909 	bl	8009e34 <_ZN19TestMemoryAllocatorD1Ev>
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	200004d8 	.word	0x200004d8

08009c28 <_Z19defaultNewAllocatorv>:
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8009c2c:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <_Z19defaultNewAllocatorv+0x54>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	f3bf 8f5b 	dmb	ish
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bf0c      	ite	eq
 8009c3e:	2301      	moveq	r3, #1
 8009c40:	2300      	movne	r3, #0
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d016      	beq.n	8009c76 <_Z19defaultNewAllocatorv+0x4e>
 8009c48:	480c      	ldr	r0, [pc, #48]	; (8009c7c <_Z19defaultNewAllocatorv+0x54>)
 8009c4a:	f007 faf3 	bl	8011234 <__cxa_guard_acquire>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	bf14      	ite	ne
 8009c54:	2301      	movne	r3, #1
 8009c56:	2300      	moveq	r3, #0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00b      	beq.n	8009c76 <_Z19defaultNewAllocatorv+0x4e>
 8009c5e:	4b08      	ldr	r3, [pc, #32]	; (8009c80 <_Z19defaultNewAllocatorv+0x58>)
 8009c60:	4a08      	ldr	r2, [pc, #32]	; (8009c84 <_Z19defaultNewAllocatorv+0x5c>)
 8009c62:	4909      	ldr	r1, [pc, #36]	; (8009c88 <_Z19defaultNewAllocatorv+0x60>)
 8009c64:	4809      	ldr	r0, [pc, #36]	; (8009c8c <_Z19defaultNewAllocatorv+0x64>)
 8009c66:	f000 f8c5 	bl	8009df4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8009c6a:	4804      	ldr	r0, [pc, #16]	; (8009c7c <_Z19defaultNewAllocatorv+0x54>)
 8009c6c:	f007 faee 	bl	801124c <__cxa_guard_release>
 8009c70:	4807      	ldr	r0, [pc, #28]	; (8009c90 <_Z19defaultNewAllocatorv+0x68>)
 8009c72:	f007 fb12 	bl	801129a <atexit>
    return &allocator;
 8009c76:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <_Z19defaultNewAllocatorv+0x64>)
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	200004ec 	.word	0x200004ec
 8009c80:	08015494 	.word	0x08015494
 8009c84:	0801549c 	.word	0x0801549c
 8009c88:	080154a0 	.word	0x080154a0
 8009c8c:	200004d8 	.word	0x200004d8
 8009c90:	08009c19 	.word	0x08009c19

08009c94 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 8009c98:	4b04      	ldr	r3, [pc, #16]	; (8009cac <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <_Z27getCurrentNewArrayAllocatorv+0x10>
 8009ca0:	f000 f806 	bl	8009cb0 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8009ca4:	4b01      	ldr	r3, [pc, #4]	; (8009cac <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	200004d0 	.word	0x200004d0

08009cb0 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8009cb4:	f000 f810 	bl	8009cd8 <_Z24defaultNewArrayAllocatorv>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	4a02      	ldr	r2, [pc, #8]	; (8009cc4 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 8009cbc:	6013      	str	r3, [r2, #0]
}
 8009cbe:	bf00      	nop
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	200004d0 	.word	0x200004d0

08009cc8 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	4801      	ldr	r0, [pc, #4]	; (8009cd4 <__tcf_1+0xc>)
 8009cce:	f000 f8b1 	bl	8009e34 <_ZN19TestMemoryAllocatorD1Ev>
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	200004f0 	.word	0x200004f0

08009cd8 <_Z24defaultNewArrayAllocatorv>:
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8009cdc:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <_Z24defaultNewArrayAllocatorv+0x54>)
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	f3bf 8f5b 	dmb	ish
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bf0c      	ite	eq
 8009cee:	2301      	moveq	r3, #1
 8009cf0:	2300      	movne	r3, #0
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d016      	beq.n	8009d26 <_Z24defaultNewArrayAllocatorv+0x4e>
 8009cf8:	480c      	ldr	r0, [pc, #48]	; (8009d2c <_Z24defaultNewArrayAllocatorv+0x54>)
 8009cfa:	f007 fa9b 	bl	8011234 <__cxa_guard_acquire>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bf14      	ite	ne
 8009d04:	2301      	movne	r3, #1
 8009d06:	2300      	moveq	r3, #0
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <_Z24defaultNewArrayAllocatorv+0x4e>
 8009d0e:	4b08      	ldr	r3, [pc, #32]	; (8009d30 <_Z24defaultNewArrayAllocatorv+0x58>)
 8009d10:	4a08      	ldr	r2, [pc, #32]	; (8009d34 <_Z24defaultNewArrayAllocatorv+0x5c>)
 8009d12:	4909      	ldr	r1, [pc, #36]	; (8009d38 <_Z24defaultNewArrayAllocatorv+0x60>)
 8009d14:	4809      	ldr	r0, [pc, #36]	; (8009d3c <_Z24defaultNewArrayAllocatorv+0x64>)
 8009d16:	f000 f86d 	bl	8009df4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8009d1a:	4804      	ldr	r0, [pc, #16]	; (8009d2c <_Z24defaultNewArrayAllocatorv+0x54>)
 8009d1c:	f007 fa96 	bl	801124c <__cxa_guard_release>
 8009d20:	4807      	ldr	r0, [pc, #28]	; (8009d40 <_Z24defaultNewArrayAllocatorv+0x68>)
 8009d22:	f007 faba 	bl	801129a <atexit>
    return &allocator;
 8009d26:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <_Z24defaultNewArrayAllocatorv+0x64>)
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20000504 	.word	0x20000504
 8009d30:	080154b8 	.word	0x080154b8
 8009d34:	080154c4 	.word	0x080154c4
 8009d38:	080154cc 	.word	0x080154cc
 8009d3c:	200004f0 	.word	0x200004f0
 8009d40:	08009cc9 	.word	0x08009cc9

08009d44 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 8009d48:	4b04      	ldr	r3, [pc, #16]	; (8009d5c <_Z25getCurrentMallocAllocatorv+0x18>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <_Z25getCurrentMallocAllocatorv+0x10>
 8009d50:	f000 f806 	bl	8009d60 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 8009d54:	4b01      	ldr	r3, [pc, #4]	; (8009d5c <_Z25getCurrentMallocAllocatorv+0x18>)
 8009d56:	681b      	ldr	r3, [r3, #0]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	200004d4 	.word	0x200004d4

08009d60 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 8009d64:	f000 f810 	bl	8009d88 <_Z22defaultMallocAllocatorv>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	4a02      	ldr	r2, [pc, #8]	; (8009d74 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 8009d6c:	6013      	str	r3, [r2, #0]
}
 8009d6e:	bf00      	nop
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	200004d4 	.word	0x200004d4

08009d78 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	4801      	ldr	r0, [pc, #4]	; (8009d84 <__tcf_2+0xc>)
 8009d7e:	f000 f859 	bl	8009e34 <_ZN19TestMemoryAllocatorD1Ev>
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20000508 	.word	0x20000508

08009d88 <_Z22defaultMallocAllocatorv>:
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8009d8c:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <_Z22defaultMallocAllocatorv+0x54>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	f3bf 8f5b 	dmb	ish
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bf0c      	ite	eq
 8009d9e:	2301      	moveq	r3, #1
 8009da0:	2300      	movne	r3, #0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d016      	beq.n	8009dd6 <_Z22defaultMallocAllocatorv+0x4e>
 8009da8:	480c      	ldr	r0, [pc, #48]	; (8009ddc <_Z22defaultMallocAllocatorv+0x54>)
 8009daa:	f007 fa43 	bl	8011234 <__cxa_guard_acquire>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bf14      	ite	ne
 8009db4:	2301      	movne	r3, #1
 8009db6:	2300      	moveq	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00b      	beq.n	8009dd6 <_Z22defaultMallocAllocatorv+0x4e>
 8009dbe:	4b08      	ldr	r3, [pc, #32]	; (8009de0 <_Z22defaultMallocAllocatorv+0x58>)
 8009dc0:	4a08      	ldr	r2, [pc, #32]	; (8009de4 <_Z22defaultMallocAllocatorv+0x5c>)
 8009dc2:	4909      	ldr	r1, [pc, #36]	; (8009de8 <_Z22defaultMallocAllocatorv+0x60>)
 8009dc4:	4809      	ldr	r0, [pc, #36]	; (8009dec <_Z22defaultMallocAllocatorv+0x64>)
 8009dc6:	f000 f815 	bl	8009df4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8009dca:	4804      	ldr	r0, [pc, #16]	; (8009ddc <_Z22defaultMallocAllocatorv+0x54>)
 8009dcc:	f007 fa3e 	bl	801124c <__cxa_guard_release>
 8009dd0:	4807      	ldr	r0, [pc, #28]	; (8009df0 <_Z22defaultMallocAllocatorv+0x68>)
 8009dd2:	f007 fa62 	bl	801129a <atexit>
    return &allocator;
 8009dd6:	4b05      	ldr	r3, [pc, #20]	; (8009dec <_Z22defaultMallocAllocatorv+0x64>)
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	2000051c 	.word	0x2000051c
 8009de0:	080154e8 	.word	0x080154e8
 8009de4:	080154f0 	.word	0x080154f0
 8009de8:	080154f8 	.word	0x080154f8
 8009dec:	20000508 	.word	0x20000508
 8009df0:	08009d79 	.word	0x08009d79

08009df4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 8009e02:	4a0b      	ldr	r2, [pc, #44]	; (8009e30 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	605a      	str	r2, [r3, #4]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	609a      	str	r2, [r3, #8]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	60da      	str	r2, [r3, #12]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	741a      	strb	r2, [r3, #16]
{
}
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	4618      	mov	r0, r3
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	08017238 	.word	0x08017238

08009e34 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	4a06      	ldr	r2, [pc, #24]	; (8009e58 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	741a      	strb	r2, [r3, #16]
}
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	08017238 	.word	0x08017238

08009e5c <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
}
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff ffe5 	bl	8009e34 <_ZN19TestMemoryAllocatorD1Ev>
 8009e6a:	2114      	movs	r1, #20
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7fb fe75 	bl	8005b5c <_ZdlPvj>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4618      	mov	r0, r3
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	7c1b      	ldrb	r3, [r3, #16]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 8009e94:	b590      	push	{r4, r7, lr}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3310      	adds	r3, #16
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	4798      	blx	r3
 8009eaa:	4604      	mov	r4, r0
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3310      	adds	r3, #16
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6838      	ldr	r0, [r7, #0]
 8009eb6:	4798      	blx	r3
 8009eb8:	4603      	mov	r3, r0
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f7fc fb5f 	bl	8006580 <_ZN12SimpleString6StrCmpEPKcS1_>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	bf0c      	ite	eq
 8009ec8:	2301      	moveq	r3, #1
 8009eca:	2300      	movne	r3, #0
 8009ecc:	b2db      	uxtb	r3, r3
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd90      	pop	{r4, r7, pc}
	...

08009ed8 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 8009ed8:	b590      	push	{r4, r7, lr}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	681c      	ldr	r4, [r3, #0]
 8009eea:	2301      	movs	r3, #1
 8009eec:	4a04      	ldr	r2, [pc, #16]	; (8009f00 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	47a0      	blx	r4
 8009ef4:	4603      	mov	r3, r0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd90      	pop	{r4, r7, pc}
 8009efe:	bf00      	nop
 8009f00:	08015514 	.word	0x08015514

08009f04 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	330c      	adds	r3, #12
 8009f14:	681c      	ldr	r4, [r3, #0]
 8009f16:	2301      	movs	r3, #1
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	4b04      	ldr	r3, [pc, #16]	; (8009f2c <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	47a0      	blx	r4
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd90      	pop	{r4, r7, pc}
 8009f2c:	08015514 	.word	0x08015514

08009f30 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
 8009f3c:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 8009f3e:	68b8      	ldr	r0, [r7, #8]
 8009f40:	f7ff fe2a 	bl	8009b98 <_ZL13checkedMallocj>
 8009f44:	4603      	mov	r3, r0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
	...

08009f50 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 8009f5e:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68b8      	ldr	r0, [r7, #8]
 8009f64:	4798      	blx	r3
}
 8009f66:	bf00      	nop
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	200000cc 	.word	0x200000cc

08009f74 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
    return name_;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
    return free_name_;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
    return this;
 8009fc4:	687b      	ldr	r3, [r7, #4]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
	...

08009fd4 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	4a05      	ldr	r2, [pc, #20]	; (8009ff4 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7ff ff25 	bl	8009e34 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	08017204 	.word	0x08017204

08009ff8 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
}
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff ffe7 	bl	8009fd4 <_ZN20NullUnknownAllocatorD1Ev>
 800a006:	2114      	movs	r1, #20
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7fb fda7 	bl	8005b5c <_ZdlPvj>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	603b      	str	r3, [r7, #0]
}
 800a042:	bf00      	nop
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
	...

0800a050 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	4b06      	ldr	r3, [pc, #24]	; (800a074 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800a05c:	4a05      	ldr	r2, [pc, #20]	; (800a074 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800a05e:	4906      	ldr	r1, [pc, #24]	; (800a078 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800a060:	f7ff fec8 	bl	8009df4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800a064:	4a05      	ldr	r2, [pc, #20]	; (800a07c <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	601a      	str	r2, [r3, #0]
{
}
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	08015548 	.word	0x08015548
 800a078:	08015550 	.word	0x08015550
 800a07c:	08017204 	.word	0x08017204

0800a080 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800a080:	b580      	push	{r7, lr}
 800a082:	af00      	add	r7, sp, #0
 800a084:	4801      	ldr	r0, [pc, #4]	; (800a08c <__tcf_3+0xc>)
 800a086:	f7ff ffa5 	bl	8009fd4 <_ZN20NullUnknownAllocatorD1Ev>
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20000520 	.word	0x20000520

0800a090 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800a094:	4b12      	ldr	r3, [pc, #72]	; (800a0e0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	f3bf 8f5b 	dmb	ish
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	bf0c      	ite	eq
 800a0a6:	2301      	moveq	r3, #1
 800a0a8:	2300      	movne	r3, #0
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d013      	beq.n	800a0d8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800a0b0:	480b      	ldr	r0, [pc, #44]	; (800a0e0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800a0b2:	f007 f8bf 	bl	8011234 <__cxa_guard_acquire>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	bf14      	ite	ne
 800a0bc:	2301      	movne	r3, #1
 800a0be:	2300      	moveq	r3, #0
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d008      	beq.n	800a0d8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800a0c6:	4807      	ldr	r0, [pc, #28]	; (800a0e4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800a0c8:	f7ff ffc2 	bl	800a050 <_ZN20NullUnknownAllocatorC1Ev>
 800a0cc:	4804      	ldr	r0, [pc, #16]	; (800a0e0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800a0ce:	f007 f8bd 	bl	801124c <__cxa_guard_release>
 800a0d2:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800a0d4:	f007 f8e1 	bl	801129a <atexit>
    return &allocator;
 800a0d8:	4b02      	ldr	r3, [pc, #8]	; (800a0e4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	20000534 	.word	0x20000534
 800a0e4:	20000520 	.word	0x20000520
 800a0e8:	0800a081 	.word	0x0800a081

0800a0ec <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
        return testCount_;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	689b      	ldr	r3, [r3, #8]
    }
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	699b      	ldr	r3, [r3, #24]
    }
 800a110:	4618      	mov	r0, r3
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b02      	cmp	r3, #2
 800a126:	d103      	bne.n	800a130 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800a128:	f004 fa38 	bl	800e59c <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800a12c:	4603      	mov	r3, r0
 800a12e:	e001      	b.n	800a134 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800a130:	4b01      	ldr	r3, [pc, #4]	; (800a138 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800a132:	781b      	ldrb	r3, [r3, #0]
}
 800a134:	4618      	mov	r0, r3
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20000084 	.word	0x20000084

0800a13c <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800a144:	4a0a      	ldr	r2, [pc, #40]	; (800a170 <_ZN10TestOutputC1Ev+0x34>)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	605a      	str	r2, [r3, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	721a      	strb	r2, [r3, #8]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	725a      	strb	r2, [r3, #9]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a05      	ldr	r2, [pc, #20]	; (800a174 <_ZN10TestOutputC1Ev+0x38>)
 800a160:	60da      	str	r2, [r3, #12]
{
}
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4618      	mov	r0, r3
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	0801733c 	.word	0x0801733c
 800a174:	08015950 	.word	0x08015950

0800a178 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	4a04      	ldr	r2, [pc, #16]	; (800a194 <_ZN10TestOutputD1Ev+0x1c>)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	601a      	str	r2, [r3, #0]
{
}
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4618      	mov	r0, r3
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	0801733c 	.word	0x0801733c

0800a198 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	78fa      	ldrb	r2, [r7, #3]
 800a1a8:	721a      	strb	r2, [r3, #8]
}
 800a1aa:	bf00      	nop
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
    color_ = true;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	725a      	strb	r2, [r3, #9]
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	3328      	adds	r3, #40	; 0x28
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	4798      	blx	r3
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800a1f0:	b590      	push	{r4, r7, lr}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	332c      	adds	r3, #44	; 0x2c
 800a200:	681c      	ldr	r4, [r3, #0]
 800a202:	f107 0308 	add.w	r3, r7, #8
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fd f9ef 	bl	80075ec <_Z10StringFroml>
 800a20e:	f107 0308 	add.w	r3, r7, #8
 800a212:	4618      	mov	r0, r3
 800a214:	f7fc ff02 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800a218:	4603      	mov	r3, r0
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	47a0      	blx	r4
 800a220:	f107 0308 	add.w	r3, r7, #8
 800a224:	4618      	mov	r0, r3
 800a226:	f7fc ff26 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800a22a:	bf00      	nop
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd90      	pop	{r4, r7, pc}

0800a232 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800a232:	b590      	push	{r4, r7, lr}
 800a234:	b085      	sub	sp, #20
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	332c      	adds	r3, #44	; 0x2c
 800a242:	681c      	ldr	r4, [r3, #0]
 800a244:	f107 0308 	add.w	r3, r7, #8
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fd fbc8 	bl	80079e0 <_Z10StringFromj>
 800a250:	f107 0308 	add.w	r3, r7, #8
 800a254:	4618      	mov	r0, r3
 800a256:	f7fc fee1 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800a25a:	4603      	mov	r3, r0
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	47a0      	blx	r4
 800a262:	f107 0308 	add.w	r3, r7, #8
 800a266:	4618      	mov	r0, r3
 800a268:	f7fc ff05 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800a26c:	bf00      	nop
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	bd90      	pop	{r4, r7, pc}

0800a274 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800a274:	b590      	push	{r4, r7, lr}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	332c      	adds	r3, #44	; 0x2c
 800a286:	681c      	ldr	r4, [r3, #0]
 800a288:	f107 0310 	add.w	r3, r7, #16
 800a28c:	2106      	movs	r1, #6
 800a28e:	ed97 0b00 	vldr	d0, [r7]
 800a292:	4618      	mov	r0, r3
 800a294:	f7fd fb3a 	bl	800790c <_Z10StringFromdi>
 800a298:	f107 0310 	add.w	r3, r7, #16
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fc febd 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	47a0      	blx	r4
 800a2aa:	f107 0310 	add.w	r3, r7, #16
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fc fee1 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800a2b4:	bf00      	nop
 800a2b6:	371c      	adds	r7, #28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd90      	pop	{r4, r7, pc}

0800a2bc <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
    p.print(s);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	332c      	adds	r3, #44	; 0x2c
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6839      	ldr	r1, [r7, #0]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	4798      	blx	r3
    return p;
 800a2d4:	687b      	ldr	r3, [r7, #4]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
	...

0800a2e0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800a2e0:	b590      	push	{r4, r7, lr}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	7a1b      	ldrb	r3, [r3, #8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d01a      	beq.n	800a328 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	332c      	adds	r3, #44	; 0x2c
 800a2f8:	681c      	ldr	r4, [r3, #0]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3314      	adds	r3, #20
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f107 0208 	add.w	r2, r7, #8
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	4610      	mov	r0, r2
 800a30a:	4798      	blx	r3
 800a30c:	f107 0308 	add.w	r3, r7, #8
 800a310:	4618      	mov	r0, r3
 800a312:	f7fc fe83 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800a316:	4603      	mov	r3, r0
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	47a0      	blx	r4
 800a31e:	f107 0308 	add.w	r3, r7, #8
 800a322:	4618      	mov	r0, r3
 800a324:	f7fc fea7 	bl	8007076 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3318      	adds	r3, #24
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6838      	ldr	r0, [r7, #0]
 800a332:	4798      	blx	r3
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d007      	beq.n	800a34a <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3344      	adds	r3, #68	; 0x44
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4907      	ldr	r1, [pc, #28]	; (800a360 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800a348:	e006      	b.n	800a358 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3344      	adds	r3, #68	; 0x44
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4904      	ldr	r1, [pc, #16]	; (800a364 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
}
 800a358:	bf00      	nop
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd90      	pop	{r4, r7, pc}
 800a360:	08015950 	.word	0x08015950
 800a364:	08015954 	.word	0x08015954

0800a368 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800a368:	b590      	push	{r4, r7, lr}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	7a1b      	ldrb	r3, [r3, #8]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d019      	beq.n	800a3ae <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	332c      	adds	r3, #44	; 0x2c
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4910      	ldr	r1, [pc, #64]	; (800a3c4 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3334      	adds	r3, #52	; 0x34
 800a38e:	681c      	ldr	r4, [r3, #0]
 800a390:	6838      	ldr	r0, [r7, #0]
 800a392:	f002 f845 	bl	800c420 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800a396:	4603      	mov	r3, r0
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	47a0      	blx	r4
        print(" ms\n");
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	332c      	adds	r3, #44	; 0x2c
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4908      	ldr	r1, [pc, #32]	; (800a3c8 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800a3ac:	e005      	b.n	800a3ba <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3358      	adds	r3, #88	; 0x58
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	4798      	blx	r3
}
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd90      	pop	{r4, r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	08015958 	.word	0x08015958
 800a3c8:	0801595c 	.word	0x0801595c

0800a3cc <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	332c      	adds	r3, #44	; 0x2c
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	68d2      	ldr	r2, [r2, #12]
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	1c5a      	adds	r2, r3, #1
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	605a      	str	r2, [r3, #4]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685a      	ldr	r2, [r3, #4]
 800a3f4:	4b0d      	ldr	r3, [pc, #52]	; (800a42c <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800a3f6:	fb83 1302 	smull	r1, r3, r3, r2
 800a3fa:	1119      	asrs	r1, r3, #4
 800a3fc:	17d3      	asrs	r3, r2, #31
 800a3fe:	1acb      	subs	r3, r1, r3
 800a400:	2132      	movs	r1, #50	; 0x32
 800a402:	fb01 f303 	mul.w	r3, r1, r3
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	bf0c      	ite	eq
 800a40c:	2301      	moveq	r3, #1
 800a40e:	2300      	movne	r3, #0
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d006      	beq.n	800a424 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	332c      	adds	r3, #44	; 0x2c
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4904      	ldr	r1, [pc, #16]	; (800a430 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	4798      	blx	r3
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	51eb851f 	.word	0x51eb851f
 800a430:	08015964 	.word	0x08015964

0800a434 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	60da      	str	r2, [r3, #12]
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800a490:	b590      	push	{r4, r7, lr}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
    print("\n");
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	332c      	adds	r3, #44	; 0x2c
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	496f      	ldr	r1, [pc, #444]	; (800a660 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800a4a8:	6838      	ldr	r0, [r7, #0]
 800a4aa:	f7f9 fe25 	bl	80040f8 <_ZNK10TestResult9isFailureEv>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800a4b2:	6838      	ldr	r0, [r7, #0]
 800a4b4:	f7f9 fe14 	bl	80040e0 <_ZNK10TestResult15getFailureCountEv>
 800a4b8:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d02b      	beq.n	800a518 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	7a5b      	ldrb	r3, [r3, #9]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d006      	beq.n	800a4d6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	332c      	adds	r3, #44	; 0x2c
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4964      	ldr	r1, [pc, #400]	; (800a664 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
        }
        print("Errors (");
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	332c      	adds	r3, #44	; 0x2c
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4962      	ldr	r1, [pc, #392]	; (800a668 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	4798      	blx	r3
        if (failureCount > 0) {
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00e      	beq.n	800a508 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3334      	adds	r3, #52	; 0x34
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68b9      	ldr	r1, [r7, #8]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	4798      	blx	r3
            print(" failures, ");
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	332c      	adds	r3, #44	; 0x2c
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	495a      	ldr	r1, [pc, #360]	; (800a66c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
 800a506:	e019      	b.n	800a53c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	332c      	adds	r3, #44	; 0x2c
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4957      	ldr	r1, [pc, #348]	; (800a670 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	4798      	blx	r3
 800a516:	e011      	b.n	800a53c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	7a5b      	ldrb	r3, [r3, #9]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d006      	beq.n	800a52e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	332c      	adds	r3, #44	; 0x2c
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4952      	ldr	r1, [pc, #328]	; (800a674 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	4798      	blx	r3
        }
        print("OK (");
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	332c      	adds	r3, #44	; 0x2c
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4950      	ldr	r1, [pc, #320]	; (800a678 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	4798      	blx	r3
    }
    print(result.getTestCount());
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3334      	adds	r3, #52	; 0x34
 800a542:	681c      	ldr	r4, [r3, #0]
 800a544:	6838      	ldr	r0, [r7, #0]
 800a546:	f7ff fdd1 	bl	800a0ec <_ZNK10TestResult12getTestCountEv>
 800a54a:	4603      	mov	r3, r0
 800a54c:	4619      	mov	r1, r3
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	47a0      	blx	r4
    print(" tests, ");
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	332c      	adds	r3, #44	; 0x2c
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4948      	ldr	r1, [pc, #288]	; (800a67c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	4798      	blx	r3
    print(result.getRunCount());
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3334      	adds	r3, #52	; 0x34
 800a566:	681c      	ldr	r4, [r3, #0]
 800a568:	6838      	ldr	r0, [r7, #0]
 800a56a:	f7f9 fda1 	bl	80040b0 <_ZNK10TestResult11getRunCountEv>
 800a56e:	4603      	mov	r3, r0
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	47a0      	blx	r4
    print(" ran, ");
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	332c      	adds	r3, #44	; 0x2c
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4940      	ldr	r1, [pc, #256]	; (800a680 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	4798      	blx	r3
    print(result.getCheckCount());
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3334      	adds	r3, #52	; 0x34
 800a58a:	681c      	ldr	r4, [r3, #0]
 800a58c:	6838      	ldr	r0, [r7, #0]
 800a58e:	f7fa f9fb 	bl	8004988 <_ZNK10TestResult13getCheckCountEv>
 800a592:	4603      	mov	r3, r0
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	47a0      	blx	r4
    print(" checks, ");
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	332c      	adds	r3, #44	; 0x2c
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4938      	ldr	r1, [pc, #224]	; (800a684 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	4798      	blx	r3
    print(result.getIgnoredCount());
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3334      	adds	r3, #52	; 0x34
 800a5ae:	681c      	ldr	r4, [r3, #0]
 800a5b0:	6838      	ldr	r0, [r7, #0]
 800a5b2:	f7f9 fd89 	bl	80040c8 <_ZNK10TestResult15getIgnoredCountEv>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	47a0      	blx	r4
    print(" ignored, ");
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	332c      	adds	r3, #44	; 0x2c
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4930      	ldr	r1, [pc, #192]	; (800a688 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3334      	adds	r3, #52	; 0x34
 800a5d2:	681c      	ldr	r4, [r3, #0]
 800a5d4:	6838      	ldr	r0, [r7, #0]
 800a5d6:	f7ff fd95 	bl	800a104 <_ZNK10TestResult19getFilteredOutCountEv>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	47a0      	blx	r4
    print(" filtered out, ");
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	332c      	adds	r3, #44	; 0x2c
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4928      	ldr	r1, [pc, #160]	; (800a68c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3334      	adds	r3, #52	; 0x34
 800a5f6:	681c      	ldr	r4, [r3, #0]
 800a5f8:	6838      	ldr	r0, [r7, #0]
 800a5fa:	f001 ff05 	bl	800c408 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800a5fe:	4603      	mov	r3, r0
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	47a0      	blx	r4
    print(" ms)");
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	332c      	adds	r3, #44	; 0x2c
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4920      	ldr	r1, [pc, #128]	; (800a690 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	4798      	blx	r3
    if (color_) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7a5b      	ldrb	r3, [r3, #9]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d006      	beq.n	800a62a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	332c      	adds	r3, #44	; 0x2c
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	491b      	ldr	r1, [pc, #108]	; (800a694 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d009      	beq.n	800a644 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d106      	bne.n	800a644 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	332c      	adds	r3, #44	; 0x2c
 800a63c:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800a63e:	4916      	ldr	r1, [pc, #88]	; (800a698 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
    }
    print("\n\n");
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	332c      	adds	r3, #44	; 0x2c
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4913      	ldr	r1, [pc, #76]	; (800a69c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	4798      	blx	r3

    dotCount_ = 0;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	605a      	str	r2, [r3, #4]
}
 800a658:	bf00      	nop
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd90      	pop	{r4, r7, pc}
 800a660:	08015964 	.word	0x08015964
 800a664:	08015968 	.word	0x08015968
 800a668:	08015970 	.word	0x08015970
 800a66c:	0801597c 	.word	0x0801597c
 800a670:	08015988 	.word	0x08015988
 800a674:	08015998 	.word	0x08015998
 800a678:	080159a0 	.word	0x080159a0
 800a67c:	080159a8 	.word	0x080159a8
 800a680:	080159b4 	.word	0x080159b4
 800a684:	080159bc 	.word	0x080159bc
 800a688:	080159c8 	.word	0x080159c8
 800a68c:	080159d4 	.word	0x080159d4
 800a690:	080159e4 	.word	0x080159e4
 800a694:	080159ec 	.word	0x080159ec
 800a698:	080159f0 	.word	0x080159f0
 800a69c:	08015a94 	.word	0x08015a94

0800a6a0 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d922      	bls.n	800a6f8 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	332c      	adds	r3, #44	; 0x2c
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4911      	ldr	r1, [pc, #68]	; (800a700 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	4798      	blx	r3
        print(number);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3334      	adds	r3, #52	; 0x34
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	4798      	blx	r3
        print(" of ");
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	332c      	adds	r3, #44	; 0x2c
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	490b      	ldr	r1, [pc, #44]	; (800a704 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	4798      	blx	r3
        print(total);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3334      	adds	r3, #52	; 0x34
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6879      	ldr	r1, [r7, #4]
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	4798      	blx	r3
        print("\n");
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	332c      	adds	r3, #44	; 0x2c
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4905      	ldr	r1, [pc, #20]	; (800a708 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	4798      	blx	r3
    }
}
 800a6f8:	bf00      	nop
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	08015a98 	.word	0x08015a98
 800a704:	08015aa4 	.word	0x08015aa4
 800a708:	08015964 	.word	0x08015964

0800a70c <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800a716:	6838      	ldr	r0, [r7, #0]
 800a718:	f7fd ffa1 	bl	800865e <_ZNK11TestFailure17isOutsideTestFileEv>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d105      	bne.n	800a72e <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800a722:	6838      	ldr	r0, [r7, #0]
 800a724:	f7fd ffad 	bl	8008682 <_ZNK11TestFailure18isInHelperFunctionEv>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800a72e:	2301      	movs	r3, #1
 800a730:	e000      	b.n	800a734 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800a732:	2300      	movs	r3, #0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d004      	beq.n	800a742 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f81d 	bl	800a77a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800a740:	e003      	b.n	800a74a <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f86b 	bl	800a820 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3318      	adds	r3, #24
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f107 0208 	add.w	r2, r7, #8
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	4610      	mov	r0, r2
 800a75a:	4798      	blx	r3
 800a75c:	f107 0308 	add.w	r3, r7, #8
 800a760:	4619      	mov	r1, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f8b2 	bl	800a8cc <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800a768:	f107 0308 	add.w	r3, r7, #8
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fc fc82 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b088      	sub	sp, #32
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	331c      	adds	r3, #28
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f107 0208 	add.w	r2, r7, #8
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	4610      	mov	r0, r2
 800a794:	4798      	blx	r3
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3320      	adds	r3, #32
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6838      	ldr	r0, [r7, #0]
 800a7a0:	4798      	blx	r3
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	f107 0308 	add.w	r3, r7, #8
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f8be 	bl	800a92c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800a7b0:	f107 0308 	add.w	r3, r7, #8
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fc fc5e 	bl	8007076 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	330c      	adds	r3, #12
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f107 0210 	add.w	r2, r7, #16
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4798      	blx	r3
 800a7cc:	f107 0310 	add.w	r3, r7, #16
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f85c 	bl	800a890 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800a7d8:	f107 0310 	add.w	r3, r7, #16
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fc fc4a 	bl	8007076 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f107 0218 	add.w	r2, r7, #24
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3314      	adds	r3, #20
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6838      	ldr	r0, [r7, #0]
 800a7fe:	4798      	blx	r3
 800a800:	4602      	mov	r2, r0
 800a802:	f107 0318 	add.w	r3, r7, #24
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f88f 	bl	800a92c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800a80e:	f107 0318 	add.w	r3, r7, #24
 800a812:	4618      	mov	r0, r3
 800a814:	f7fc fc2f 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800a818:	bf00      	nop
 800a81a:	3720      	adds	r7, #32
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3308      	adds	r3, #8
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f107 0208 	add.w	r2, r7, #8
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	4610      	mov	r0, r2
 800a83a:	4798      	blx	r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3314      	adds	r3, #20
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6838      	ldr	r0, [r7, #0]
 800a846:	4798      	blx	r3
 800a848:	4602      	mov	r2, r0
 800a84a:	f107 0308 	add.w	r3, r7, #8
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f86b 	bl	800a92c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800a856:	f107 0308 	add.w	r3, r7, #8
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fc fc0b 	bl	8007076 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	330c      	adds	r3, #12
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f107 0210 	add.w	r2, r7, #16
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	4610      	mov	r0, r2
 800a870:	4798      	blx	r3
 800a872:	f107 0310 	add.w	r3, r7, #16
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f809 	bl	800a890 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800a87e:	f107 0310 	add.w	r3, r7, #16
 800a882:	4618      	mov	r0, r3
 800a884:	f7fc fbf7 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800a888:	bf00      	nop
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800a890:	b590      	push	{r4, r7, lr}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	332c      	adds	r3, #44	; 0x2c
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4909      	ldr	r1, [pc, #36]	; (800a8c8 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	4798      	blx	r3
    print(testName.asCharString());
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	332c      	adds	r3, #44	; 0x2c
 800a8ae:	681c      	ldr	r4, [r3, #0]
 800a8b0:	6838      	ldr	r0, [r7, #0]
 800a8b2:	f7fc fbb3 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	47a0      	blx	r4
}
 800a8be:	bf00      	nop
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd90      	pop	{r4, r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	08015aac 	.word	0x08015aac

0800a8cc <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800a8cc:	b590      	push	{r4, r7, lr}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
    print("\n");
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	332c      	adds	r3, #44	; 0x2c
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4910      	ldr	r1, [pc, #64]	; (800a920 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	4798      	blx	r3
    print("\t");
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	332c      	adds	r3, #44	; 0x2c
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	490d      	ldr	r1, [pc, #52]	; (800a924 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	4798      	blx	r3
    print(reason.asCharString());
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	332c      	adds	r3, #44	; 0x2c
 800a8f8:	681c      	ldr	r4, [r3, #0]
 800a8fa:	6838      	ldr	r0, [r7, #0]
 800a8fc:	f7fc fb8e 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800a900:	4603      	mov	r3, r0
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	47a0      	blx	r4
    print("\n\n");
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	332c      	adds	r3, #44	; 0x2c
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4905      	ldr	r1, [pc, #20]	; (800a928 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	4798      	blx	r3
}
 800a916:	bf00      	nop
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd90      	pop	{r4, r7, pc}
 800a91e:	bf00      	nop
 800a920:	08015964 	.word	0x08015964
 800a924:	08015abc 	.word	0x08015abc
 800a928:	08015a94 	.word	0x08015a94

0800a92c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800a92c:	b590      	push	{r4, r7, lr}
 800a92e:	b089      	sub	sp, #36	; 0x24
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800a938:	f7ff fbf0 	bl	800a11c <_ZN10TestOutput21getWorkingEnvironmentEv>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bf0c      	ite	eq
 800a942:	2301      	moveq	r3, #1
 800a944:	2300      	movne	r3, #0
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d015      	beq.n	800a978 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3354      	adds	r3, #84	; 0x54
 800a952:	681c      	ldr	r4, [r3, #0]
 800a954:	f107 0310 	add.w	r3, r7, #16
 800a958:	68b9      	ldr	r1, [r7, #8]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fc f827 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
 800a960:	f107 0310 	add.w	r3, r7, #16
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	4619      	mov	r1, r3
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	47a0      	blx	r4
 800a96c:	f107 0310 	add.w	r3, r7, #16
 800a970:	4618      	mov	r0, r3
 800a972:	f7fc fb80 	bl	8007076 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800a976:	e014      	b.n	800a9a2 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3350      	adds	r3, #80	; 0x50
 800a97e:	681c      	ldr	r4, [r3, #0]
 800a980:	f107 0318 	add.w	r3, r7, #24
 800a984:	68b9      	ldr	r1, [r7, #8]
 800a986:	4618      	mov	r0, r3
 800a988:	f7fc f811 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
 800a98c:	f107 0318 	add.w	r3, r7, #24
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	4619      	mov	r1, r3
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	47a0      	blx	r4
 800a998:	f107 0318 	add.w	r3, r7, #24
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fc fb6a 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800a9a2:	bf00      	nop
 800a9a4:	3724      	adds	r7, #36	; 0x24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd90      	pop	{r4, r7, pc}
	...

0800a9ac <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800a9ac:	b590      	push	{r4, r7, lr}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
    print("\n");
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	332c      	adds	r3, #44	; 0x2c
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4916      	ldr	r1, [pc, #88]	; (800aa1c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	4798      	blx	r3
    print(file.asCharString());
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	332c      	adds	r3, #44	; 0x2c
 800a9cc:	681c      	ldr	r4, [r3, #0]
 800a9ce:	68b8      	ldr	r0, [r7, #8]
 800a9d0:	f7fc fb24 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	47a0      	blx	r4
    print(":");
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	332c      	adds	r3, #44	; 0x2c
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	490e      	ldr	r1, [pc, #56]	; (800aa20 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	4798      	blx	r3
    print(lineNumber);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3334      	adds	r3, #52	; 0x34
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	4798      	blx	r3
    print(":");
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	332c      	adds	r3, #44	; 0x2c
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4907      	ldr	r1, [pc, #28]	; (800aa20 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	4798      	blx	r3
    print(" error:");
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	332c      	adds	r3, #44	; 0x2c
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4905      	ldr	r1, [pc, #20]	; (800aa24 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	4798      	blx	r3
}
 800aa14:	bf00      	nop
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd90      	pop	{r4, r7, pc}
 800aa1c:	08015964 	.word	0x08015964
 800aa20:	08015ac0 	.word	0x08015ac0
 800aa24:	08015ac4 	.word	0x08015ac4

0800aa28 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800aa28:	b590      	push	{r4, r7, lr}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
    print("\n");
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	332c      	adds	r3, #44	; 0x2c
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4916      	ldr	r1, [pc, #88]	; (800aa98 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	4798      	blx	r3
    print(file.asCharString());
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	332c      	adds	r3, #44	; 0x2c
 800aa48:	681c      	ldr	r4, [r3, #0]
 800aa4a:	68b8      	ldr	r0, [r7, #8]
 800aa4c:	f7fc fae6 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800aa50:	4603      	mov	r3, r0
 800aa52:	4619      	mov	r1, r3
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	47a0      	blx	r4
    print("(");
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	332c      	adds	r3, #44	; 0x2c
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	490e      	ldr	r1, [pc, #56]	; (800aa9c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	4798      	blx	r3
    print(lineNumber);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3334      	adds	r3, #52	; 0x34
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	4798      	blx	r3
    print("):");
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	332c      	adds	r3, #44	; 0x2c
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4908      	ldr	r1, [pc, #32]	; (800aaa0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	4798      	blx	r3
    print(" error:");
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	332c      	adds	r3, #44	; 0x2c
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4906      	ldr	r1, [pc, #24]	; (800aaa4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	4798      	blx	r3
}
 800aa90:	bf00      	nop
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd90      	pop	{r4, r7, pc}
 800aa98:	08015964 	.word	0x08015964
 800aa9c:	08015acc 	.word	0x08015acc
 800aaa0:	08015ad0 	.word	0x08015ad0
 800aaa4:	08015ac4 	.word	0x08015ac4

0800aaa8 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	7a1b      	ldrb	r3, [r3, #8]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d106      	bne.n	800aac8 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3328      	adds	r3, #40	; 0x28
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	4798      	blx	r3
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
    while (*s) {
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d009      	beq.n	800aaf6 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800aae2:	4b0a      	ldr	r3, [pc, #40]	; (800ab0c <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	7812      	ldrb	r2, [r2, #0]
 800aaea:	4610      	mov	r0, r2
 800aaec:	4798      	blx	r3
        s++;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	603b      	str	r3, [r7, #0]
    while (*s) {
 800aaf4:	e7f1      	b.n	800aada <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	334c      	adds	r3, #76	; 0x4c
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	4798      	blx	r3
}
 800ab02:	bf00      	nop
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	200000bc 	.word	0x200000bc

0800ab10 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800ab18:	4b03      	ldr	r3, [pc, #12]	; (800ab28 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4798      	blx	r3
}
 800ab1e:	bf00      	nop
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	200000c0 	.word	0x200000c0

0800ab2c <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7ff fb00 	bl	800a13c <_ZN10TestOutputC1Ev>
 800ab3c:	4a06      	ldr	r2, [pc, #24]	; (800ab58 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	611a      	str	r2, [r3, #16]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	615a      	str	r2, [r3, #20]
{
}
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	0801726c 	.word	0x0801726c

0800ab5c <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	4a0e      	ldr	r2, [pc, #56]	; (800aba0 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d004      	beq.n	800ab7c <_ZN19CompositeTestOutputD1Ev+0x20>
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	3204      	adds	r2, #4
 800ab76:	6812      	ldr	r2, [r2, #0]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	4790      	blx	r2
  delete outputTwo_;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <_ZN19CompositeTestOutputD1Ev+0x32>
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	3204      	adds	r2, #4
 800ab88:	6812      	ldr	r2, [r2, #0]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff faf1 	bl	800a178 <_ZN10TestOutputD1Ev>
}
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	0801726c 	.word	0x0801726c

0800aba4 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
}
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f7ff ffd5 	bl	800ab5c <_ZN19CompositeTestOutputD1Ev>
 800abb2:	2118      	movs	r1, #24
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7fa ffd1 	bl	8005b5c <_ZdlPvj>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4618      	mov	r0, r3
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d004      	beq.n	800abe0 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	3204      	adds	r2, #4
 800abda:	6812      	ldr	r2, [r2, #0]
 800abdc:	4618      	mov	r0, r3
 800abde:	4790      	blx	r2
  outputOne_ = output;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	611a      	str	r2, [r3, #16]
}
 800abe6:	bf00      	nop
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d004      	beq.n	800ac0a <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	3204      	adds	r2, #4
 800ac04:	6812      	ldr	r2, [r2, #0]
 800ac06:	4618      	mov	r0, r3
 800ac08:	4790      	blx	r2
  outputTwo_ = output;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	615a      	str	r2, [r3, #20]
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d008      	beq.n	800ac3a <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	691a      	ldr	r2, [r3, #16]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3308      	adds	r3, #8
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4610      	mov	r0, r2
 800ac38:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d008      	beq.n	800ac54 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	695a      	ldr	r2, [r3, #20]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	695b      	ldr	r3, [r3, #20]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	691a      	ldr	r2, [r3, #16]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	330c      	adds	r3, #12
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	4610      	mov	r0, r2
 800ac80:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d009      	beq.n	800ac9e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	695a      	ldr	r2, [r3, #20]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	695b      	ldr	r3, [r3, #20]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	330c      	adds	r3, #12
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	4798      	blx	r3
}
 800ac9e:	bf00      	nop
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d009      	beq.n	800accc <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	691a      	ldr	r2, [r3, #16]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3310      	adds	r3, #16
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	4610      	mov	r0, r2
 800acca:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d009      	beq.n	800ace8 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	695a      	ldr	r2, [r3, #20]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	695b      	ldr	r3, [r3, #20]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3310      	adds	r3, #16
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	4610      	mov	r0, r2
 800ace6:	4798      	blx	r3
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d009      	beq.n	800ad16 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	691a      	ldr	r2, [r3, #16]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3314      	adds	r3, #20
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	4610      	mov	r0, r2
 800ad14:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d009      	beq.n	800ad32 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	695a      	ldr	r2, [r3, #20]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3314      	adds	r3, #20
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6839      	ldr	r1, [r7, #0]
 800ad2e:	4610      	mov	r0, r2
 800ad30:	4798      	blx	r3
}
 800ad32:	bf00      	nop
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d009      	beq.n	800ad60 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	691a      	ldr	r2, [r3, #16]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3318      	adds	r3, #24
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d009      	beq.n	800ad7c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	695a      	ldr	r2, [r3, #20]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3318      	adds	r3, #24
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	4610      	mov	r0, r2
 800ad7a:	4798      	blx	r3
}
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d009      	beq.n	800adaa <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	691a      	ldr	r2, [r3, #16]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	331c      	adds	r3, #28
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	4610      	mov	r0, r2
 800ada8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	695b      	ldr	r3, [r3, #20]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d009      	beq.n	800adc6 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	695a      	ldr	r2, [r3, #20]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	695b      	ldr	r3, [r3, #20]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	331c      	adds	r3, #28
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	4610      	mov	r0, r2
 800adc4:	4798      	blx	r3
}
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b082      	sub	sp, #8
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	460b      	mov	r3, r1
 800add8:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d009      	beq.n	800adf6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	691a      	ldr	r2, [r3, #16]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3320      	adds	r3, #32
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	78f9      	ldrb	r1, [r7, #3]
 800adf2:	4610      	mov	r0, r2
 800adf4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d009      	beq.n	800ae12 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	695a      	ldr	r2, [r3, #20]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3320      	adds	r3, #32
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	78f9      	ldrb	r1, [r7, #3]
 800ae0e:	4610      	mov	r0, r2
 800ae10:	4798      	blx	r3
}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d008      	beq.n	800ae3c <_ZN19CompositeTestOutput5colorEv+0x22>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	691a      	ldr	r2, [r3, #16]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3324      	adds	r3, #36	; 0x24
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4610      	mov	r0, r2
 800ae3a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	695b      	ldr	r3, [r3, #20]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d008      	beq.n	800ae56 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	695a      	ldr	r2, [r3, #20]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3324      	adds	r3, #36	; 0x24
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4610      	mov	r0, r2
 800ae54:	4798      	blx	r3
}
 800ae56:	bf00      	nop
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d009      	beq.n	800ae84 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	691a      	ldr	r2, [r3, #16]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3328      	adds	r3, #40	; 0x28
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	4610      	mov	r0, r2
 800ae82:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d009      	beq.n	800aea0 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	695a      	ldr	r2, [r3, #20]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	695b      	ldr	r3, [r3, #20]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	3328      	adds	r3, #40	; 0x28
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	4798      	blx	r3
}
 800aea0:	bf00      	nop
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d009      	beq.n	800aece <_ZN19CompositeTestOutput5printEPKc+0x26>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	691a      	ldr	r2, [r3, #16]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	332c      	adds	r3, #44	; 0x2c
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	4610      	mov	r0, r2
 800aecc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	695b      	ldr	r3, [r3, #20]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d009      	beq.n	800aeea <_ZN19CompositeTestOutput5printEPKc+0x42>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	695a      	ldr	r2, [r3, #20]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	332c      	adds	r3, #44	; 0x2c
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	4610      	mov	r0, r2
 800aee8:	4798      	blx	r3
}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d009      	beq.n	800af18 <_ZN19CompositeTestOutput5printEl+0x26>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	691a      	ldr	r2, [r3, #16]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3330      	adds	r3, #48	; 0x30
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	4610      	mov	r0, r2
 800af16:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	695b      	ldr	r3, [r3, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d009      	beq.n	800af34 <_ZN19CompositeTestOutput5printEl+0x42>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	695a      	ldr	r2, [r3, #20]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3330      	adds	r3, #48	; 0x30
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	4610      	mov	r0, r2
 800af32:	4798      	blx	r3
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d009      	beq.n	800af62 <_ZN19CompositeTestOutput5printEj+0x26>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691a      	ldr	r2, [r3, #16]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3334      	adds	r3, #52	; 0x34
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	4610      	mov	r0, r2
 800af60:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d009      	beq.n	800af7e <_ZN19CompositeTestOutput5printEj+0x42>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	695a      	ldr	r2, [r3, #20]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	3334      	adds	r3, #52	; 0x34
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	4610      	mov	r0, r2
 800af7c:	4798      	blx	r3
}
 800af7e:	bf00      	nop
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00a      	beq.n	800afb0 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	691a      	ldr	r2, [r3, #16]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3338      	adds	r3, #56	; 0x38
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	ed97 0b00 	vldr	d0, [r7]
 800afac:	4610      	mov	r0, r2
 800afae:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	695a      	ldr	r2, [r3, #20]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	695b      	ldr	r3, [r3, #20]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3338      	adds	r3, #56	; 0x38
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	ed97 0b00 	vldr	d0, [r7]
 800afca:	4610      	mov	r0, r2
 800afcc:	4798      	blx	r3
}
 800afce:	bf00      	nop
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b082      	sub	sp, #8
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d009      	beq.n	800affc <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	333c      	adds	r3, #60	; 0x3c
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	4610      	mov	r0, r2
 800affa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d009      	beq.n	800b018 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	695a      	ldr	r2, [r3, #20]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	695b      	ldr	r3, [r3, #20]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	333c      	adds	r3, #60	; 0x3c
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	4610      	mov	r0, r2
 800b016:	4798      	blx	r3
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d009      	beq.n	800b046 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	691a      	ldr	r2, [r3, #16]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3344      	adds	r3, #68	; 0x44
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	4610      	mov	r0, r2
 800b044:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d009      	beq.n	800b062 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	695a      	ldr	r2, [r3, #20]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3344      	adds	r3, #68	; 0x44
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	4610      	mov	r0, r2
 800b060:	4798      	blx	r3
}
 800b062:	bf00      	nop
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <_ZN19CompositeTestOutput5flushEv+0x22>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691a      	ldr	r2, [r3, #16]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	334c      	adds	r3, #76	; 0x4c
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4610      	mov	r0, r2
 800b08a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d008      	beq.n	800b0a6 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	695a      	ldr	r2, [r3, #20]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	695b      	ldr	r3, [r3, #20]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	334c      	adds	r3, #76	; 0x4c
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	4798      	blx	r3
}
 800b0a6:	bf00      	nop
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800b0ae:	b480      	push	{r7}
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	60f8      	str	r0, [r7, #12]
 800b0b6:	60b9      	str	r1, [r7, #8]
 800b0b8:	607a      	str	r2, [r7, #4]
    }
 800b0ba:	bf00      	nop
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800b0c6:	b480      	push	{r7}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	60f8      	str	r0, [r7, #12]
 800b0ce:	60b9      	str	r1, [r7, #8]
 800b0d0:	607a      	str	r2, [r7, #4]
    }
 800b0d2:	bf00      	nop
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
	...

0800b0e0 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800b0ea:	4a0b      	ldr	r2, [pc, #44]	; (800b118 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	f000 f9ce 	bl	800b490 <_ZN14NullTestPlugin8instanceEv>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	605a      	str	r2, [r3, #4]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	4618      	mov	r0, r3
 800b102:	f7fb fc54 	bl	80069ae <_ZN12SimpleStringC1ERKS_>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	741a      	strb	r2, [r3, #16]
{
}
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4618      	mov	r0, r3
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	08017428 	.word	0x08017428

0800b11c <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800b126:	4a0a      	ldr	r2, [pc, #40]	; (800b150 <_ZN10TestPluginC1EPS_+0x34>)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	605a      	str	r2, [r3, #4]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	3308      	adds	r3, #8
 800b136:	4907      	ldr	r1, [pc, #28]	; (800b154 <_ZN10TestPluginC1EPS_+0x38>)
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fb fbe4 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	741a      	strb	r2, [r3, #16]
{
}
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	08017428 	.word	0x08017428
 800b154:	08015ad4 	.word	0x08015ad4

0800b158 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	4a06      	ldr	r2, [pc, #24]	; (800b17c <_ZN10TestPluginD1Ev+0x24>)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	601a      	str	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	3308      	adds	r3, #8
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fb ff83 	bl	8007076 <_ZN12SimpleStringD1Ev>
{
}
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4618      	mov	r0, r3
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	08017428 	.word	0x08017428

0800b180 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
}
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7ff ffe5 	bl	800b158 <_ZN10TestPluginD1Ev>
 800b18e:	2114      	movs	r1, #20
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7fa fce3 	bl	8005b5c <_ZdlPvj>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4618      	mov	r0, r3
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	605a      	str	r2, [r3, #4]
    return this;
 800b1b0:	687b      	ldr	r3, [r7, #4]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	60f8      	str	r0, [r7, #12]
 800b1c6:	60b9      	str	r1, [r7, #8]
 800b1c8:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	7c1b      	ldrb	r3, [r3, #16]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d007      	beq.n	800b1e2 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	68b9      	ldr	r1, [r7, #8]
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6858      	ldr	r0, [r3, #4]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3314      	adds	r3, #20
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	68b9      	ldr	r1, [r7, #8]
 800b1f4:	4798      	blx	r3
}
 800b1f6:	bf00      	nop
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	60f8      	str	r0, [r7, #12]
 800b206:	60b9      	str	r1, [r7, #8]
 800b208:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6858      	ldr	r0, [r3, #4]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3318      	adds	r3, #24
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	68b9      	ldr	r1, [r7, #8]
 800b21c:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	7c1b      	ldrb	r3, [r3, #16]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d007      	beq.n	800b236 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	330c      	adds	r3, #12
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	68b9      	ldr	r1, [r7, #8]
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	4798      	blx	r3
}
 800b236:	bf00      	nop
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800b23e:	b590      	push	{r4, r7, lr}
 800b240:	b085      	sub	sp, #20
 800b242:	af00      	add	r7, sp, #0
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	607a      	str	r2, [r7, #4]
 800b24a:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	331c      	adds	r3, #28
 800b252:	681c      	ldr	r4, [r3, #0]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	68b9      	ldr	r1, [r7, #8]
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	47a0      	blx	r4
 800b25e:	4603      	mov	r3, r0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	bd90      	pop	{r4, r7, pc}

0800b268 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800b268:	b590      	push	{r4, r7, lr}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	3310      	adds	r3, #16
 800b27c:	681c      	ldr	r4, [r3, #0]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	68b9      	ldr	r1, [r7, #8]
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	47a0      	blx	r4
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800b28e:	2301      	movs	r3, #1
 800b290:	e011      	b.n	800b2b6 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00c      	beq.n	800b2b4 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6858      	ldr	r0, [r3, #4]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	331c      	adds	r3, #28
 800b2a6:	681c      	ldr	r4, [r3, #0]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	68b9      	ldr	r1, [r7, #8]
 800b2ae:	47a0      	blx	r4
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	e000      	b.n	800b2b6 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd90      	pop	{r4, r7, pc}

0800b2be <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b083      	sub	sp, #12
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
    return name_;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3308      	adds	r3, #8
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b082      	sub	sp, #8
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6838      	ldr	r0, [r7, #0]
 800b2e8:	f7fb fed1 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	e00d      	b.n	800b312 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d007      	beq.n	800b30e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	6839      	ldr	r1, [r7, #0]
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff ffe6 	bl	800b2d6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800b30a:	4603      	mov	r3, r0
 800b30c:	e001      	b.n	800b312 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	685b      	ldr	r3, [r3, #4]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800b31a:	b480      	push	{r7}
 800b31c:	b083      	sub	sp, #12
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
    return next_;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
}
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800b33c:	2300      	movs	r3, #0
 800b33e:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00e      	beq.n	800b366 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff ffb6 	bl	800b2be <_ZN10TestPlugin7getNameEv>
 800b352:	4603      	mov	r3, r0
 800b354:	6839      	ldr	r1, [r7, #0]
 800b356:	4618      	mov	r0, r3
 800b358:	f7fb fe99 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800b362:	2301      	movs	r3, #1
 800b364:	e000      	b.n	800b368 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800b366:	2300      	movs	r3, #0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d007      	beq.n	800b37c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800b37c:	68fb      	ldr	r3, [r7, #12]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	741a      	strb	r2, [r3, #16]
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	741a      	strb	r2, [r3, #16]
}
 800b3ae:	bf00      	nop
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b083      	sub	sp, #12
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
    return enabled_;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	7c1b      	ldrb	r3, [r3, #16]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff fe7c 	bl	800b0e0 <_ZN10TestPluginC1ERK12SimpleString>
 800b3e8:	4a05      	ldr	r2, [pc, #20]	; (800b400 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800b3ee:	4b05      	ldr	r3, [pc, #20]	; (800b404 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	601a      	str	r2, [r3, #0]
}
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	080173e4 	.word	0x080173e4
 800b404:	20000538 	.word	0x20000538

0800b408 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800b414:	4b0e      	ldr	r3, [pc, #56]	; (800b450 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3b01      	subs	r3, #1
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	db0d      	blt.n	800b43e <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800b422:	4a0c      	ldr	r2, [pc, #48]	; (800b454 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b42a:	490a      	ldr	r1, [pc, #40]	; (800b454 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	440b      	add	r3, r1
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	3b01      	subs	r3, #1
 800b43a:	617b      	str	r3, [r7, #20]
 800b43c:	e7ee      	b.n	800b41c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800b43e:	4b04      	ldr	r3, [pc, #16]	; (800b450 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800b440:	2200      	movs	r2, #0
 800b442:	601a      	str	r2, [r3, #0]
}
 800b444:	bf00      	nop
 800b446:	371c      	adds	r7, #28
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	20000538 	.word	0x20000538
 800b454:	2000053c 	.word	0x2000053c

0800b458 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2100      	movs	r1, #0
 800b464:	4618      	mov	r0, r3
 800b466:	f7ff fe59 	bl	800b11c <_ZN10TestPluginC1EPS_>
 800b46a:	4a04      	ldr	r2, [pc, #16]	; (800b47c <_ZN14NullTestPluginC1Ev+0x24>)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	601a      	str	r2, [r3, #0]
{
}
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4618      	mov	r0, r3
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	080173a0 	.word	0x080173a0

0800b480 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800b480:	b580      	push	{r7, lr}
 800b482:	af00      	add	r7, sp, #0
 800b484:	4801      	ldr	r0, [pc, #4]	; (800b48c <__tcf_0+0xc>)
 800b486:	f000 f849 	bl	800b51c <_ZN14NullTestPluginD1Ev>
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	2000063c 	.word	0x2000063c

0800b490 <_ZN14NullTestPlugin8instanceEv>:
{
 800b490:	b580      	push	{r7, lr}
 800b492:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800b494:	4b12      	ldr	r3, [pc, #72]	; (800b4e0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	f3bf 8f5b 	dmb	ish
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	bf0c      	ite	eq
 800b4a6:	2301      	moveq	r3, #1
 800b4a8:	2300      	movne	r3, #0
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d013      	beq.n	800b4d8 <_ZN14NullTestPlugin8instanceEv+0x48>
 800b4b0:	480b      	ldr	r0, [pc, #44]	; (800b4e0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800b4b2:	f005 febf 	bl	8011234 <__cxa_guard_acquire>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	bf14      	ite	ne
 800b4bc:	2301      	movne	r3, #1
 800b4be:	2300      	moveq	r3, #0
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d008      	beq.n	800b4d8 <_ZN14NullTestPlugin8instanceEv+0x48>
 800b4c6:	4807      	ldr	r0, [pc, #28]	; (800b4e4 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800b4c8:	f7ff ffc6 	bl	800b458 <_ZN14NullTestPluginC1Ev>
 800b4cc:	4804      	ldr	r0, [pc, #16]	; (800b4e0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800b4ce:	f005 febd 	bl	801124c <__cxa_guard_release>
 800b4d2:	4805      	ldr	r0, [pc, #20]	; (800b4e8 <_ZN14NullTestPlugin8instanceEv+0x58>)
 800b4d4:	f005 fee1 	bl	801129a <atexit>
    return &_instance;
 800b4d8:	4b02      	ldr	r3, [pc, #8]	; (800b4e4 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20000650 	.word	0x20000650
 800b4e4:	2000063c 	.word	0x2000063c
 800b4e8:	0800b481 	.word	0x0800b481

0800b4ec <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
}
 800b4f8:	bf00      	nop
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
}
 800b510:	bf00      	nop
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	4a05      	ldr	r2, [pc, #20]	; (800b53c <_ZN14NullTestPluginD1Ev+0x20>)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff fe13 	bl	800b158 <_ZN10TestPluginD1Ev>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4618      	mov	r0, r3
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	080173a0 	.word	0x080173a0

0800b540 <_ZN14NullTestPluginD0Ev>:
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7ff ffe7 	bl	800b51c <_ZN14NullTestPluginD1Ev>
 800b54e:	2114      	movs	r1, #20
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7fa fb03 	bl	8005b5c <_ZdlPvj>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800b568:	4a0f      	ldr	r2, [pc, #60]	; (800b5a8 <_ZN12TestRegistryC1Ev+0x48>)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	605a      	str	r2, [r3, #4]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	609a      	str	r2, [r3, #8]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	60da      	str	r2, [r3, #12]
 800b580:	f7ff ff86 	bl	800b490 <_ZN14NullTestPlugin8instanceEv>
 800b584:	4602      	mov	r2, r0
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	611a      	str	r2, [r3, #16]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	751a      	strb	r2, [r3, #20]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	619a      	str	r2, [r3, #24]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	771a      	strb	r2, [r3, #28]
{
}
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3708      	adds	r7, #8
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	0801746c 	.word	0x0801746c

0800b5ac <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	4a04      	ldr	r2, [pc, #16]	; (800b5c8 <_ZN12TestRegistryD1Ev+0x1c>)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	601a      	str	r2, [r3, #0]
{
}
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	0801746c 	.word	0x0801746c

0800b5cc <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
}
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7ff ffe9 	bl	800b5ac <_ZN12TestRegistryD1Ev>
 800b5da:	2120      	movs	r1, #32
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7fa fabd 	bl	8005b5c <_ZdlPvj>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3308      	adds	r3, #8
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	6852      	ldr	r2, [r2, #4]
 800b602:	4611      	mov	r1, r2
 800b604:	6838      	ldr	r0, [r7, #0]
 800b606:	4798      	blx	r3
 800b608:	4602      	mov	r2, r0
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	605a      	str	r2, [r3, #4]
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800b620:	2301      	movs	r3, #1
 800b622:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	3308      	adds	r3, #8
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6838      	ldr	r0, [r7, #0]
 800b62e:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	60bb      	str	r3, [r7, #8]
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d05c      	beq.n	800b6f6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	7d1b      	ldrb	r3, [r3, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d005      	beq.n	800b650 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	3380      	adds	r3, #128	; 0x80
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68b8      	ldr	r0, [r7, #8]
 800b64e:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	7f1b      	ldrb	r3, [r3, #28]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d005      	beq.n	800b664 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3384      	adds	r3, #132	; 0x84
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68b8      	ldr	r0, [r7, #8]
 800b662:	4798      	blx	r3

        if (groupStart) {
 800b664:	7bfb      	ldrb	r3, [r7, #15]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d008      	beq.n	800b67c <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	3310      	adds	r3, #16
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68b9      	ldr	r1, [r7, #8]
 800b674:	6838      	ldr	r0, [r7, #0]
 800b676:	4798      	blx	r3
            groupStart = false;
 800b678:	2300      	movs	r3, #0
 800b67a:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3320      	adds	r3, #32
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6838      	ldr	r0, [r7, #0]
 800b686:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	68b9      	ldr	r1, [r7, #8]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fb79 	bl	800bd84 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d016      	beq.n	800b6c6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3318      	adds	r3, #24
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68b9      	ldr	r1, [r7, #8]
 800b6a2:	6838      	ldr	r0, [r7, #0]
 800b6a4:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3390      	adds	r3, #144	; 0x90
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	6911      	ldr	r1, [r2, #16]
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	68b8      	ldr	r0, [r7, #8]
 800b6b6:	4798      	blx	r3
            result.currentTestEnded(test);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	331c      	adds	r3, #28
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68b9      	ldr	r1, [r7, #8]
 800b6c2:	6838      	ldr	r0, [r7, #0]
 800b6c4:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800b6c6:	68b9      	ldr	r1, [r7, #8]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fa5b 	bl	800bb84 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d008      	beq.n	800b6e6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3314      	adds	r3, #20
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68b9      	ldr	r1, [r7, #8]
 800b6e2:	6838      	ldr	r0, [r7, #0]
 800b6e4:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	330c      	adds	r3, #12
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68b8      	ldr	r0, [r7, #8]
 800b6f0:	4798      	blx	r3
 800b6f2:	60b8      	str	r0, [r7, #8]
 800b6f4:	e79f      	b.n	800b636 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	330c      	adds	r3, #12
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6838      	ldr	r0, [r7, #0]
 800b700:	4798      	blx	r3
    currentRepetition_++;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	619a      	str	r2, [r3, #24]
}
 800b70c:	bf00      	nop
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800b714:	b590      	push	{r4, r7, lr}
 800b716:	b08f      	sub	sp, #60	; 0x3c
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800b71e:	f107 0314 	add.w	r3, r7, #20
 800b722:	4953      	ldr	r1, [pc, #332]	; (800b870 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800b724:	4618      	mov	r0, r3
 800b726:	f7fb f8ee 	bl	8006906 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	637b      	str	r3, [r7, #52]	; 0x34
 800b730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b732:	2b00      	cmp	r3, #0
 800b734:	d04d      	beq.n	800b7d2 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800b736:	f107 030c 	add.w	r3, r7, #12
 800b73a:	494d      	ldr	r1, [pc, #308]	; (800b870 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fb f8e2 	bl	8006906 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800b742:	f107 030c 	add.w	r3, r7, #12
 800b746:	494b      	ldr	r1, [pc, #300]	; (800b874 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fb fd23 	bl	8007194 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800b74e:	f107 031c 	add.w	r3, r7, #28
 800b752:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b754:	4618      	mov	r0, r3
 800b756:	f001 f9d2 	bl	800cafe <_ZNK10UtestShell8getGroupEv>
 800b75a:	f107 021c 	add.w	r2, r7, #28
 800b75e:	f107 030c 	add.w	r3, r7, #12
 800b762:	4611      	mov	r1, r2
 800b764:	4618      	mov	r0, r3
 800b766:	f7fb fd03 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800b76a:	f107 031c 	add.w	r3, r7, #28
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fb fc81 	bl	8007076 <_ZN12SimpleStringD1Ev>
        gname += "#";
 800b774:	f107 030c 	add.w	r3, r7, #12
 800b778:	493e      	ldr	r1, [pc, #248]	; (800b874 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fb fd0a 	bl	8007194 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800b780:	f107 020c 	add.w	r2, r7, #12
 800b784:	f107 0314 	add.w	r3, r7, #20
 800b788:	4611      	mov	r1, r2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fb f939 	bl	8006a02 <_ZNK12SimpleString8containsERKS_>
 800b790:	4603      	mov	r3, r0
 800b792:	f083 0301 	eor.w	r3, r3, #1
 800b796:	b2db      	uxtb	r3, r3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00d      	beq.n	800b7b8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800b79c:	f107 020c 	add.w	r2, r7, #12
 800b7a0:	f107 0314 	add.w	r3, r7, #20
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fb fce2 	bl	8007170 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800b7ac:	f107 0314 	add.w	r3, r7, #20
 800b7b0:	4931      	ldr	r1, [pc, #196]	; (800b878 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fb fcee 	bl	8007194 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800b7b8:	f107 030c 	add.w	r3, r7, #12
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7fb fc5a 	bl	8007076 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	330c      	adds	r3, #12
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b7cc:	4798      	blx	r3
 800b7ce:	6378      	str	r0, [r7, #52]	; 0x34
 800b7d0:	e7ae      	b.n	800b730 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800b7d2:	f107 0314 	add.w	r3, r7, #20
 800b7d6:	4a26      	ldr	r2, [pc, #152]	; (800b870 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800b7d8:	4926      	ldr	r1, [pc, #152]	; (800b874 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fb faa8 	bl	8006d30 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800b7e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7e4:	4924      	ldr	r1, [pc, #144]	; (800b878 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fb f88d 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800b7ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b7f0:	f107 0314 	add.w	r3, r7, #20
 800b7f4:	4611      	mov	r1, r2
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fb f982 	bl	8006b00 <_ZNK12SimpleString8endsWithERKS_>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	461c      	mov	r4, r3
 800b800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b804:	4618      	mov	r0, r3
 800b806:	f7fb fc36 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800b80a:	2c00      	cmp	r4, #0
 800b80c:	d01a      	beq.n	800b844 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800b80e:	f107 0314 	add.w	r3, r7, #20
 800b812:	4618      	mov	r0, r3
 800b814:	f7fb fc0e 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800b818:	4603      	mov	r3, r0
 800b81a:	3b01      	subs	r3, #1
 800b81c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800b820:	f107 0114 	add.w	r1, r7, #20
 800b824:	2200      	movs	r2, #0
 800b826:	f7fb fd2f 	bl	8007288 <_ZNK12SimpleString9subStringEjj>
 800b82a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b82e:	f107 0314 	add.w	r3, r7, #20
 800b832:	4611      	mov	r1, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f7fb f8d2 	bl	80069de <_ZN12SimpleStringaSERKS_>
 800b83a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fb fc19 	bl	8007076 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3338      	adds	r3, #56	; 0x38
 800b84a:	681c      	ldr	r4, [r3, #0]
 800b84c:	f107 0314 	add.w	r3, r7, #20
 800b850:	4618      	mov	r0, r3
 800b852:	f7fb fbe3 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800b856:	4603      	mov	r3, r0
 800b858:	4619      	mov	r1, r3
 800b85a:	6838      	ldr	r0, [r7, #0]
 800b85c:	47a0      	blx	r4
    SimpleString groupList;
 800b85e:	f107 0314 	add.w	r3, r7, #20
 800b862:	4618      	mov	r0, r3
 800b864:	f7fb fc07 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800b868:	bf00      	nop
 800b86a:	373c      	adds	r7, #60	; 0x3c
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd90      	pop	{r4, r7, pc}
 800b870:	08015b24 	.word	0x08015b24
 800b874:	08015b28 	.word	0x08015b28
 800b878:	08015b2c 	.word	0x08015b2c

0800b87c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800b87c:	b590      	push	{r4, r7, lr}
 800b87e:	b091      	sub	sp, #68	; 0x44
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800b886:	f107 0314 	add.w	r3, r7, #20
 800b88a:	4964      	ldr	r1, [pc, #400]	; (800ba1c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fb f83a 	bl	8006906 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d06e      	beq.n	800b97c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fa6e 	bl	800bd84 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d05e      	beq.n	800b96c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800b8ae:	f107 030c 	add.w	r3, r7, #12
 800b8b2:	495a      	ldr	r1, [pc, #360]	; (800ba1c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fb f826 	bl	8006906 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800b8ba:	f107 030c 	add.w	r3, r7, #12
 800b8be:	4958      	ldr	r1, [pc, #352]	; (800ba20 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fb fc67 	bl	8007194 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800b8c6:	f107 031c 	add.w	r3, r7, #28
 800b8ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f001 f916 	bl	800cafe <_ZNK10UtestShell8getGroupEv>
 800b8d2:	f107 021c 	add.w	r2, r7, #28
 800b8d6:	f107 030c 	add.w	r3, r7, #12
 800b8da:	4611      	mov	r1, r2
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fb fc47 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800b8e2:	f107 031c 	add.w	r3, r7, #28
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fb fbc5 	bl	8007076 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800b8ec:	f107 030c 	add.w	r3, r7, #12
 800b8f0:	494c      	ldr	r1, [pc, #304]	; (800ba24 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fb fc4e 	bl	8007194 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800b8f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8fe:	4618      	mov	r0, r3
 800b900:	f001 f8ee 	bl	800cae0 <_ZNK10UtestShell7getNameEv>
 800b904:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b908:	f107 030c 	add.w	r3, r7, #12
 800b90c:	4611      	mov	r1, r2
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fb fc2e 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800b914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fb fbac 	bl	8007076 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800b91e:	f107 030c 	add.w	r3, r7, #12
 800b922:	493f      	ldr	r1, [pc, #252]	; (800ba20 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800b924:	4618      	mov	r0, r3
 800b926:	f7fb fc35 	bl	8007194 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800b92a:	f107 020c 	add.w	r2, r7, #12
 800b92e:	f107 0314 	add.w	r3, r7, #20
 800b932:	4611      	mov	r1, r2
 800b934:	4618      	mov	r0, r3
 800b936:	f7fb f864 	bl	8006a02 <_ZNK12SimpleString8containsERKS_>
 800b93a:	4603      	mov	r3, r0
 800b93c:	f083 0301 	eor.w	r3, r3, #1
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00d      	beq.n	800b962 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800b946:	f107 020c 	add.w	r2, r7, #12
 800b94a:	f107 0314 	add.w	r3, r7, #20
 800b94e:	4611      	mov	r1, r2
 800b950:	4618      	mov	r0, r3
 800b952:	f7fb fc0d 	bl	8007170 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800b956:	f107 0314 	add.w	r3, r7, #20
 800b95a:	4933      	ldr	r1, [pc, #204]	; (800ba28 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fb fc19 	bl	8007194 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800b962:	f107 030c 	add.w	r3, r7, #12
 800b966:	4618      	mov	r0, r3
 800b968:	f7fb fb85 	bl	8007076 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	330c      	adds	r3, #12
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b976:	4798      	blx	r3
 800b978:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b97a:	e78d      	b.n	800b898 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800b97c:	f107 0314 	add.w	r3, r7, #20
 800b980:	4a26      	ldr	r2, [pc, #152]	; (800ba1c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800b982:	4927      	ldr	r1, [pc, #156]	; (800ba20 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800b984:	4618      	mov	r0, r3
 800b986:	f7fb f9d3 	bl	8006d30 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800b98a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b98e:	4926      	ldr	r1, [pc, #152]	; (800ba28 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800b990:	4618      	mov	r0, r3
 800b992:	f7fa ffb8 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800b996:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b99a:	f107 0314 	add.w	r3, r7, #20
 800b99e:	4611      	mov	r1, r2
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fb f8ad 	bl	8006b00 <_ZNK12SimpleString8endsWithERKS_>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	461c      	mov	r4, r3
 800b9aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fb fb61 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800b9b4:	2c00      	cmp	r4, #0
 800b9b6:	d01a      	beq.n	800b9ee <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800b9b8:	f107 0314 	add.w	r3, r7, #20
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fb fb39 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800b9ca:	f107 0114 	add.w	r1, r7, #20
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f7fb fc5a 	bl	8007288 <_ZNK12SimpleString9subStringEjj>
 800b9d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b9d8:	f107 0314 	add.w	r3, r7, #20
 800b9dc:	4611      	mov	r1, r2
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7fa fffd 	bl	80069de <_ZN12SimpleStringaSERKS_>
 800b9e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fb fb44 	bl	8007076 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3338      	adds	r3, #56	; 0x38
 800b9f4:	681c      	ldr	r4, [r3, #0]
 800b9f6:	f107 0314 	add.w	r3, r7, #20
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fb fb0e 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800ba00:	4603      	mov	r3, r0
 800ba02:	4619      	mov	r1, r3
 800ba04:	6838      	ldr	r0, [r7, #0]
 800ba06:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800ba08:	f107 0314 	add.w	r3, r7, #20
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7fb fb32 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800ba12:	bf00      	nop
 800ba14:	3744      	adds	r7, #68	; 0x44
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd90      	pop	{r4, r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	08015b24 	.word	0x08015b24
 800ba20:	08015b28 	.word	0x08015b28
 800ba24:	08015b30 	.word	0x08015b30
 800ba28:	08015b2c 	.word	0x08015b2c

0800ba2c <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800ba2c:	b590      	push	{r4, r7, lr}
 800ba2e:	b091      	sub	sp, #68	; 0x44
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800ba36:	f107 0314 	add.w	r3, r7, #20
 800ba3a:	494f      	ldr	r1, [pc, #316]	; (800bb78 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fa ff62 	bl	8006906 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d07d      	beq.n	800bb4a <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800ba4e:	f107 030c 	add.w	r3, r7, #12
 800ba52:	4949      	ldr	r1, [pc, #292]	; (800bb78 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fa ff56 	bl	8006906 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800ba5a:	f107 031c 	add.w	r3, r7, #28
 800ba5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba60:	4618      	mov	r0, r3
 800ba62:	f001 f84c 	bl	800cafe <_ZNK10UtestShell8getGroupEv>
 800ba66:	f107 021c 	add.w	r2, r7, #28
 800ba6a:	f107 030c 	add.w	r3, r7, #12
 800ba6e:	4611      	mov	r1, r2
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7fb fb7d 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800ba76:	f107 031c 	add.w	r3, r7, #28
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fb fafb 	bl	8007076 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800ba80:	f107 030c 	add.w	r3, r7, #12
 800ba84:	493d      	ldr	r1, [pc, #244]	; (800bb7c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fb fb84 	bl	8007194 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800ba8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba92:	4618      	mov	r0, r3
 800ba94:	f001 f824 	bl	800cae0 <_ZNK10UtestShell7getNameEv>
 800ba98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ba9c:	f107 030c 	add.w	r3, r7, #12
 800baa0:	4611      	mov	r1, r2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fb fb64 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800baa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baac:	4618      	mov	r0, r3
 800baae:	f7fb fae2 	bl	8007076 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800bab2:	f107 030c 	add.w	r3, r7, #12
 800bab6:	4931      	ldr	r1, [pc, #196]	; (800bb7c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fb fb6b 	bl	8007194 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800babe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bac4:	4618      	mov	r0, r3
 800bac6:	f001 f8cb 	bl	800cc60 <_ZNK10UtestShell7getFileEv>
 800baca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bace:	f107 030c 	add.w	r3, r7, #12
 800bad2:	4611      	mov	r1, r2
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fb fb4b 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800bada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fb fac9 	bl	8007076 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800bae4:	f107 030c 	add.w	r3, r7, #12
 800bae8:	4924      	ldr	r1, [pc, #144]	; (800bb7c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800baea:	4618      	mov	r0, r3
 800baec:	f7fb fb52 	bl	8007194 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800baf0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800baf2:	f001 f8c4 	bl	800cc7e <_ZNK10UtestShell13getLineNumberEv>
 800baf6:	4603      	mov	r3, r0
 800baf8:	461a      	mov	r2, r3
 800bafa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bafe:	4920      	ldr	r1, [pc, #128]	; (800bb80 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fb ff45 	bl	8007990 <_Z16StringFromFormatPKcz>
 800bb06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800bb0a:	f107 030c 	add.w	r3, r7, #12
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fb fb2d 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800bb16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fb faab 	bl	8007076 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800bb20:	f107 020c 	add.w	r2, r7, #12
 800bb24:	f107 0314 	add.w	r3, r7, #20
 800bb28:	4611      	mov	r1, r2
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fb fb20 	bl	8007170 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800bb30:	f107 030c 	add.w	r3, r7, #12
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fb fa9e 	bl	8007076 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800bb3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	330c      	adds	r3, #12
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bb44:	4798      	blx	r3
 800bb46:	63f8      	str	r0, [r7, #60]	; 0x3c
 800bb48:	e77e      	b.n	800ba48 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	3338      	adds	r3, #56	; 0x38
 800bb50:	681c      	ldr	r4, [r3, #0]
 800bb52:	f107 0314 	add.w	r3, r7, #20
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fb fa60 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6838      	ldr	r0, [r7, #0]
 800bb62:	47a0      	blx	r4
    SimpleString testLocations;
 800bb64:	f107 0314 	add.w	r3, r7, #20
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fb fa84 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800bb6e:	bf00      	nop
 800bb70:	3744      	adds	r7, #68	; 0x44
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd90      	pop	{r4, r7, pc}
 800bb76:	bf00      	nop
 800bb78:	08015b24 	.word	0x08015b24
 800bb7c:	08015b30 	.word	0x08015b30
 800bb80:	08015b34 	.word	0x08015b34

0800bb84 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800bb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb86:	b087      	sub	sp, #28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800bb8e:	2400      	movs	r4, #0
 800bb90:	2500      	movs	r5, #0
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d028      	beq.n	800bbea <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	330c      	adds	r3, #12
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6838      	ldr	r0, [r7, #0]
 800bba2:	4798      	blx	r3
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d01f      	beq.n	800bbea <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800bbaa:	f107 0308 	add.w	r3, r7, #8
 800bbae:	6839      	ldr	r1, [r7, #0]
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 ffa4 	bl	800cafe <_ZNK10UtestShell8getGroupEv>
 800bbb6:	2401      	movs	r4, #1
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	330c      	adds	r3, #12
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6838      	ldr	r0, [r7, #0]
 800bbc2:	4798      	blx	r3
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	f107 0310 	add.w	r3, r7, #16
 800bbca:	4611      	mov	r1, r2
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 ff96 	bl	800cafe <_ZNK10UtestShell8getGroupEv>
 800bbd2:	2501      	movs	r5, #1
 800bbd4:	f107 0210 	add.w	r2, r7, #16
 800bbd8:	f107 0308 	add.w	r3, r7, #8
 800bbdc:	4611      	mov	r1, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fb fa9a 	bl	8007118 <_ZneRK12SimpleStringS1_>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d001      	beq.n	800bbee <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800bbea:	2601      	movs	r6, #1
 800bbec:	e000      	b.n	800bbf0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800bbee:	2600      	movs	r6, #0
 800bbf0:	2d00      	cmp	r5, #0
 800bbf2:	d004      	beq.n	800bbfe <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800bbf4:	f107 0310 	add.w	r3, r7, #16
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fb fa3c 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800bbfe:	2c00      	cmp	r4, #0
 800bc00:	d004      	beq.n	800bc0c <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800bc02:	f107 0308 	add.w	r3, r7, #8
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fb fa35 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800bc0c:	4633      	mov	r3, r6
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	371c      	adds	r7, #28
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc16 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b082      	sub	sp, #8
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00a      	beq.n	800bc3c <_ZN12TestRegistry10countTestsEv+0x26>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	685a      	ldr	r2, [r3, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3310      	adds	r3, #16
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4610      	mov	r0, r2
 800bc36:	4798      	blx	r3
 800bc38:	4603      	mov	r3, r0
 800bc3a:	e000      	b.n	800bc3e <_ZN12TestRegistry10countTestsEv+0x28>
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
	...

0800bc48 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	4801      	ldr	r0, [pc, #4]	; (800bc54 <__tcf_0+0xc>)
 800bc4e:	f7ff fcad 	bl	800b5ac <_ZN12TestRegistryD1Ev>
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	20000658 	.word	0x20000658

0800bc58 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800bc5c:	4b15      	ldr	r3, [pc, #84]	; (800bcb4 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	f3bf 8f5b 	dmb	ish
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	f003 0301 	and.w	r3, r3, #1
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	bf0c      	ite	eq
 800bc6e:	2301      	moveq	r3, #1
 800bc70:	2300      	movne	r3, #0
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d013      	beq.n	800bca0 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800bc78:	480e      	ldr	r0, [pc, #56]	; (800bcb4 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800bc7a:	f005 fadb 	bl	8011234 <__cxa_guard_acquire>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	bf14      	ite	ne
 800bc84:	2301      	movne	r3, #1
 800bc86:	2300      	moveq	r3, #0
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d008      	beq.n	800bca0 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800bc8e:	480a      	ldr	r0, [pc, #40]	; (800bcb8 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800bc90:	f7ff fc66 	bl	800b560 <_ZN12TestRegistryC1Ev>
 800bc94:	4807      	ldr	r0, [pc, #28]	; (800bcb4 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800bc96:	f005 fad9 	bl	801124c <__cxa_guard_release>
 800bc9a:	4808      	ldr	r0, [pc, #32]	; (800bcbc <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800bc9c:	f005 fafd 	bl	801129a <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800bca0:	4b07      	ldr	r3, [pc, #28]	; (800bcc0 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800bca8:	4b05      	ldr	r3, [pc, #20]	; (800bcc0 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	e000      	b.n	800bcb0 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800bcae:	4b02      	ldr	r3, [pc, #8]	; (800bcb8 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	20000678 	.word	0x20000678
 800bcb8:	20000658 	.word	0x20000658
 800bcbc:	0800bc49 	.word	0x0800bc49
 800bcc0:	20000654 	.word	0x20000654

0800bcc4 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800bcce:	4a04      	ldr	r2, [pc, #16]	; (800bce0 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	6013      	str	r3, [r2, #0]
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	20000654 	.word	0x20000654

0800bce4 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00a      	beq.n	800bd0a <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	685a      	ldr	r2, [r3, #4]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	330c      	adds	r3, #12
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4610      	mov	r0, r2
 800bd04:	4798      	blx	r3
 800bd06:	4603      	mov	r3, r0
 800bd08:	e000      	b.n	800bd0c <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	6053      	str	r3, [r2, #4]

}
 800bd10:	bf00      	nop
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	609a      	str	r2, [r3, #8]
}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	60da      	str	r2, [r3, #12]
}
 800bd44:	bf00      	nop
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	771a      	strb	r2, [r3, #28]
}
 800bd5e:	bf00      	nop
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800bd6a:	b480      	push	{r7}
 800bd6c:	b083      	sub	sp, #12
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	751a      	strb	r2, [r3, #20]
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	68d9      	ldr	r1, [r3, #12]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	68b8      	ldr	r0, [r7, #8]
 800bd9c:	f000 ffaa 	bl	800ccf4 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e006      	b.n	800bdb8 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	332c      	adds	r3, #44	; 0x2c
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	4798      	blx	r3
        return false;
 800bdb6:	2300      	movs	r3, #0
    }
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800bdc8:	f7ff fb62 	bl	800b490 <_ZN14NullTestPlugin8instanceEv>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	611a      	str	r2, [r3, #16]
}
 800bdd2:	bf00      	nop
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b082      	sub	sp, #8
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3324      	adds	r3, #36	; 0x24
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6912      	ldr	r2, [r2, #16]
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	6838      	ldr	r0, [r7, #0]
 800bdf4:	4798      	blx	r3
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	611a      	str	r2, [r3, #16]
}
 800bdfc:	bf00      	nop
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	691b      	ldr	r3, [r3, #16]
}
 800be10:	4618      	mov	r0, r3
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7ff fa52 	bl	800b2d6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800be32:	4603      	mov	r3, r0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	691a      	ldr	r2, [r3, #16]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	3328      	adds	r3, #40	; 0x28
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	4610      	mov	r0, r2
 800be58:	4798      	blx	r3
 800be5a:	4602      	mov	r2, r0
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	429a      	cmp	r2, r3
 800be62:	bf0c      	ite	eq
 800be64:	2301      	moveq	r3, #1
 800be66:	2300      	movne	r3, #0
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00b      	beq.n	800be86 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	691a      	ldr	r2, [r3, #16]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	332c      	adds	r3, #44	; 0x2c
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4610      	mov	r0, r2
 800be7e:	4798      	blx	r3
 800be80:	4602      	mov	r2, r0
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff fa17 	bl	800b2be <_ZN10TestPlugin7getNameEv>
 800be90:	4603      	mov	r3, r0
 800be92:	6839      	ldr	r1, [r7, #0]
 800be94:	4618      	mov	r0, r3
 800be96:	f7fb f8fa 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00b      	beq.n	800beb8 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	691a      	ldr	r2, [r3, #16]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	332c      	adds	r3, #44	; 0x2c
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4610      	mov	r0, r2
 800beb0:	4798      	blx	r3
 800beb2:	4602      	mov	r2, r0
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	691a      	ldr	r2, [r3, #16]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3328      	adds	r3, #40	; 0x28
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	4610      	mov	r0, r2
 800beca:	4798      	blx	r3
}
 800becc:	bf00      	nop
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
    int count = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	60bb      	str	r3, [r7, #8]
 800bee6:	f7ff fad3 	bl	800b490 <_ZN14NullTestPlugin8instanceEv>
 800beea:	4602      	mov	r2, r0
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	4293      	cmp	r3, r2
 800bef0:	bf14      	ite	ne
 800bef2:	2301      	movne	r3, #1
 800bef4:	2300      	moveq	r3, #0
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00a      	beq.n	800bf12 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3301      	adds	r3, #1
 800bf00:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	332c      	adds	r3, #44	; 0x2c
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	68b8      	ldr	r0, [r7, #8]
 800bf0c:	4798      	blx	r3
 800bf0e:	60b8      	str	r0, [r7, #8]
 800bf10:	e7e9      	b.n	800bee6 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800bf12:	68fb      	ldr	r3, [r7, #12]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
    return tests_;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	334c      	adds	r3, #76	; 0x4c
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	4798      	blx	r3
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	f107 0308 	add.w	r3, r7, #8
 800bf50:	4611      	mov	r1, r2
 800bf52:	4618      	mov	r0, r3
 800bf54:	f002 f8e6 	bl	800e124 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800bf58:	f107 0308 	add.w	r3, r7, #8
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f002 f96e 	bl	800e240 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800bf64:	f107 0308 	add.w	r3, r7, #8
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f002 fa01 	bl	800e370 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800bf74:	f107 0308 	add.w	r3, r7, #8
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f002 f927 	bl	800e1cc <_ZN22UtestShellPointerArrayD1Ev>
}
 800bf7e:	bf00      	nop
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	334c      	adds	r3, #76	; 0x4c
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	4798      	blx	r3
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	f107 0308 	add.w	r3, r7, #8
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f002 f8be 	bl	800e124 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800bfa8:	f107 0308 	add.w	r3, r7, #8
 800bfac:	4618      	mov	r0, r3
 800bfae:	f002 f983 	bl	800e2b8 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800bfb2:	f107 0308 	add.w	r3, r7, #8
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f002 f9da 	bl	800e370 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800bfc2:	f107 0308 	add.w	r3, r7, #8
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f002 f900 	bl	800e1cc <_ZN22UtestShellPointerArrayD1Ev>
}
 800bfcc:	bf00      	nop
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d00b      	beq.n	800c002 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	330c      	adds	r3, #12
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	4798      	blx	r3
 800bff6:	4602      	mov	r2, r0
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d001      	beq.n	800c002 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800bffe:	2301      	movs	r3, #1
 800c000:	e000      	b.n	800c004 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800c002:	2300      	movs	r3, #0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d007      	beq.n	800c018 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	330c      	adds	r3, #12
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	4798      	blx	r3
 800c014:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800c016:	e7e5      	b.n	800bfe4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800c018:	68fb      	ldr	r3, [r7, #12]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800c022:	b590      	push	{r4, r7, lr}
 800c024:	b087      	sub	sp, #28
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	617b      	str	r3, [r7, #20]
    while (current) {
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d01e      	beq.n	800c076 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800c038:	f107 030c 	add.w	r3, r7, #12
 800c03c:	6979      	ldr	r1, [r7, #20]
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 fd4e 	bl	800cae0 <_ZNK10UtestShell7getNameEv>
 800c044:	f107 030c 	add.w	r3, r7, #12
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fb f81f 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800c050:	4603      	mov	r3, r0
 800c052:	461c      	mov	r4, r3
 800c054:	f107 030c 	add.w	r3, r7, #12
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fb f80c 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800c05e:	2c00      	cmp	r4, #0
 800c060:	d001      	beq.n	800c066 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	e008      	b.n	800c078 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	330c      	adds	r3, #12
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6978      	ldr	r0, [r7, #20]
 800c070:	4798      	blx	r3
 800c072:	6178      	str	r0, [r7, #20]
    while (current) {
 800c074:	e7dd      	b.n	800c032 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	371c      	adds	r7, #28
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd90      	pop	{r4, r7, pc}

0800c080 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800c080:	b590      	push	{r4, r7, lr}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	617b      	str	r3, [r7, #20]
    while (current) {
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d01e      	beq.n	800c0d4 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800c096:	f107 030c 	add.w	r3, r7, #12
 800c09a:	6979      	ldr	r1, [r7, #20]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 fd2e 	bl	800cafe <_ZNK10UtestShell8getGroupEv>
 800c0a2:	f107 030c 	add.w	r3, r7, #12
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fa fff0 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	461c      	mov	r4, r3
 800c0b2:	f107 030c 	add.w	r3, r7, #12
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fa ffdd 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800c0bc:	2c00      	cmp	r4, #0
 800c0be:	d001      	beq.n	800c0c4 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	e008      	b.n	800c0d6 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	330c      	adds	r3, #12
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6978      	ldr	r0, [r7, #20]
 800c0ce:	4798      	blx	r3
 800c0d0:	6178      	str	r0, [r7, #20]
    while (current) {
 800c0d2:	e7dd      	b.n	800c090 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	371c      	adds	r7, #28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd90      	pop	{r4, r7, pc}
	...

0800c0e0 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800c0ea:	4a18      	ldr	r2, [pc, #96]	; (800c14c <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	683a      	ldr	r2, [r7, #0]
 800c0f4:	605a      	str	r2, [r3, #4]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	609a      	str	r2, [r3, #8]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	60da      	str	r2, [r3, #12]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	611a      	str	r2, [r3, #16]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	615a      	str	r2, [r3, #20]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	619a      	str	r2, [r3, #24]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	61da      	str	r2, [r3, #28]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	621a      	str	r2, [r3, #32]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	625a      	str	r2, [r3, #36]	; 0x24
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	629a      	str	r2, [r3, #40]	; 0x28
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	62da      	str	r2, [r3, #44]	; 0x2c
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	631a      	str	r2, [r3, #48]	; 0x30
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4618      	mov	r0, r3
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	080174d8 	.word	0x080174d8

0800c150 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	4a04      	ldr	r2, [pc, #16]	; (800c16c <_ZN10TestResultD1Ev+0x1c>)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	601a      	str	r2, [r3, #0]
{
}
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4618      	mov	r0, r3
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	080174d8 	.word	0x080174d8

0800c170 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
}
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7ff ffe9 	bl	800c150 <_ZN10TestResultD1Ev>
 800c17e:	2138      	movs	r1, #56	; 0x38
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7f9 fceb 	bl	8005b5c <_ZdlPvj>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4618      	mov	r0, r3
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	685a      	ldr	r2, [r3, #4]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3318      	adds	r3, #24
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800c1ae:	4b05      	ldr	r3, [pc, #20]	; (800c1c4 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4798      	blx	r3
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c1bc:	bf00      	nop
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	200000a4 	.word	0x200000a4

0800c1c8 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800c1d2:	4b0c      	ldr	r3, [pc, #48]	; (800c204 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4798      	blx	r3
 800c1d8:	4603      	mov	r3, r0
 800c1da:	461a      	mov	r2, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e0:	1ad2      	subs	r2, r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	331c      	adds	r3, #28
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6879      	ldr	r1, [r7, #4]
 800c1f6:	4610      	mov	r0, r2
 800c1f8:	4798      	blx	r3
}
 800c1fa:	bf00      	nop
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	200000a4 	.word	0x200000a4

0800c208 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	3310      	adds	r3, #16
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	4610      	mov	r0, r2
 800c224:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800c226:	4b05      	ldr	r3, [pc, #20]	; (800c23c <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4798      	blx	r3
 800c22c:	4603      	mov	r3, r0
 800c22e:	461a      	mov	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c234:	bf00      	nop
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	200000a4 	.word	0x200000a4

0800c240 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	332c      	adds	r3, #44	; 0x2c
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6839      	ldr	r1, [r7, #0]
 800c25a:	4610      	mov	r0, r2
 800c25c:	4798      	blx	r3
}
 800c25e:	bf00      	nop
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b082      	sub	sp, #8
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
 800c26e:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	3348      	adds	r3, #72	; 0x48
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	4610      	mov	r0, r2
 800c282:	4798      	blx	r3
}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800c296:	4b0c      	ldr	r3, [pc, #48]	; (800c2c8 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4798      	blx	r3
 800c29c:	4603      	mov	r3, r0
 800c29e:	461a      	mov	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a4:	1ad2      	subs	r2, r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685a      	ldr	r2, [r3, #4]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	3314      	adds	r3, #20
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	6879      	ldr	r1, [r7, #4]
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	4798      	blx	r3

}
 800c2be:	bf00      	nop
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	200000a4 	.word	0x200000a4

0800c2cc <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	685a      	ldr	r2, [r3, #4]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	333c      	adds	r3, #60	; 0x3c
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	4798      	blx	r3
    failureCount_++;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	1c5a      	adds	r2, r3, #1
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	615a      	str	r2, [r3, #20]
}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
    testCount_++;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	1c5a      	adds	r2, r3, #1
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	609a      	str	r2, [r3, #8]
}
 800c30e:	bf00      	nop
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800c31a:	b480      	push	{r7}
 800c31c:	b083      	sub	sp, #12
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
    runCount_++;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	1c5a      	adds	r2, r3, #1
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	60da      	str	r2, [r3, #12]
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	1c5a      	adds	r2, r3, #1
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	611a      	str	r2, [r3, #16]
}
 800c34a:	bf00      	nop
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800c356:	b480      	push	{r7}
 800c358:	b083      	sub	sp, #12
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	1c5a      	adds	r2, r3, #1
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	619a      	str	r2, [r3, #24]
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	69db      	ldr	r3, [r3, #28]
 800c380:	1c5a      	adds	r2, r3, #1
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	61da      	str	r2, [r3, #28]
}
 800c386:	bf00      	nop
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
	...

0800c394 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800c39c:	4b09      	ldr	r3, [pc, #36]	; (800c3c4 <_ZN10TestResult12testsStartedEv+0x30>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4798      	blx	r3
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	685a      	ldr	r2, [r3, #4]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	4798      	blx	r3
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	200000a4 	.word	0x200000a4

0800c3c8 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800c3d0:	4b0c      	ldr	r3, [pc, #48]	; (800c404 <_ZN10TestResult10testsEndedEv+0x3c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4798      	blx	r3
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	1ad2      	subs	r2, r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	685a      	ldr	r2, [r3, #4]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	330c      	adds	r3, #12
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6879      	ldr	r1, [r7, #4]
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	4798      	blx	r3
}
 800c3fa:	bf00      	nop
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	200000a4 	.word	0x200000a4

0800c408 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a1b      	ldr	r3, [r3, #32]
}
 800c414:	4618      	mov	r0, r3
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800c444:	4618      	mov	r0, r3
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800c450:	b590      	push	{r4, r7, lr}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	ed87 0b04 	vstr	d0, [r7, #16]
 800c45a:	ed87 1b02 	vstr	d1, [r7, #8]
 800c45e:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800c462:	4b2c      	ldr	r3, [pc, #176]	; (800c514 <_Z13doubles_equalddd+0xc4>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	ed97 0b04 	vldr	d0, [r7, #16]
 800c46a:	4798      	blx	r3
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10f      	bne.n	800c492 <_Z13doubles_equalddd+0x42>
 800c472:	4b28      	ldr	r3, [pc, #160]	; (800c514 <_Z13doubles_equalddd+0xc4>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	ed97 0b02 	vldr	d0, [r7, #8]
 800c47a:	4798      	blx	r3
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d107      	bne.n	800c492 <_Z13doubles_equalddd+0x42>
 800c482:	4b24      	ldr	r3, [pc, #144]	; (800c514 <_Z13doubles_equalddd+0xc4>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	ed97 0b00 	vldr	d0, [r7]
 800c48a:	4798      	blx	r3
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <_Z13doubles_equalddd+0x46>
 800c492:	2301      	movs	r3, #1
 800c494:	e000      	b.n	800c498 <_Z13doubles_equalddd+0x48>
 800c496:	2300      	movs	r3, #0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <_Z13doubles_equalddd+0x50>
        return false;
 800c49c:	2300      	movs	r3, #0
 800c49e:	e035      	b.n	800c50c <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800c4a0:	4b1d      	ldr	r3, [pc, #116]	; (800c518 <_Z13doubles_equalddd+0xc8>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	ed97 0b04 	vldr	d0, [r7, #16]
 800c4a8:	4798      	blx	r3
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d009      	beq.n	800c4c4 <_Z13doubles_equalddd+0x74>
 800c4b0:	4b19      	ldr	r3, [pc, #100]	; (800c518 <_Z13doubles_equalddd+0xc8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	ed97 0b02 	vldr	d0, [r7, #8]
 800c4b8:	4798      	blx	r3
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d001      	beq.n	800c4c4 <_Z13doubles_equalddd+0x74>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	e000      	b.n	800c4c6 <_Z13doubles_equalddd+0x76>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e01e      	b.n	800c50c <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800c4ce:	4b13      	ldr	r3, [pc, #76]	; (800c51c <_Z13doubles_equalddd+0xcc>)
 800c4d0:	681c      	ldr	r4, [r3, #0]
 800c4d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c4da:	f7f3 ff15 	bl	8000308 <__aeabi_dsub>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	ec43 2b17 	vmov	d7, r2, r3
 800c4e6:	eeb0 0a47 	vmov.f32	s0, s14
 800c4ea:	eef0 0a67 	vmov.f32	s1, s15
 800c4ee:	47a0      	blx	r4
 800c4f0:	ec53 2b10 	vmov	r2, r3, d0
 800c4f4:	2101      	movs	r1, #1
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4fc:	f7f4 f930 	bl	8000760 <__aeabi_dcmpge>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d101      	bne.n	800c50a <_Z13doubles_equalddd+0xba>
 800c506:	2300      	movs	r3, #0
 800c508:	461c      	mov	r4, r3
 800c50a:	b2e3      	uxtb	r3, r4
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	371c      	adds	r7, #28
 800c510:	46bd      	mov	sp, r7
 800c512:	bd90      	pop	{r4, r7, pc}
 800c514:	200000e0 	.word	0x200000e0
 800c518:	200000e4 	.word	0x200000e4
 800c51c:	200000d4 	.word	0x200000d4

0800c520 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	332c      	adds	r3, #44	; 0x2c
    }
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
    {
 800c540:	4a0a      	ldr	r2, [pc, #40]	; (800c56c <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	332c      	adds	r3, #44	; 0x2c
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7ff fe00 	bl	800c150 <_ZN10TestResultD1Ev>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	331c      	adds	r3, #28
 800c554:	4618      	mov	r0, r3
 800c556:	f7f7 fdfd 	bl	8004154 <_ZN17ConsoleTestOutputD1Ev>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 f943 	bl	800c7e8 <_ZN10UtestShellD1Ev>
    }
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4618      	mov	r0, r3
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	08017520 	.word	0x08017520

0800c570 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
    }
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff ffdd 	bl	800c538 <_ZN22OutsideTestRunnerUTestD1Ev>
 800c57e:	2164      	movs	r1, #100	; 0x64
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7f9 faeb 	bl	8005b5c <_ZdlPvj>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af02      	add	r7, sp, #8
 800c596:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	2300      	movs	r3, #0
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	4b0d      	ldr	r3, [pc, #52]	; (800c5d4 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 800c5a0:	4a0d      	ldr	r2, [pc, #52]	; (800c5d8 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 800c5a2:	490e      	ldr	r1, [pc, #56]	; (800c5dc <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 800c5a4:	f000 f8f8 	bl	800c798 <_ZN10UtestShellC1EPKcS1_S1_j>
 800c5a8:	4a0d      	ldr	r2, [pc, #52]	; (800c5e0 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	601a      	str	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	331c      	adds	r3, #28
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7f7 fdbc 	bl	8004130 <_ZN17ConsoleTestOutputC1Ev>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	331c      	adds	r3, #28
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	4610      	mov	r0, r2
 800c5c6:	f7ff fd8b 	bl	800c0e0 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	08015b38 	.word	0x08015b38
 800c5d8:	08015b48 	.word	0x08015b48
 800c5dc:	08015b88 	.word	0x08015b88
 800c5e0:	08017520 	.word	0x08017520

0800c5e4 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	4801      	ldr	r0, [pc, #4]	; (800c5f0 <__tcf_0+0xc>)
 800c5ea:	f7ff ffa5 	bl	800c538 <_ZN22OutsideTestRunnerUTestD1Ev>
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	2000067c 	.word	0x2000067c

0800c5f4 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 800c5f8:	4b12      	ldr	r3, [pc, #72]	; (800c644 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	f3bf 8f5b 	dmb	ish
 800c600:	b2db      	uxtb	r3, r3
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	bf0c      	ite	eq
 800c60a:	2301      	moveq	r3, #1
 800c60c:	2300      	movne	r3, #0
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b00      	cmp	r3, #0
 800c612:	d013      	beq.n	800c63c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800c614:	480b      	ldr	r0, [pc, #44]	; (800c644 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800c616:	f004 fe0d 	bl	8011234 <__cxa_guard_acquire>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	bf14      	ite	ne
 800c620:	2301      	movne	r3, #1
 800c622:	2300      	moveq	r3, #0
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	d008      	beq.n	800c63c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800c62a:	4807      	ldr	r0, [pc, #28]	; (800c648 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 800c62c:	f7ff ffb0 	bl	800c590 <_ZN22OutsideTestRunnerUTestC1Ev>
 800c630:	4804      	ldr	r0, [pc, #16]	; (800c644 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800c632:	f004 fe0b 	bl	801124c <__cxa_guard_release>
 800c636:	4805      	ldr	r0, [pc, #20]	; (800c64c <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 800c638:	f004 fe2f 	bl	801129a <atexit>
    return instance_;
 800c63c:	4b02      	ldr	r3, [pc, #8]	; (800c648 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 800c63e:	4618      	mov	r0, r3
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	200006e0 	.word	0x200006e0
 800c648:	2000067c 	.word	0x2000067c
 800c64c:	0800c5e5 	.word	0x0800c5e5

0800c650 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	330c      	adds	r3, #12
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	4798      	blx	r3
    }
 800c664:	bf00      	nop
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3314      	adds	r3, #20
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	4798      	blx	r3
    }
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3310      	adds	r3, #16
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	4798      	blx	r3
    }
 800c69c:	bf00      	nop
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
 800c6b0:	603b      	str	r3, [r7, #0]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	68ba      	ldr	r2, [r7, #8]
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	605a      	str	r2, [r3, #4]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	609a      	str	r2, [r3, #8]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr

0800c6d2 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b086      	sub	sp, #24
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	3394      	adds	r3, #148	; 0x94
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	68f9      	ldr	r1, [r7, #12]
 800c6fc:	6938      	ldr	r0, [r7, #16]
 800c6fe:	4798      	blx	r3
    }
 800c700:	bf00      	nop
 800c702:	3718      	adds	r7, #24
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 800c726:	4b05      	ldr	r3, [pc, #20]	; (800c73c <helperDoRunOneTestSeperateProcess+0x34>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68ba      	ldr	r2, [r7, #8]
 800c72c:	68f9      	ldr	r1, [r7, #12]
 800c72e:	6938      	ldr	r0, [r7, #16]
 800c730:	4798      	blx	r3
    }
 800c732:	bf00      	nop
 800c734:	3718      	adds	r7, #24
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	20000098 	.word	0x20000098

0800c740 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800c748:	4a0f      	ldr	r2, [pc, #60]	; (800c788 <_ZN10UtestShellC1Ev+0x48>)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a0e      	ldr	r2, [pc, #56]	; (800c78c <_ZN10UtestShellC1Ev+0x4c>)
 800c752:	605a      	str	r2, [r3, #4]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a0e      	ldr	r2, [pc, #56]	; (800c790 <_ZN10UtestShellC1Ev+0x50>)
 800c758:	609a      	str	r2, [r3, #8]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a0d      	ldr	r2, [pc, #52]	; (800c794 <_ZN10UtestShellC1Ev+0x54>)
 800c75e:	60da      	str	r2, [r3, #12]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	611a      	str	r2, [r3, #16]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	615a      	str	r2, [r3, #20]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	761a      	strb	r2, [r3, #24]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	765a      	strb	r2, [r3, #25]
{
}
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4618      	mov	r0, r3
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	080175e0 	.word	0x080175e0
 800c78c:	08015bd4 	.word	0x08015bd4
 800c790:	08015be8 	.word	0x08015be8
 800c794:	08015bf8 	.word	0x08015bf8

0800c798 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
 800c7a4:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800c7a6:	4a0f      	ldr	r2, [pc, #60]	; (800c7e4 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	601a      	str	r2, [r3, #0]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	605a      	str	r2, [r3, #4]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	609a      	str	r2, [r3, #8]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	60da      	str	r2, [r3, #12]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	69ba      	ldr	r2, [r7, #24]
 800c7c2:	611a      	str	r2, [r3, #16]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	615a      	str	r2, [r3, #20]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	761a      	strb	r2, [r3, #24]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	765a      	strb	r2, [r3, #25]
{
}
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	080175e0 	.word	0x080175e0

0800c7e8 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	4a04      	ldr	r2, [pc, #16]	; (800c804 <_ZN10UtestShellD1Ev+0x1c>)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	601a      	str	r2, [r3, #0]
{
}
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr
 800c804:	080175e0 	.word	0x080175e0

0800c808 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
}
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff ffe9 	bl	800c7e8 <_ZN10UtestShellD1Ev>
 800c816:	211c      	movs	r1, #28
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7f9 f99f 	bl	8005b5c <_ZdlPvj>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 800c82e:	2300      	movs	r3, #0
 800c830:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	3310      	adds	r3, #16
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	4798      	blx	r3
}
 800c83e:	bf00      	nop
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 800c84c:	4b02      	ldr	r3, [pc, #8]	; (800c858 <_ZN10UtestShell5crashEv+0x10>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4798      	blx	r3
}
 800c852:	bf00      	nop
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	20000094 	.word	0x20000094

0800c85c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	765a      	strb	r2, [r3, #25]
    result.countRun();
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	3324      	adds	r3, #36	; 0x24
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 800c87a:	f107 0014 	add.w	r0, r7, #20
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	68f9      	ldr	r1, [r7, #12]
 800c884:	f7ff ff0e 	bl	800c6a4 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	337c      	adds	r3, #124	; 0x7c
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	4798      	blx	r3
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d007      	beq.n	800c8aa <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 800c89a:	4b09      	ldr	r3, [pc, #36]	; (800c8c0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f107 0214 	add.w	r2, r7, #20
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	4807      	ldr	r0, [pc, #28]	; (800c8c4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 800c8a6:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 800c8a8:	e006      	b.n	800c8b8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 800c8aa:	4b05      	ldr	r3, [pc, #20]	; (800c8c0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f107 0214 	add.w	r2, r7, #20
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	4804      	ldr	r0, [pc, #16]	; (800c8c8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 800c8b6:	4798      	blx	r3
}
 800c8b8:	bf00      	nop
 800c8ba:	3720      	adds	r7, #32
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	200000a0 	.word	0x200000a0
 800c8c4:	0800c709 	.word	0x0800c709
 800c8c8:	0800c6d3 	.word	0x0800c6d3

0800c8cc <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 800c8cc:	b590      	push	{r4, r7, lr}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
    return new Utest();
 800c8d4:	22d3      	movs	r2, #211	; 0xd3
 800c8d6:	4906      	ldr	r1, [pc, #24]	; (800c8f0 <_ZN10UtestShell10createTestEv+0x24>)
 800c8d8:	2004      	movs	r0, #4
 800c8da:	f7f9 f92b 	bl	8005b34 <_ZnwjPKci>
 800c8de:	4604      	mov	r4, r0
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f001 fafd 	bl	800dee0 <_ZN5UtestC1Ev>
 800c8e6:	4623      	mov	r3, r4
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd90      	pop	{r4, r7, pc}
 800c8f0:	08015c08 	.word	0x08015c08

0800c8f4 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
    delete test;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d004      	beq.n	800c90e <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	3204      	adds	r2, #4
 800c908:	6812      	ldr	r2, [r2, #0]
 800c90a:	4618      	mov	r0, r3
 800c90c:	4790      	blx	r2
}
 800c90e:	bf00      	nop
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
	...

0800c918 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b088      	sub	sp, #32
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	333c      	adds	r3, #60	; 0x3c
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4940      	ldr	r1, [pc, #256]	; (800ca30 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3314      	adds	r3, #20
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	68f9      	ldr	r1, [r7, #12]
 800c93e:	68b8      	ldr	r0, [r7, #8]
 800c940:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	333c      	adds	r3, #60	; 0x3c
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	493a      	ldr	r1, [pc, #232]	; (800ca34 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 800c950:	f001 fa9c 	bl	800de8c <_ZN10UtestShell10getCurrentEv>
 800c954:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f001 fa7e 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800c95c:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 800c95e:	6879      	ldr	r1, [r7, #4]
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f001 fa59 	bl	800de18 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 800c966:	68f9      	ldr	r1, [r7, #12]
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f001 fa65 	bl	800de38 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	333c      	adds	r3, #60	; 0x3c
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4930      	ldr	r1, [pc, #192]	; (800ca38 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	4798      	blx	r3
    Utest* testToRun = createTest();
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	3388      	adds	r3, #136	; 0x88
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	4798      	blx	r3
 800c988:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	333c      	adds	r3, #60	; 0x3c
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	492a      	ldr	r1, [pc, #168]	; (800ca3c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	333c      	adds	r3, #60	; 0x3c
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4927      	ldr	r1, [pc, #156]	; (800ca40 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	4798      	blx	r3
    testToRun->run();
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3308      	adds	r3, #8
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	6978      	ldr	r0, [r7, #20]
 800c9b0:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	333c      	adds	r3, #60	; 0x3c
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4922      	ldr	r1, [pc, #136]	; (800ca44 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 800c9c0:	69f9      	ldr	r1, [r7, #28]
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f001 fa38 	bl	800de38 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 800c9c8:	69b9      	ldr	r1, [r7, #24]
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f001 fa24 	bl	800de18 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	333c      	adds	r3, #60	; 0x3c
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	491b      	ldr	r1, [pc, #108]	; (800ca48 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	4798      	blx	r3
    destroyTest(testToRun);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	338c      	adds	r3, #140	; 0x8c
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6979      	ldr	r1, [r7, #20]
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	333c      	adds	r3, #60	; 0x3c
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4915      	ldr	r1, [pc, #84]	; (800ca4c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	333c      	adds	r3, #60	; 0x3c
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4913      	ldr	r1, [pc, #76]	; (800ca50 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3318      	adds	r3, #24
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	68f9      	ldr	r1, [r7, #12]
 800ca14:	68b8      	ldr	r0, [r7, #8]
 800ca16:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	333c      	adds	r3, #60	; 0x3c
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	490c      	ldr	r1, [pc, #48]	; (800ca54 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	4798      	blx	r3
}
 800ca26:	bf00      	nop
 800ca28:	3720      	adds	r7, #32
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	08015c1c 	.word	0x08015c1c
 800ca34:	08015c40 	.word	0x08015c40
 800ca38:	08015c60 	.word	0x08015c60
 800ca3c:	08015c7c 	.word	0x08015c7c
 800ca40:	08015c98 	.word	0x08015c98
 800ca44:	08015cb4 	.word	0x08015cb4
 800ca48:	08015ccc 	.word	0x08015ccc
 800ca4c:	08015ce8 	.word	0x08015ce8
 800ca50:	08015d04 	.word	0x08015d04
 800ca54:	08015d28 	.word	0x08015d28

0800ca58 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
    return next_;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	695b      	ldr	r3, [r3, #20]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
    next_ = test;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	615a      	str	r2, [r3, #20]
    return this;
 800ca80:	687b      	ldr	r3, [r7, #4]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	370c      	adds	r7, #12
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr

0800ca8e <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b082      	sub	sp, #8
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00b      	beq.n	800cab6 <_ZN10UtestShell10countTestsEv+0x28>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	695a      	ldr	r2, [r3, #20]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	3310      	adds	r3, #16
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4610      	mov	r0, r2
 800caae:	4798      	blx	r3
 800cab0:	4603      	mov	r3, r0
 800cab2:	3301      	adds	r3, #1
 800cab4:	e000      	b.n	800cab8 <_ZN10UtestShell10countTestsEv+0x2a>
 800cab6:	2301      	movs	r3, #1
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
    return "TEST";
 800caca:	4904      	ldr	r1, [pc, #16]	; (800cadc <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7f9 ff1a 	bl	8006906 <_ZN12SimpleStringC1EPKc>
}
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	08015d4c 	.word	0x08015d4c

0800cae0 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	4619      	mov	r1, r3
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7f9 ff08 	bl	8006906 <_ZN12SimpleStringC1EPKc>
}
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	3708      	adds	r7, #8
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b082      	sub	sp, #8
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
 800cb06:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7f9 fef9 	bl	8006906 <_ZN12SimpleStringC1EPKc>
}
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	33a0      	adds	r3, #160	; 0xa0
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	6839      	ldr	r1, [r7, #0]
 800cb32:	4610      	mov	r0, r2
 800cb34:	4798      	blx	r3
    formattedName += "(";
 800cb36:	490e      	ldr	r1, [pc, #56]	; (800cb70 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7fa fb2b 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	4619      	mov	r1, r3
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7fa fb25 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 800cb4a:	490a      	ldr	r1, [pc, #40]	; (800cb74 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7fa fb21 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7fa fb1b 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 800cb5e:	4906      	ldr	r1, [pc, #24]	; (800cb78 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7fa fb17 	bl	8007194 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 800cb66:	bf00      	nop
}
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	08015d54 	.word	0x08015d54
 800cb74:	08015d58 	.word	0x08015d58
 800cb78:	08015d5c 	.word	0x08015d5c

0800cb7c <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	7e5b      	ldrb	r3, [r3, #25]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <_ZNK10UtestShell7willRunEv>:
{
    getTestResult()->countCheck();
}

bool UtestShell::willRun() const
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
    return true;
 800cb9c:	2301      	movs	r3, #1
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	370c      	adds	r7, #12
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 800cbaa:	b480      	push	{r7}
 800cbac:	b083      	sub	sp, #12
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	7e1b      	ldrb	r3, [r3, #24]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	b083      	sub	sp, #12
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	761a      	strb	r2, [r3, #24]
}
 800cbd0:	bf00      	nop
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]

}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	60da      	str	r2, [r3, #12]
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	611a      	str	r2, [r3, #16]
}
 800cc1c:	bf00      	nop
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	605a      	str	r2, [r3, #4]
}
 800cc38:	bf00      	nop
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
    name_ = testName;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	609a      	str	r2, [r3, #8]
}
 800cc54:	bf00      	nop
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7f9 fe48 	bl	8006906 <_ZN12SimpleStringC1EPKc>
}
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 800cc7e:	b480      	push	{r7}
 800cc80:	b083      	sub	sp, #12
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	691b      	ldr	r3, [r3, #16]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	370c      	adds	r7, #12
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 800cc96:	b590      	push	{r4, r7, lr}
 800cc98:	b087      	sub	sp, #28
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d101      	bne.n	800ccac <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e01f      	b.n	800ccec <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d01b      	beq.n	800ccea <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 800ccb2:	f107 0310 	add.w	r3, r7, #16
 800ccb6:	68b9      	ldr	r1, [r7, #8]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7f9 fe24 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ccbe:	f107 0310 	add.w	r3, r7, #16
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f004 fa88 	bl	80111da <_ZNK10TestFilter5matchERK12SimpleString>
 800ccca:	4603      	mov	r3, r0
 800cccc:	461c      	mov	r4, r3
 800ccce:	f107 0310 	add.w	r3, r7, #16
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fa f9cf 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ccd8:	2c00      	cmp	r4, #0
 800ccda:	d001      	beq.n	800cce0 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e005      	b.n	800ccec <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f004 fa54 	bl	801118e <_ZNK10TestFilter7getNextEv>
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	e7e0      	b.n	800ccac <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	371c      	adds	r7, #28
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd90      	pop	{r4, r7, pc}

0800ccf4 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	4619      	mov	r1, r3
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f7ff ffc4 	bl	800cc96 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00b      	beq.n	800cd2c <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f7ff ffba 	bl	800cc96 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d001      	beq.n	800cd2c <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e000      	b.n	800cd2e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 800cd36:	b590      	push	{r4, r7, lr}
 800cd38:	b083      	sub	sp, #12
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
 800cd3e:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	339c      	adds	r3, #156	; 0x9c
 800cd46:	681c      	ldr	r4, [r3, #0]
 800cd48:	f001 f8b0 	bl	800deac <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	461a      	mov	r2, r3
 800cd50:	6839      	ldr	r1, [r7, #0]
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 800cd56:	bf00      	nop
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd90      	pop	{r4, r7, pc}

0800cd5e <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b084      	sub	sp, #16
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	60f8      	str	r0, [r7, #12]
 800cd66:	60b9      	str	r1, [r7, #8]
 800cd68:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f001 f871 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800cd76:	4603      	mov	r3, r0
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	3234      	adds	r2, #52	; 0x34
 800cd7c:	6812      	ldr	r2, [r2, #0]
 800cd7e:	68b9      	ldr	r1, [r7, #8]
 800cd80:	4618      	mov	r0, r3
 800cd82:	4790      	blx	r2
    terminator.exitCurrentTest();
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800cd8e:	bf00      	nop
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	6838      	ldr	r0, [r7, #0]
 800cda8:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800cdb2:	b590      	push	{r4, r7, lr}
 800cdb4:	b09d      	sub	sp, #116	; 0x74
 800cdb6:	af04      	add	r7, sp, #16
 800cdb8:	60f8      	str	r0, [r7, #12]
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	603b      	str	r3, [r7, #0]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f001 f848 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	3228      	adds	r2, #40	; 0x28
 800cdce:	6812      	ldr	r2, [r2, #0]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	4790      	blx	r2
    if (!condition)
 800cdd4:	7afb      	ldrb	r3, [r7, #11]
 800cdd6:	f083 0301 	eor.w	r3, r3, #1
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d03f      	beq.n	800ce60 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	339c      	adds	r3, #156	; 0x9c
 800cde6:	681c      	ldr	r4, [r3, #0]
 800cde8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cdec:	6879      	ldr	r1, [r7, #4]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7f9 fd89 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800cdf4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7f9 fd83 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ce00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ce04:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7f9 fd7d 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ce0c:	f107 0014 	add.w	r0, r7, #20
 800ce10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ce14:	9302      	str	r3, [sp, #8]
 800ce16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ce1a:	9301      	str	r3, [sp, #4]
 800ce1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ce26:	68f9      	ldr	r1, [r7, #12]
 800ce28:	f7fb ff7c 	bl	8008d24 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800ce2c:	f107 0314 	add.w	r3, r7, #20
 800ce30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ce32:	4619      	mov	r1, r3
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	47a0      	blx	r4
 800ce38:	f107 0314 	add.w	r3, r7, #20
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fc fddf 	bl	8009a00 <_ZN12CheckFailureD1Ev>
 800ce42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fa f915 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ce4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fa f910 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ce56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fa f90b 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800ce60:	bf00      	nop
 800ce62:	3764      	adds	r7, #100	; 0x64
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd90      	pop	{r4, r7, pc}

0800ce68 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800ce68:	b590      	push	{r4, r7, lr}
 800ce6a:	b097      	sub	sp, #92	; 0x5c
 800ce6c:	af02      	add	r7, sp, #8
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
 800ce74:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800ce76:	68f8      	ldr	r0, [r7, #12]
 800ce78:	f000 ffee 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	3228      	adds	r2, #40	; 0x28
 800ce82:	6812      	ldr	r2, [r2, #0]
 800ce84:	4618      	mov	r0, r3
 800ce86:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	339c      	adds	r3, #156	; 0x9c
 800ce8e:	681c      	ldr	r4, [r3, #0]
 800ce90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ce94:	68b9      	ldr	r1, [r7, #8]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7f9 fd35 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ce9c:	f107 0014 	add.w	r0, r7, #20
 800cea0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	68f9      	ldr	r1, [r7, #12]
 800ceac:	f7fb ff82 	bl	8008db4 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800ceb0:	f107 0314 	add.w	r3, r7, #20
 800ceb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	47a0      	blx	r4
 800cebc:	f107 0314 	add.w	r3, r7, #20
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7f9 fa0f 	bl	80062e4 <_ZN11FailFailureD1Ev>
 800cec6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fa f8d3 	bl	8007076 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 800ced0:	bf00      	nop
 800ced2:	3754      	adds	r7, #84	; 0x54
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd90      	pop	{r4, r7, pc}

0800ced8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800ced8:	b590      	push	{r4, r7, lr}
 800ceda:	b0a7      	sub	sp, #156	; 0x9c
 800cedc:	af04      	add	r7, sp, #16
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
 800cee4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	f000 ffb6 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800ceec:	4603      	mov	r3, r0
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	3228      	adds	r2, #40	; 0x28
 800cef2:	6812      	ldr	r2, [r2, #0]
 800cef4:	4618      	mov	r0, r3
 800cef6:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d102      	bne.n	800cf04 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d068      	beq.n	800cfd6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d002      	beq.n	800cf10 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d12a      	bne.n	800cf66 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	339c      	adds	r3, #156	; 0x9c
 800cf16:	681c      	ldr	r4, [r3, #0]
 800cf18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7f9 fcf1 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800cf24:	f107 0010 	add.w	r0, r7, #16
 800cf28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cf2c:	9302      	str	r3, [sp, #8]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	9301      	str	r3, [sp, #4]
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cf3e:	68f9      	ldr	r1, [r7, #12]
 800cf40:	f7fc f9be 	bl	80092c0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800cf44:	f107 0310 	add.w	r3, r7, #16
 800cf48:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	47a0      	blx	r4
 800cf52:	f107 0310 	add.w	r3, r7, #16
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fc fcca 	bl	80098f0 <_ZN18StringEqualFailureD1Ev>
 800cf5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7fa f888 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 800cf66:	6879      	ldr	r1, [r7, #4]
 800cf68:	68b8      	ldr	r0, [r7, #8]
 800cf6a:	f7f9 fb09 	bl	8006580 <_ZN12SimpleString6StrCmpEPKcS1_>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	bf14      	ite	ne
 800cf74:	2301      	movne	r3, #1
 800cf76:	2300      	moveq	r3, #0
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d02c      	beq.n	800cfd8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	339c      	adds	r3, #156	; 0x9c
 800cf84:	681c      	ldr	r4, [r3, #0]
 800cf86:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7f9 fcba 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800cf92:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800cf96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800cf9a:	9302      	str	r3, [sp, #8]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	9300      	str	r3, [sp, #0]
 800cfa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cfa8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cfac:	68f9      	ldr	r1, [r7, #12]
 800cfae:	f7fc f987 	bl	80092c0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800cfb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cfb6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cfba:	4619      	mov	r1, r3
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	47a0      	blx	r4
 800cfc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7fc fc93 	bl	80098f0 <_ZN18StringEqualFailureD1Ev>
 800cfca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fa f851 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800cfd4:	e000      	b.n	800cfd8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800cfd6:	bf00      	nop
}
 800cfd8:	378c      	adds	r7, #140	; 0x8c
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd90      	pop	{r4, r7, pc}

0800cfde <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800cfde:	b590      	push	{r4, r7, lr}
 800cfe0:	b0a7      	sub	sp, #156	; 0x9c
 800cfe2:	af04      	add	r7, sp, #16
 800cfe4:	60f8      	str	r0, [r7, #12]
 800cfe6:	60b9      	str	r1, [r7, #8]
 800cfe8:	607a      	str	r2, [r7, #4]
 800cfea:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 ff33 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800cff2:	4603      	mov	r3, r0
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	3228      	adds	r2, #40	; 0x28
 800cff8:	6812      	ldr	r2, [r2, #0]
 800cffa:	4618      	mov	r0, r3
 800cffc:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d102      	bne.n	800d00a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d06b      	beq.n	800d0e2 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d12b      	bne.n	800d06e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	339c      	adds	r3, #156	; 0x9c
 800d01c:	681c      	ldr	r4, [r3, #0]
 800d01e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d022:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d026:	4618      	mov	r0, r3
 800d028:	f7f9 fc6d 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d02c:	f107 0010 	add.w	r0, r7, #16
 800d030:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d034:	9302      	str	r3, [sp, #8]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	9301      	str	r3, [sp, #4]
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d042:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d046:	68f9      	ldr	r1, [r7, #12]
 800d048:	f7fc f93a 	bl	80092c0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d04c:	f107 0310 	add.w	r3, r7, #16
 800d050:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d054:	4619      	mov	r1, r3
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	47a0      	blx	r4
 800d05a:	f107 0310 	add.w	r3, r7, #16
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fc fc46 	bl	80098f0 <_ZN18StringEqualFailureD1Ev>
 800d064:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fa f804 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	6879      	ldr	r1, [r7, #4]
 800d072:	68b8      	ldr	r0, [r7, #8]
 800d074:	f7f9 fac3 	bl	80065fe <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	bf14      	ite	ne
 800d07e:	2301      	movne	r3, #1
 800d080:	2300      	moveq	r3, #0
 800d082:	b2db      	uxtb	r3, r3
 800d084:	2b00      	cmp	r3, #0
 800d086:	d02d      	beq.n	800d0e4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	339c      	adds	r3, #156	; 0x9c
 800d08e:	681c      	ldr	r4, [r3, #0]
 800d090:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d094:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d098:	4618      	mov	r0, r3
 800d09a:	f7f9 fc34 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d09e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800d0a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d0a6:	9302      	str	r3, [sp, #8]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	9301      	str	r3, [sp, #4]
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d0b4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d0b8:	68f9      	ldr	r1, [r7, #12]
 800d0ba:	f7fc f901 	bl	80092c0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d0be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d0c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	68f8      	ldr	r0, [r7, #12]
 800d0ca:	47a0      	blx	r4
 800d0cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fc fc0d 	bl	80098f0 <_ZN18StringEqualFailureD1Ev>
 800d0d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f9 ffcb 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d0e0:	e000      	b.n	800d0e4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d0e2:	bf00      	nop
}
 800d0e4:	378c      	adds	r7, #140	; 0x8c
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd90      	pop	{r4, r7, pc}

0800d0ea <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800d0ea:	b590      	push	{r4, r7, lr}
 800d0ec:	b0ab      	sub	sp, #172	; 0xac
 800d0ee:	af04      	add	r7, sp, #16
 800d0f0:	60f8      	str	r0, [r7, #12]
 800d0f2:	60b9      	str	r1, [r7, #8]
 800d0f4:	607a      	str	r2, [r7, #4]
 800d0f6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f000 fead 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d0fe:	4603      	mov	r3, r0
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	3228      	adds	r2, #40	; 0x28
 800d104:	6812      	ldr	r2, [r2, #0]
 800d106:	4618      	mov	r0, r3
 800d108:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d102      	bne.n	800d116 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d07c      	beq.n	800d210 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d002      	beq.n	800d122 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d128      	bne.n	800d174 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	3398      	adds	r3, #152	; 0x98
 800d128:	681c      	ldr	r4, [r3, #0]
 800d12a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d12e:	6839      	ldr	r1, [r7, #0]
 800d130:	4618      	mov	r0, r3
 800d132:	f7f9 fbe8 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d136:	f107 0010 	add.w	r0, r7, #16
 800d13a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d13e:	9302      	str	r3, [sp, #8]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	9301      	str	r3, [sp, #4]
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d14c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d150:	68f9      	ldr	r1, [r7, #12]
 800d152:	f7fc f959 	bl	8009408 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d156:	f107 0310 	add.w	r3, r7, #16
 800d15a:	4619      	mov	r1, r3
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	47a0      	blx	r4
 800d160:	f107 0310 	add.w	r3, r7, #16
 800d164:	4618      	mov	r0, r3
 800d166:	f7fc fba1 	bl	80098ac <_ZN24StringEqualNoCaseFailureD1Ev>
 800d16a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f9 ff81 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 800d174:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d178:	68b9      	ldr	r1, [r7, #8]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7f9 fbc3 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d180:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d184:	6879      	ldr	r1, [r7, #4]
 800d186:	4618      	mov	r0, r3
 800d188:	f7f9 fbbd 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d18c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800d190:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d194:	4611      	mov	r1, r2
 800d196:	4618      	mov	r0, r3
 800d198:	f7f9 ff94 	bl	80070c4 <_ZNK12SimpleString12equalsNoCaseERKS_>
 800d19c:	4603      	mov	r3, r0
 800d19e:	f083 0301 	eor.w	r3, r3, #1
 800d1a2:	b2dc      	uxtb	r4, r3
 800d1a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7f9 ff64 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d1ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7f9 ff5f 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d1b8:	2c00      	cmp	r4, #0
 800d1ba:	d02a      	beq.n	800d212 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	3398      	adds	r3, #152	; 0x98
 800d1c2:	681c      	ldr	r4, [r3, #0]
 800d1c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d1c8:	6839      	ldr	r1, [r7, #0]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7f9 fb9b 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d1d0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800d1d4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d1d8:	9302      	str	r3, [sp, #8]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	9301      	str	r3, [sp, #4]
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d1ea:	68f9      	ldr	r1, [r7, #12]
 800d1ec:	f7fc f90c 	bl	8009408 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d1f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	47a0      	blx	r4
 800d1fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fc fb54 	bl	80098ac <_ZN24StringEqualNoCaseFailureD1Ev>
 800d204:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d208:	4618      	mov	r0, r3
 800d20a:	f7f9 ff34 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d20e:	e000      	b.n	800d212 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d210:	bf00      	nop
}
 800d212:	379c      	adds	r7, #156	; 0x9c
 800d214:	46bd      	mov	sp, r7
 800d216:	bd90      	pop	{r4, r7, pc}

0800d218 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800d218:	b590      	push	{r4, r7, lr}
 800d21a:	b0b3      	sub	sp, #204	; 0xcc
 800d21c:	af04      	add	r7, sp, #16
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f000 fe16 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d22c:	4603      	mov	r3, r0
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	3228      	adds	r2, #40	; 0x28
 800d232:	6812      	ldr	r2, [r2, #0]
 800d234:	4618      	mov	r0, r3
 800d236:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d103      	bne.n	800d246 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 80ad 	beq.w	800d3a0 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d002      	beq.n	800d252 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d140      	bne.n	800d2d4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	3398      	adds	r3, #152	; 0x98
 800d258:	681c      	ldr	r4, [r3, #0]
 800d25a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d25e:	68b9      	ldr	r1, [r7, #8]
 800d260:	4618      	mov	r0, r3
 800d262:	f7f9 fb50 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d266:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d26a:	6879      	ldr	r1, [r7, #4]
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7f9 fb4a 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d272:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	4618      	mov	r0, r3
 800d27a:	f7f9 fb44 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d27e:	f107 0010 	add.w	r0, r7, #16
 800d282:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d286:	9302      	str	r3, [sp, #8]
 800d288:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d298:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d29c:	68f9      	ldr	r1, [r7, #12]
 800d29e:	f7fb fcf7 	bl	8008c90 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d2a2:	f107 0310 	add.w	r3, r7, #16
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	47a0      	blx	r4
 800d2ac:	f107 0310 	add.w	r3, r7, #16
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7fc fbc7 	bl	8009a44 <_ZN15ContainsFailureD1Ev>
 800d2b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7f9 fedb 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d2c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7f9 fed6 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d2ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7f9 fed1 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 800d2d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d2d8:	6879      	ldr	r1, [r7, #4]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7f9 fb13 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d2e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d2e4:	68b9      	ldr	r1, [r7, #8]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7f9 fb0d 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d2ec:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d2f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7f9 fb83 	bl	8006a02 <_ZNK12SimpleString8containsERKS_>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	f083 0301 	eor.w	r3, r3, #1
 800d302:	b2dc      	uxtb	r4, r3
 800d304:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d308:	4618      	mov	r0, r3
 800d30a:	f7f9 feb4 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d30e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d312:	4618      	mov	r0, r3
 800d314:	f7f9 feaf 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d318:	2c00      	cmp	r4, #0
 800d31a:	d042      	beq.n	800d3a2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	3398      	adds	r3, #152	; 0x98
 800d322:	681c      	ldr	r4, [r3, #0]
 800d324:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d328:	68b9      	ldr	r1, [r7, #8]
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7f9 faeb 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d330:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	4618      	mov	r0, r3
 800d338:	f7f9 fae5 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d33c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	4618      	mov	r0, r3
 800d344:	f7f9 fadf 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d348:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800d34c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d350:	9302      	str	r3, [sp, #8]
 800d352:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d356:	9301      	str	r3, [sp, #4]
 800d358:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d362:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d366:	68f9      	ldr	r1, [r7, #12]
 800d368:	f7fb fc92 	bl	8008c90 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d36c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d370:	4619      	mov	r1, r3
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	47a0      	blx	r4
 800d376:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7fc fb62 	bl	8009a44 <_ZN15ContainsFailureD1Ev>
 800d380:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d384:	4618      	mov	r0, r3
 800d386:	f7f9 fe76 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d38a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d38e:	4618      	mov	r0, r3
 800d390:	f7f9 fe71 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d394:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d398:	4618      	mov	r0, r3
 800d39a:	f7f9 fe6c 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d39e:	e000      	b.n	800d3a2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d3a0:	bf00      	nop
}
 800d3a2:	37bc      	adds	r7, #188	; 0xbc
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd90      	pop	{r4, r7, pc}

0800d3a8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800d3a8:	b590      	push	{r4, r7, lr}
 800d3aa:	b0b3      	sub	sp, #204	; 0xcc
 800d3ac:	af04      	add	r7, sp, #16
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f000 fd4e 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	3228      	adds	r2, #40	; 0x28
 800d3c2:	6812      	ldr	r2, [r2, #0]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d103      	bne.n	800d3d6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 80ad 	beq.w	800d530 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d140      	bne.n	800d464 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	3398      	adds	r3, #152	; 0x98
 800d3e8:	681c      	ldr	r4, [r3, #0]
 800d3ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d3ee:	68b9      	ldr	r1, [r7, #8]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7f9 fa88 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d3f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d3fa:	6879      	ldr	r1, [r7, #4]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7f9 fa82 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d402:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d406:	6839      	ldr	r1, [r7, #0]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7f9 fa7c 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d40e:	f107 0010 	add.w	r0, r7, #16
 800d412:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d416:	9302      	str	r3, [sp, #8]
 800d418:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d422:	9300      	str	r3, [sp, #0]
 800d424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d428:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d42c:	68f9      	ldr	r1, [r7, #12]
 800d42e:	f7fb fc2f 	bl	8008c90 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d432:	f107 0310 	add.w	r3, r7, #16
 800d436:	4619      	mov	r1, r3
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	47a0      	blx	r4
 800d43c:	f107 0310 	add.w	r3, r7, #16
 800d440:	4618      	mov	r0, r3
 800d442:	f7fc faff 	bl	8009a44 <_ZN15ContainsFailureD1Ev>
 800d446:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7f9 fe13 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d450:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d454:	4618      	mov	r0, r3
 800d456:	f7f9 fe0e 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d45a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f9 fe09 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 800d464:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d468:	6879      	ldr	r1, [r7, #4]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7f9 fa4b 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d470:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d474:	68b9      	ldr	r1, [r7, #8]
 800d476:	4618      	mov	r0, r3
 800d478:	f7f9 fa45 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d47c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d480:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d484:	4611      	mov	r1, r2
 800d486:	4618      	mov	r0, r3
 800d488:	f7f9 fad6 	bl	8006a38 <_ZNK12SimpleString14containsNoCaseERKS_>
 800d48c:	4603      	mov	r3, r0
 800d48e:	f083 0301 	eor.w	r3, r3, #1
 800d492:	b2dc      	uxtb	r4, r3
 800d494:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d498:	4618      	mov	r0, r3
 800d49a:	f7f9 fdec 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d49e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7f9 fde7 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d4a8:	2c00      	cmp	r4, #0
 800d4aa:	d042      	beq.n	800d532 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	3398      	adds	r3, #152	; 0x98
 800d4b2:	681c      	ldr	r4, [r3, #0]
 800d4b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d4b8:	68b9      	ldr	r1, [r7, #8]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7f9 fa23 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d4c0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d4c4:	6879      	ldr	r1, [r7, #4]
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7f9 fa1d 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d4cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d4d0:	6839      	ldr	r1, [r7, #0]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7f9 fa17 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d4d8:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800d4dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d4e0:	9302      	str	r3, [sp, #8]
 800d4e2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d4e6:	9301      	str	r3, [sp, #4]
 800d4e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d4ec:	9300      	str	r3, [sp, #0]
 800d4ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d4f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d4f6:	68f9      	ldr	r1, [r7, #12]
 800d4f8:	f7fb fbca 	bl	8008c90 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d4fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d500:	4619      	mov	r1, r3
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	47a0      	blx	r4
 800d506:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fc fa9a 	bl	8009a44 <_ZN15ContainsFailureD1Ev>
 800d510:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d514:	4618      	mov	r0, r3
 800d516:	f7f9 fdae 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d51a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d51e:	4618      	mov	r0, r3
 800d520:	f7f9 fda9 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d524:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d528:	4618      	mov	r0, r3
 800d52a:	f7f9 fda4 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d52e:	e000      	b.n	800d532 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d530:	bf00      	nop
}
 800d532:	37bc      	adds	r7, #188	; 0xbc
 800d534:	46bd      	mov	sp, r7
 800d536:	bd90      	pop	{r4, r7, pc}

0800d538 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d538:	b590      	push	{r4, r7, lr}
 800d53a:	b099      	sub	sp, #100	; 0x64
 800d53c:	af04      	add	r7, sp, #16
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
 800d544:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f000 fc86 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d54c:	4603      	mov	r3, r0
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	3228      	adds	r2, #40	; 0x28
 800d552:	6812      	ldr	r2, [r2, #0]
 800d554:	4618      	mov	r0, r3
 800d556:	4790      	blx	r2
    if (expected != actual)
 800d558:	68ba      	ldr	r2, [r7, #8]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d027      	beq.n	800d5b0 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	339c      	adds	r3, #156	; 0x9c
 800d566:	681c      	ldr	r4, [r3, #0]
 800d568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	4618      	mov	r0, r3
 800d570:	f7f9 f9c9 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d574:	f107 0014 	add.w	r0, r7, #20
 800d578:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d57c:	9302      	str	r3, [sp, #8]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	9301      	str	r3, [sp, #4]
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d58a:	68f9      	ldr	r1, [r7, #12]
 800d58c:	f7fb fc30 	bl	8008df0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 800d590:	f107 0314 	add.w	r3, r7, #20
 800d594:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d596:	4619      	mov	r1, r3
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	47a0      	blx	r4
 800d59c:	f107 0314 	add.w	r3, r7, #20
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fc fa0b 	bl	80099bc <_ZN17LongsEqualFailureD1Ev>
 800d5a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7f9 fd63 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800d5b0:	bf00      	nop
 800d5b2:	3754      	adds	r7, #84	; 0x54
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd90      	pop	{r4, r7, pc}

0800d5b8 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d5b8:	b590      	push	{r4, r7, lr}
 800d5ba:	b099      	sub	sp, #100	; 0x64
 800d5bc:	af04      	add	r7, sp, #16
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
 800d5c4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f000 fc46 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	3228      	adds	r2, #40	; 0x28
 800d5d2:	6812      	ldr	r2, [r2, #0]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	4790      	blx	r2
    if (expected != actual)
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d027      	beq.n	800d630 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	339c      	adds	r3, #156	; 0x9c
 800d5e6:	681c      	ldr	r4, [r3, #0]
 800d5e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7f9 f989 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d5f4:	f107 0014 	add.w	r0, r7, #20
 800d5f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5fc:	9302      	str	r3, [sp, #8]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	9301      	str	r3, [sp, #4]
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d60a:	68f9      	ldr	r1, [r7, #12]
 800d60c:	f7fb fcbc 	bl	8008f88 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 800d610:	f107 0314 	add.w	r3, r7, #20
 800d614:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d616:	4619      	mov	r1, r3
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	47a0      	blx	r4
 800d61c:	f107 0314 	add.w	r3, r7, #20
 800d620:	4618      	mov	r0, r3
 800d622:	f7fc f9a9 	bl	8009978 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800d626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f9 fd23 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800d630:	bf00      	nop
 800d632:	3754      	adds	r7, #84	; 0x54
 800d634:	46bd      	mov	sp, r7
 800d636:	bd90      	pop	{r4, r7, pc}

0800d638 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d638:	b082      	sub	sp, #8
 800d63a:	b590      	push	{r4, r7, lr}
 800d63c:	b099      	sub	sp, #100	; 0x64
 800d63e:	af02      	add	r7, sp, #8
 800d640:	60f8      	str	r0, [r7, #12]
 800d642:	1d38      	adds	r0, r7, #4
 800d644:	e880 0006 	stmia.w	r0, {r1, r2}
 800d648:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f000 fc04 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d650:	4603      	mov	r3, r0
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	3228      	adds	r2, #40	; 0x28
 800d656:	6812      	ldr	r2, [r2, #0]
 800d658:	4618      	mov	r0, r3
 800d65a:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	339c      	adds	r3, #156	; 0x9c
 800d662:	681c      	ldr	r4, [r3, #0]
 800d664:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d668:	4919      	ldr	r1, [pc, #100]	; (800d6d0 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7f9 f94b 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d670:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d674:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d676:	4618      	mov	r0, r3
 800d678:	f7f9 f945 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d67c:	f107 0014 	add.w	r0, r7, #20
 800d680:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d684:	9301      	str	r3, [sp, #4]
 800d686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d68e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d690:	68f9      	ldr	r1, [r7, #12]
 800d692:	f7fc f85f 	bl	8009754 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800d696:	f107 0314 	add.w	r3, r7, #20
 800d69a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d69e:	4619      	mov	r1, r3
 800d6a0:	68f8      	ldr	r0, [r7, #12]
 800d6a2:	47a0      	blx	r4
 800d6a4:	f107 0314 	add.w	r3, r7, #20
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7fc f899 	bl	80097e0 <_ZN25FeatureUnsupportedFailureD1Ev>
 800d6ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7f9 fcdf 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d6b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7f9 fcda 	bl	8007076 <_ZN12SimpleStringD1Ev>
#endif
}
 800d6c2:	bf00      	nop
 800d6c4:	375c      	adds	r7, #92	; 0x5c
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d6cc:	b002      	add	sp, #8
 800d6ce:	4770      	bx	lr
 800d6d0:	08015d60 	.word	0x08015d60

0800d6d4 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d6d4:	b082      	sub	sp, #8
 800d6d6:	b590      	push	{r4, r7, lr}
 800d6d8:	b099      	sub	sp, #100	; 0x64
 800d6da:	af02      	add	r7, sp, #8
 800d6dc:	60f8      	str	r0, [r7, #12]
 800d6de:	1d38      	adds	r0, r7, #4
 800d6e0:	e880 0006 	stmia.w	r0, {r1, r2}
 800d6e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	f000 fbb6 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	3228      	adds	r2, #40	; 0x28
 800d6f2:	6812      	ldr	r2, [r2, #0]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	339c      	adds	r3, #156	; 0x9c
 800d6fe:	681c      	ldr	r4, [r3, #0]
 800d700:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d704:	4919      	ldr	r1, [pc, #100]	; (800d76c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 800d706:	4618      	mov	r0, r3
 800d708:	f7f9 f8fd 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d70c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d710:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d712:	4618      	mov	r0, r3
 800d714:	f7f9 f8f7 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d718:	f107 0014 	add.w	r0, r7, #20
 800d71c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d720:	9301      	str	r3, [sp, #4]
 800d722:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d72a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d72c:	68f9      	ldr	r1, [r7, #12]
 800d72e:	f7fc f811 	bl	8009754 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800d732:	f107 0314 	add.w	r3, r7, #20
 800d736:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d73a:	4619      	mov	r1, r3
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	47a0      	blx	r4
 800d740:	f107 0314 	add.w	r3, r7, #20
 800d744:	4618      	mov	r0, r3
 800d746:	f7fc f84b 	bl	80097e0 <_ZN25FeatureUnsupportedFailureD1Ev>
 800d74a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d74e:	4618      	mov	r0, r3
 800d750:	f7f9 fc91 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d758:	4618      	mov	r0, r3
 800d75a:	f7f9 fc8c 	bl	8007076 <_ZN12SimpleStringD1Ev>
#endif
}
 800d75e:	bf00      	nop
 800d760:	375c      	adds	r7, #92	; 0x5c
 800d762:	46bd      	mov	sp, r7
 800d764:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d768:	b002      	add	sp, #8
 800d76a:	4770      	bx	lr
 800d76c:	08015d60 	.word	0x08015d60

0800d770 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d770:	b590      	push	{r4, r7, lr}
 800d772:	b099      	sub	sp, #100	; 0x64
 800d774:	af04      	add	r7, sp, #16
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	607b      	str	r3, [r7, #4]
 800d77a:	460b      	mov	r3, r1
 800d77c:	72fb      	strb	r3, [r7, #11]
 800d77e:	4613      	mov	r3, r2
 800d780:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f000 fb68 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d788:	4603      	mov	r3, r0
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	3228      	adds	r2, #40	; 0x28
 800d78e:	6812      	ldr	r2, [r2, #0]
 800d790:	4618      	mov	r0, r3
 800d792:	4790      	blx	r2
    if (expected != actual)
 800d794:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d798:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d029      	beq.n	800d7f4 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	339c      	adds	r3, #156	; 0x9c
 800d7a6:	681c      	ldr	r4, [r3, #0]
 800d7a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d7ac:	6879      	ldr	r1, [r7, #4]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7f9 f8a9 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d7b4:	f107 0014 	add.w	r0, r7, #20
 800d7b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d7bc:	9302      	str	r3, [sp, #8]
 800d7be:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800d7c2:	9301      	str	r3, [sp, #4]
 800d7c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d7c8:	9300      	str	r3, [sp, #0]
 800d7ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d7ce:	68f9      	ldr	r1, [r7, #12]
 800d7d0:	f7fb fca6 	bl	8009120 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 800d7d4:	f107 0314 	add.w	r3, r7, #20
 800d7d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	47a0      	blx	r4
 800d7e0:	f107 0314 	add.w	r3, r7, #20
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7fc f8a5 	bl	8009934 <_ZN23SignedBytesEqualFailureD1Ev>
 800d7ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7f9 fc41 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800d7f4:	bf00      	nop
 800d7f6:	3754      	adds	r7, #84	; 0x54
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd90      	pop	{r4, r7, pc}

0800d7fc <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d7fc:	b590      	push	{r4, r7, lr}
 800d7fe:	b09d      	sub	sp, #116	; 0x74
 800d800:	af04      	add	r7, sp, #16
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
 800d808:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f000 fb24 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d810:	4603      	mov	r3, r0
 800d812:	681a      	ldr	r2, [r3, #0]
 800d814:	3228      	adds	r2, #40	; 0x28
 800d816:	6812      	ldr	r2, [r2, #0]
 800d818:	4618      	mov	r0, r3
 800d81a:	4790      	blx	r2
    if (expected != actual)
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	429a      	cmp	r2, r3
 800d822:	d03f      	beq.n	800d8a4 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	339c      	adds	r3, #156	; 0x9c
 800d82a:	681c      	ldr	r4, [r3, #0]
 800d82c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d830:	68b9      	ldr	r1, [r7, #8]
 800d832:	4618      	mov	r0, r3
 800d834:	f7f9 feec 	bl	8007610 <_Z10StringFromPKv>
 800d838:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d83c:	6879      	ldr	r1, [r7, #4]
 800d83e:	4618      	mov	r0, r3
 800d840:	f7f9 fee6 	bl	8007610 <_Z10StringFromPKv>
 800d844:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d848:	6839      	ldr	r1, [r7, #0]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7f9 f85b 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d850:	f107 0014 	add.w	r0, r7, #20
 800d854:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d858:	9302      	str	r3, [sp, #8]
 800d85a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d85e:	9301      	str	r3, [sp, #4]
 800d860:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d864:	9300      	str	r3, [sp, #0]
 800d866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d868:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d86a:	68f9      	ldr	r1, [r7, #12]
 800d86c:	f7fb f826 	bl	80088bc <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d870:	f107 0314 	add.w	r3, r7, #20
 800d874:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d876:	4619      	mov	r1, r3
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	47a0      	blx	r4
 800d87c:	f107 0314 	add.w	r3, r7, #20
 800d880:	4618      	mov	r0, r3
 800d882:	f7fc f967 	bl	8009b54 <_ZN13EqualsFailureD1Ev>
 800d886:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7f9 fbf3 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d890:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d894:	4618      	mov	r0, r3
 800d896:	f7f9 fbee 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d89a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7f9 fbe9 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800d8a4:	bf00      	nop
 800d8a6:	3764      	adds	r7, #100	; 0x64
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd90      	pop	{r4, r7, pc}

0800d8ac <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d8ac:	b590      	push	{r4, r7, lr}
 800d8ae:	b09d      	sub	sp, #116	; 0x74
 800d8b0:	af04      	add	r7, sp, #16
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
 800d8b8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f000 facc 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	3228      	adds	r2, #40	; 0x28
 800d8c6:	6812      	ldr	r2, [r2, #0]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	4790      	blx	r2
    if (expected != actual)
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d03f      	beq.n	800d954 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	339c      	adds	r3, #156	; 0x9c
 800d8da:	681c      	ldr	r4, [r3, #0]
 800d8dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d8e0:	68b9      	ldr	r1, [r7, #8]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7f9 febe 	bl	8007664 <_Z10StringFromPFvvE>
 800d8e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d8ec:	6879      	ldr	r1, [r7, #4]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7f9 feb8 	bl	8007664 <_Z10StringFromPFvvE>
 800d8f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7f9 f803 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d900:	f107 0014 	add.w	r0, r7, #20
 800d904:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d908:	9302      	str	r3, [sp, #8]
 800d90a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d918:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d91a:	68f9      	ldr	r1, [r7, #12]
 800d91c:	f7fa ffce 	bl	80088bc <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d920:	f107 0314 	add.w	r3, r7, #20
 800d924:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d926:	4619      	mov	r1, r3
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	47a0      	blx	r4
 800d92c:	f107 0314 	add.w	r3, r7, #20
 800d930:	4618      	mov	r0, r3
 800d932:	f7fc f90f 	bl	8009b54 <_ZN13EqualsFailureD1Ev>
 800d936:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7f9 fb9b 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d940:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d944:	4618      	mov	r0, r3
 800d946:	f7f9 fb96 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800d94a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d94e:	4618      	mov	r0, r3
 800d950:	f7f9 fb91 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800d954:	bf00      	nop
 800d956:	3764      	adds	r7, #100	; 0x64
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd90      	pop	{r4, r7, pc}

0800d95c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d95c:	b590      	push	{r4, r7, lr}
 800d95e:	b09d      	sub	sp, #116	; 0x74
 800d960:	af02      	add	r7, sp, #8
 800d962:	6278      	str	r0, [r7, #36]	; 0x24
 800d964:	ed87 0b06 	vstr	d0, [r7, #24]
 800d968:	ed87 1b04 	vstr	d1, [r7, #16]
 800d96c:	ed87 2b02 	vstr	d2, [r7, #8]
 800d970:	6239      	str	r1, [r7, #32]
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d978:	f000 fa6e 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800d97c:	4603      	mov	r3, r0
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	3228      	adds	r2, #40	; 0x28
 800d982:	6812      	ldr	r2, [r2, #0]
 800d984:	4618      	mov	r0, r3
 800d986:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 800d988:	ed97 2b02 	vldr	d2, [r7, #8]
 800d98c:	ed97 1b04 	vldr	d1, [r7, #16]
 800d990:	ed97 0b06 	vldr	d0, [r7, #24]
 800d994:	f7fe fd5c 	bl	800c450 <_Z13doubles_equalddd>
 800d998:	4603      	mov	r3, r0
 800d99a:	f083 0301 	eor.w	r3, r3, #1
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d029      	beq.n	800d9f8 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	339c      	adds	r3, #156	; 0x9c
 800d9aa:	681c      	ldr	r4, [r3, #0]
 800d9ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d9b0:	6a39      	ldr	r1, [r7, #32]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7f8 ffa7 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800d9b8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800d9bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	ed97 2b02 	vldr	d2, [r7, #8]
 800d9c6:	ed97 1b04 	vldr	d1, [r7, #16]
 800d9ca:	ed97 0b06 	vldr	d0, [r7, #24]
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9d4:	f7fa ffb4 	bl	8008940 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 800d9d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9e2:	47a0      	blx	r4
 800d9e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7fc f891 	bl	8009b10 <_ZN19DoublesEqualFailureD1Ev>
 800d9ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7f9 fb3f 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800d9f8:	bf00      	nop
 800d9fa:	376c      	adds	r7, #108	; 0x6c
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd90      	pop	{r4, r7, pc}

0800da00 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800da00:	b590      	push	{r4, r7, lr}
 800da02:	b0a7      	sub	sp, #156	; 0x9c
 800da04:	af04      	add	r7, sp, #16
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
 800da0c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f000 fa22 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800da14:	4603      	mov	r3, r0
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	3228      	adds	r2, #40	; 0x28
 800da1a:	6812      	ldr	r2, [r2, #0]
 800da1c:	4618      	mov	r0, r3
 800da1e:	4790      	blx	r2
	if (length == 0) return;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d075      	beq.n	800db12 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d102      	bne.n	800da32 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d071      	beq.n	800db16 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d12d      	bne.n	800da9a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	339c      	adds	r3, #156	; 0x9c
 800da44:	681c      	ldr	r4, [r3, #0]
 800da46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800da4a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800da4e:	4618      	mov	r0, r3
 800da50:	f7f8 ff59 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800da54:	f107 0010 	add.w	r0, r7, #16
 800da58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800da5c:	9303      	str	r3, [sp, #12]
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	9302      	str	r3, [sp, #8]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	9301      	str	r3, [sp, #4]
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	9300      	str	r3, [sp, #0]
 800da6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da6e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800da72:	68f9      	ldr	r1, [r7, #12]
 800da74:	f7fb fd82 	bl	800957c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800da78:	f107 0310 	add.w	r3, r7, #16
 800da7c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800da80:	4619      	mov	r1, r3
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	47a0      	blx	r4
 800da86:	f107 0310 	add.w	r3, r7, #16
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fb feec 	bl	8009868 <_ZN18BinaryEqualFailureD1Ev>
 800da90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800da94:	4618      	mov	r0, r3
 800da96:	f7f9 faee 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 800da9a:	683a      	ldr	r2, [r7, #0]
 800da9c:	6879      	ldr	r1, [r7, #4]
 800da9e:	68b8      	ldr	r0, [r7, #8]
 800daa0:	f7f8 fe50 	bl	8006744 <_ZN12SimpleString6MemCmpEPKvS1_j>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	bf14      	ite	ne
 800daaa:	2301      	movne	r3, #1
 800daac:	2300      	moveq	r3, #0
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d031      	beq.n	800db18 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	339c      	adds	r3, #156	; 0x9c
 800daba:	681c      	ldr	r4, [r3, #0]
 800dabc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dac0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7f8 ff1e 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800daca:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800dace:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dad2:	9303      	str	r3, [sp, #12]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	9302      	str	r3, [sp, #8]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	9301      	str	r3, [sp, #4]
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dae4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800dae8:	68f9      	ldr	r1, [r7, #12]
 800daea:	f7fb fd47 	bl	800957c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800daee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800daf2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800daf6:	4619      	mov	r1, r3
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	47a0      	blx	r4
 800dafc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db00:	4618      	mov	r0, r3
 800db02:	f7fb feb1 	bl	8009868 <_ZN18BinaryEqualFailureD1Ev>
 800db06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7f9 fab3 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800db10:	e002      	b.n	800db18 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 800db12:	bf00      	nop
 800db14:	e000      	b.n	800db18 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800db16:	bf00      	nop
}
 800db18:	378c      	adds	r7, #140	; 0x8c
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd90      	pop	{r4, r7, pc}

0800db1e <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800db1e:	b590      	push	{r4, r7, lr}
 800db20:	b09b      	sub	sp, #108	; 0x6c
 800db22:	af06      	add	r7, sp, #24
 800db24:	60f8      	str	r0, [r7, #12]
 800db26:	60b9      	str	r1, [r7, #8]
 800db28:	607a      	str	r2, [r7, #4]
 800db2a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	f000 f993 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800db32:	4603      	mov	r3, r0
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	3228      	adds	r2, #40	; 0x28
 800db38:	6812      	ldr	r2, [r2, #0]
 800db3a:	4618      	mov	r0, r3
 800db3c:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 800db3e:	68ba      	ldr	r2, [r7, #8]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	405a      	eors	r2, r3
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	4013      	ands	r3, r2
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d02b      	beq.n	800dba4 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	339c      	adds	r3, #156	; 0x9c
 800db52:	681c      	ldr	r4, [r3, #0]
 800db54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db58:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7f8 fed3 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800db60:	f107 0014 	add.w	r0, r7, #20
 800db64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db68:	9304      	str	r3, [sp, #16]
 800db6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db6c:	9303      	str	r3, [sp, #12]
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	9302      	str	r3, [sp, #8]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	9301      	str	r3, [sp, #4]
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db7e:	68f9      	ldr	r1, [r7, #12]
 800db80:	f7fb fd8c 	bl	800969c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 800db84:	f107 0314 	add.w	r3, r7, #20
 800db88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800db8a:	4619      	mov	r1, r3
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	47a0      	blx	r4
 800db90:	f107 0314 	add.w	r3, r7, #20
 800db94:	4618      	mov	r0, r3
 800db96:	f7fb fe45 	bl	8009824 <_ZN16BitsEqualFailureD1Ev>
 800db9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7f9 fa69 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800dba4:	bf00      	nop
 800dba6:	3754      	adds	r7, #84	; 0x54
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd90      	pop	{r4, r7, pc}

0800dbac <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 800dbac:	b590      	push	{r4, r7, lr}
 800dbae:	b09d      	sub	sp, #116	; 0x74
 800dbb0:	af04      	add	r7, sp, #16
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	607a      	str	r2, [r7, #4]
 800dbb6:	603b      	str	r3, [r7, #0]
 800dbb8:	460b      	mov	r3, r1
 800dbba:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f000 f94b 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	3228      	adds	r2, #40	; 0x28
 800dbc8:	6812      	ldr	r2, [r2, #0]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	4790      	blx	r2
    if (failed)
 800dbce:	7afb      	ldrb	r3, [r7, #11]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d03f      	beq.n	800dc54 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	339c      	adds	r3, #156	; 0x9c
 800dbda:	681c      	ldr	r4, [r3, #0]
 800dbdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dbe0:	6879      	ldr	r1, [r7, #4]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7f8 fe8f 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800dbe8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7f8 fe89 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800dbf4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dbf8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7f8 fe83 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800dc00:	f107 0014 	add.w	r0, r7, #20
 800dc04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dc08:	9302      	str	r3, [sp, #8]
 800dc0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dc0e:	9301      	str	r3, [sp, #4]
 800dc10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dc1a:	68f9      	ldr	r1, [r7, #12]
 800dc1c:	f7fa ff42 	bl	8008aa4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800dc20:	f107 0314 	add.w	r3, r7, #20
 800dc24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dc26:	4619      	mov	r1, r3
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	47a0      	blx	r4
 800dc2c:	f107 0314 	add.w	r3, r7, #20
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fb ff4b 	bl	8009acc <_ZN17CheckEqualFailureD1Ev>
 800dc36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7f9 fa1b 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800dc40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7f9 fa16 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800dc4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7f9 fa11 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800dc54:	bf00      	nop
 800dc56:	3764      	adds	r7, #100	; 0x64
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd90      	pop	{r4, r7, pc}

0800dc5c <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 800dc5c:	b590      	push	{r4, r7, lr}
 800dc5e:	b09d      	sub	sp, #116	; 0x74
 800dc60:	af04      	add	r7, sp, #16
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	607a      	str	r2, [r7, #4]
 800dc66:	603b      	str	r3, [r7, #0]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f000 f8f3 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800dc72:	4603      	mov	r3, r0
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	3228      	adds	r2, #40	; 0x28
 800dc78:	6812      	ldr	r2, [r2, #0]
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	4790      	blx	r2
    if (!comparison)
 800dc7e:	7afb      	ldrb	r3, [r7, #11]
 800dc80:	f083 0301 	eor.w	r3, r3, #1
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d03f      	beq.n	800dd0a <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	339c      	adds	r3, #156	; 0x9c
 800dc90:	681c      	ldr	r4, [r3, #0]
 800dc92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc96:	6879      	ldr	r1, [r7, #4]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7f8 fe34 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800dc9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dca2:	6839      	ldr	r1, [r7, #0]
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7f8 fe2e 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800dcaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dcae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7f8 fe28 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800dcb6:	f107 0014 	add.w	r0, r7, #20
 800dcba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dcbe:	9302      	str	r3, [sp, #8]
 800dcc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dcc4:	9301      	str	r3, [sp, #4]
 800dcc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dcd0:	68f9      	ldr	r1, [r7, #12]
 800dcd2:	f7fa ff95 	bl	8008c00 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800dcd6:	f107 0314 	add.w	r3, r7, #20
 800dcda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dcdc:	4619      	mov	r1, r3
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	47a0      	blx	r4
 800dce2:	f107 0314 	add.w	r3, r7, #20
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fb fece 	bl	8009a88 <_ZN17ComparisonFailureD1Ev>
 800dcec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7f9 f9c0 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800dcf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7f9 f9bb 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800dd00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7f9 f9b6 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800dd0a:	bf00      	nop
 800dd0c:	3764      	adds	r7, #100	; 0x64
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd90      	pop	{r4, r7, pc}
	...

0800dd14 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 800dd14:	b5b0      	push	{r4, r5, r7, lr}
 800dd16:	b088      	sub	sp, #32
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
 800dd20:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 800dd22:	f107 0310 	add.w	r3, r7, #16
 800dd26:	4924      	ldr	r1, [pc, #144]	; (800ddb8 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7f8 fdec 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 800dd2e:	f107 0310 	add.w	r3, r7, #16
 800dd32:	6879      	ldr	r1, [r7, #4]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7f9 fa2d 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 800dd3a:	f107 0310 	add.w	r3, r7, #16
 800dd3e:	491f      	ldr	r1, [pc, #124]	; (800ddbc <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7f9 fa27 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 800dd46:	f107 0318 	add.w	r3, r7, #24
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7f9 fe47 	bl	80079e0 <_Z10StringFromj>
 800dd52:	f107 0218 	add.w	r2, r7, #24
 800dd56:	f107 0310 	add.w	r3, r7, #16
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7f9 fa07 	bl	8007170 <_ZN12SimpleStringpLERKS_>
 800dd62:	f107 0318 	add.w	r3, r7, #24
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7f9 f985 	bl	8007076 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 800dd6c:	f107 0310 	add.w	r3, r7, #16
 800dd70:	4913      	ldr	r1, [pc, #76]	; (800ddc0 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7f9 fa0e 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 800dd78:	f107 0310 	add.w	r3, r7, #16
 800dd7c:	68b9      	ldr	r1, [r7, #8]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7f9 fa08 	bl	8007194 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f000 f867 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	6823      	ldr	r3, [r4, #0]
 800dd8e:	3338      	adds	r3, #56	; 0x38
 800dd90:	681d      	ldr	r5, [r3, #0]
 800dd92:	f107 0310 	add.w	r3, r7, #16
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7f9 f940 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4620      	mov	r0, r4
 800dda2:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 800dda4:	f107 0310 	add.w	r3, r7, #16
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7f9 f964 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800ddae:	bf00      	nop
 800ddb0:	3720      	adds	r7, #32
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bdb0      	pop	{r4, r5, r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	08015d78 	.word	0x08015d78
 800ddbc:	08015d7c 	.word	0x08015d7c
 800ddc0:	08015d80 	.word	0x08015d80

0800ddc4 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 800ddc4:	b590      	push	{r4, r7, lr}
 800ddc6:	b085      	sub	sp, #20
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	3370      	adds	r3, #112	; 0x70
 800ddd8:	681c      	ldr	r4, [r3, #0]
 800ddda:	68b8      	ldr	r0, [r7, #8]
 800dddc:	f7f9 f91e 	bl	800701c <_ZNK12SimpleString12asCharStringEv>
 800dde0:	4601      	mov	r1, r0
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	47a0      	blx	r4
}
 800ddea:	bf00      	nop
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd90      	pop	{r4, r7, pc}

0800ddf2 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b082      	sub	sp, #8
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
 800ddfa:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f82b 	bl	800de58 <_ZN10UtestShell13getTestResultEv>
 800de02:	4603      	mov	r3, r0
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	323c      	adds	r2, #60	; 0x3c
 800de08:	6812      	ldr	r2, [r2, #0]
 800de0a:	6839      	ldr	r1, [r7, #0]
 800de0c:	4618      	mov	r0, r3
 800de0e:	4790      	blx	r2
}
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 800de22:	4a04      	ldr	r2, [pc, #16]	; (800de34 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	6013      	str	r3, [r2, #0]
}
 800de28:	bf00      	nop
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr
 800de34:	200006e4 	.word	0x200006e4

0800de38 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 800de42:	4a04      	ldr	r2, [pc, #16]	; (800de54 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	6013      	str	r3, [r2, #0]
}
 800de48:	bf00      	nop
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr
 800de54:	200006e8 	.word	0x200006e8

0800de58 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 800de60:	4b09      	ldr	r3, [pc, #36]	; (800de88 <_ZN10UtestShell13getTestResultEv+0x30>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d109      	bne.n	800de7c <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 800de68:	f7fe fbc4 	bl	800c5f4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800de6c:	4603      	mov	r3, r0
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	32a4      	adds	r2, #164	; 0xa4
 800de72:	6812      	ldr	r2, [r2, #0]
 800de74:	4618      	mov	r0, r3
 800de76:	4790      	blx	r2
 800de78:	4603      	mov	r3, r0
 800de7a:	e001      	b.n	800de80 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 800de7c:	4b02      	ldr	r3, [pc, #8]	; (800de88 <_ZN10UtestShell13getTestResultEv+0x30>)
 800de7e:	681b      	ldr	r3, [r3, #0]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	200006e4 	.word	0x200006e4

0800de8c <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 800de90:	4b05      	ldr	r3, [pc, #20]	; (800dea8 <_ZN10UtestShell10getCurrentEv+0x1c>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d103      	bne.n	800dea0 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 800de98:	f7fe fbac 	bl	800c5f4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800de9c:	4603      	mov	r3, r0
 800de9e:	e001      	b.n	800dea4 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 800dea0:	4b01      	ldr	r3, [pc, #4]	; (800dea8 <_ZN10UtestShell10getCurrentEv+0x1c>)
 800dea2:	681b      	ldr	r3, [r3, #0]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	200006e8 	.word	0x200006e8

0800deac <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 800deac:	b480      	push	{r7}
 800deae:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 800deb0:	4b03      	ldr	r3, [pc, #12]	; (800dec0 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 800deb2:	681b      	ldr	r3, [r3, #0]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	46bd      	mov	sp, r7
 800deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	20000090 	.word	0x20000090

0800dec4 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 800dec4:	b480      	push	{r7}
 800dec6:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 800dec8:	4b03      	ldr	r3, [pc, #12]	; (800ded8 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 800deca:	4a04      	ldr	r2, [pc, #16]	; (800dedc <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 800decc:	601a      	str	r2, [r3, #0]
}
 800dece:	bf00      	nop
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr
 800ded8:	20000090 	.word	0x20000090
 800dedc:	2000008c 	.word	0x2000008c

0800dee0 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	4a04      	ldr	r2, [pc, #16]	; (800defc <_ZN5UtestC1Ev+0x1c>)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	601a      	str	r2, [r3, #0]
{
}
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4618      	mov	r0, r3
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	080176dc 	.word	0x080176dc

0800df00 <_ZN5UtestD1Ev>:

Utest::~Utest()
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	4a04      	ldr	r2, [pc, #16]	; (800df1c <_ZN5UtestD1Ev+0x1c>)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	601a      	str	r2, [r3, #0]
{
}
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	4618      	mov	r0, r3
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr
 800df1c:	080176dc 	.word	0x080176dc

0800df20 <_ZN5UtestD0Ev>:
Utest::~Utest()
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
}
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f7ff ffe9 	bl	800df00 <_ZN5UtestD1Ev>
 800df2e:	2104      	movs	r1, #4
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7f7 fe13 	bl	8005b5c <_ZdlPvj>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4618      	mov	r0, r3
 800df3a:	3708      	adds	r7, #8
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 800df48:	4b0d      	ldr	r3, [pc, #52]	; (800df80 <_ZN5Utest3runEv+0x40>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	6879      	ldr	r1, [r7, #4]
 800df4e:	480d      	ldr	r0, [pc, #52]	; (800df84 <_ZN5Utest3runEv+0x44>)
 800df50:	4798      	blx	r3
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	bf14      	ite	ne
 800df58:	2301      	movne	r3, #1
 800df5a:	2300      	moveq	r3, #0
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d004      	beq.n	800df6c <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 800df62:	4b07      	ldr	r3, [pc, #28]	; (800df80 <_ZN5Utest3runEv+0x40>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	6879      	ldr	r1, [r7, #4]
 800df68:	4807      	ldr	r0, [pc, #28]	; (800df88 <_ZN5Utest3runEv+0x48>)
 800df6a:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 800df6c:	4b04      	ldr	r3, [pc, #16]	; (800df80 <_ZN5Utest3runEv+0x40>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	6879      	ldr	r1, [r7, #4]
 800df72:	4806      	ldr	r0, [pc, #24]	; (800df8c <_ZN5Utest3runEv+0x4c>)
 800df74:	4798      	blx	r3
}
 800df76:	bf00      	nop
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	200000a0 	.word	0x200000a0
 800df84:	0800c651 	.word	0x0800c651
 800df88:	0800c66d 	.word	0x0800c66d
 800df8c:	0800c689 	.word	0x0800c689

0800df90 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
}
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
}
 800dfac:	bf00      	nop
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	4a04      	ldr	r2, [pc, #16]	; (800dfe8 <_ZN14TestTerminatorD1Ev+0x1c>)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	601a      	str	r2, [r3, #0]
{
}
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	080176c8 	.word	0x080176c8

0800dfec <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 800dff4:	2300      	movs	r3, #0
 800dff6:	60fb      	str	r3, [r7, #12]
 800dff8:	f107 030c 	add.w	r3, r7, #12
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7f7 ff6f 	bl	8005ee0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800e002:	f107 030c 	add.w	r3, r7, #12
 800e006:	4618      	mov	r0, r3
 800e008:	f000 f82c 	bl	800e064 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 800e00c:	f107 030c 	add.w	r3, r7, #12
 800e010:	4618      	mov	r0, r3
 800e012:	f000 f835 	bl	800e080 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 800e016:	bf00      	nop
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
	...

0800e020 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	4a05      	ldr	r2, [pc, #20]	; (800e040 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	601a      	str	r2, [r3, #0]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff ffcb 	bl	800dfcc <_ZN14TestTerminatorD1Ev>
{
}
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4618      	mov	r0, r3
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	080176b4 	.word	0x080176b4

0800e044 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
}
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff ffe7 	bl	800e020 <_ZN20NormalTestTerminatorD1Ev>
 800e052:	2104      	movs	r1, #4
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7f7 fd81 	bl	8005b5c <_ZdlPvj>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4618      	mov	r0, r3
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 800e06c:	4b03      	ldr	r3, [pc, #12]	; (800e07c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800e072:	bf00      	nop
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	2000009c 	.word	0x2000009c

0800e080 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	4a05      	ldr	r2, [pc, #20]	; (800e0a0 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	601a      	str	r2, [r3, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4618      	mov	r0, r3
 800e092:	f7ff ff9b 	bl	800dfcc <_ZN14TestTerminatorD1Ev>
{
}
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4618      	mov	r0, r3
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	080176a0 	.word	0x080176a0

0800e0a4 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
}
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7ff ffe7 	bl	800e080 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800e0b2:	2104      	movs	r1, #4
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7f7 fd51 	bl	8005b5c <_ZdlPvj>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3708      	adds	r7, #8
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 800e0cc:	f7fe fbbc 	bl	800c848 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7ff ff8a 	bl	800dfec <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 800e0d8:	bf00      	nop
 800e0da:	3708      	adds	r7, #8
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	4a05      	ldr	r2, [pc, #20]	; (800e100 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	601a      	str	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7ff ff95 	bl	800e020 <_ZN20NormalTestTerminatorD1Ev>
{
}
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	0801768c 	.word	0x0801768c

0800e104 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
}
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff ffe7 	bl	800e0e0 <_ZN22CrashingTestTerminatorD1Ev>
 800e112:	2104      	movs	r1, #4
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7f7 fd21 	bl	8005b5c <_ZdlPvj>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4618      	mov	r0, r3
 800e11e:	3708      	adds	r7, #8
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d007      	beq.n	800e150 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	3310      	adds	r3, #16
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	6838      	ldr	r0, [r7, #0]
 800e14a:	4798      	blx	r3
 800e14c:	4603      	mov	r3, r0
 800e14e:	e000      	b.n	800e152 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 800e150:	2300      	movs	r3, #0
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d02d      	beq.n	800e1ba <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800e166:	4293      	cmp	r3, r2
 800e168:	d201      	bcs.n	800e16e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	e001      	b.n	800e172 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 800e16e:	f04f 33ff 	mov.w	r3, #4294967295
 800e172:	f240 3237 	movw	r2, #823	; 0x337
 800e176:	4914      	ldr	r1, [pc, #80]	; (800e1c8 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 800e178:	4618      	mov	r0, r3
 800e17a:	f7f7 fcff 	bl	8005b7c <_ZnajPKci>
 800e17e:	4602      	mov	r2, r0
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800e188:	2300      	movs	r3, #0
 800e18a:	60bb      	str	r3, [r7, #8]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	429a      	cmp	r2, r3
 800e194:	d212      	bcs.n	800e1bc <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4413      	add	r3, r2
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	330c      	adds	r3, #12
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	4798      	blx	r3
 800e1b0:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	60bb      	str	r3, [r7, #8]
 800e1b8:	e7e8      	b.n	800e18c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 800e1ba:	bf00      	nop
    }
}
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	08015c08 	.word	0x08015c08

0800e1cc <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d004      	beq.n	800e1e6 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7f7 fcdf 	bl	8005ba4 <_ZdaPv>
}
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b087      	sub	sp, #28
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	4413      	add	r3, r2
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	4413      	add	r3, r2
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4413      	add	r3, r2
 800e230:	693a      	ldr	r2, [r7, #16]
 800e232:	601a      	str	r2, [r3, #0]
}
 800e234:	bf00      	nop
 800e236:	371c      	adds	r7, #28
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d028      	beq.n	800e2a4 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 800e252:	4b17      	ldr	r3, [pc, #92]	; (800e2b0 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	6838      	ldr	r0, [r7, #0]
 800e258:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	3b01      	subs	r3, #1
 800e260:	60fb      	str	r3, [r7, #12]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d019      	beq.n	800e29c <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d01b      	beq.n	800e2a8 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 800e270:	4b10      	ldr	r3, [pc, #64]	; (800e2b4 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4798      	blx	r3
 800e276:	4603      	mov	r3, r0
 800e278:	461a      	mov	r2, r3
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	3301      	adds	r3, #1
 800e27e:	fbb2 f1f3 	udiv	r1, r2, r3
 800e282:	fb03 f301 	mul.w	r3, r3, r1
 800e286:	1ad3      	subs	r3, r2, r3
 800e288:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 800e28a:	68ba      	ldr	r2, [r7, #8]
 800e28c:	68f9      	ldr	r1, [r7, #12]
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f7ff ffae 	bl	800e1f0 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	3b01      	subs	r3, #1
 800e298:	60fb      	str	r3, [r7, #12]
 800e29a:	e7e2      	b.n	800e262 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 f834 	bl	800e30a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800e2a2:	e002      	b.n	800e2aa <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 800e2a4:	bf00      	nop
 800e2a6:	e000      	b.n	800e2aa <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 800e2a8:	bf00      	nop
}
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	200000d8 	.word	0x200000d8
 800e2b4:	200000dc 	.word	0x200000dc

0800e2b8 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b086      	sub	sp, #24
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d01c      	beq.n	800e302 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	085b      	lsrs	r3, r3, #1
 800e2ce:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	617b      	str	r3, [r7, #20]
 800e2d4:	697a      	ldr	r2, [r7, #20]
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d20e      	bcs.n	800e2fa <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	685a      	ldr	r2, [r3, #4]
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 800e2e8:	68fa      	ldr	r2, [r7, #12]
 800e2ea:	6979      	ldr	r1, [r7, #20]
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f7ff ff7f 	bl	800e1f0 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	617b      	str	r3, [r7, #20]
 800e2f8:	e7ec      	b.n	800e2d4 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f805 	bl	800e30a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800e300:	e000      	b.n	800e304 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 800e302:	bf00      	nop
}
 800e304:	3718      	adds	r7, #24
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b084      	sub	sp, #16
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 800e312:	2300      	movs	r3, #0
 800e314:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800e316:	2300      	movs	r3, #0
 800e318:	60bb      	str	r3, [r7, #8]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	429a      	cmp	r2, r3
 800e322:	d221      	bcs.n	800e368 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6859      	ldr	r1, [r3, #4]
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	1acb      	subs	r3, r1, r3
 800e330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e334:	3b01      	subs	r3, #1
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	4413      	add	r3, r2
 800e33a:	6818      	ldr	r0, [r3, #0]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6859      	ldr	r1, [r3, #4]
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	1acb      	subs	r3, r1, r3
 800e348:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e34c:	3b01      	subs	r3, #1
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4413      	add	r3, r2
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	3308      	adds	r3, #8
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	68f9      	ldr	r1, [r7, #12]
 800e35c:	4798      	blx	r3
 800e35e:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	3301      	adds	r3, #1
 800e364:	60bb      	str	r3, [r7, #8]
 800e366:	e7d8      	b.n	800e31a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 800e368:	bf00      	nop
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
    return get(0);
 800e378:	2100      	movs	r1, #0
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f805 	bl	800e38a <_ZNK22UtestShellPointerArray3getEj>
 800e380:	4603      	mov	r3, r0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 800e38a:	b480      	push	{r7}
 800e38c:	b083      	sub	sp, #12
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
 800e392:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	683a      	ldr	r2, [r7, #0]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d301      	bcc.n	800e3a2 <_ZNK22UtestShellPointerArray3getEj+0x18>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	e005      	b.n	800e3ae <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	4413      	add	r3, r2
 800e3ac:	681b      	ldr	r3, [r3, #0]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	370c      	adds	r7, #12
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr
	...

0800e3bc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	607a      	str	r2, [r7, #4]
 800e3c8:	603b      	str	r3, [r7, #0]
 800e3ca:	4a10      	ldr	r2, [pc, #64]	; (800e40c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 800e3d0:	6879      	ldr	r1, [r7, #4]
 800e3d2:	68b8      	ldr	r0, [r7, #8]
 800e3d4:	f7fe fc28 	bl	800cc28 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	68b8      	ldr	r0, [r7, #8]
 800e3dc:	f7fe fc32 	bl	800cc44 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 800e3e0:	69b9      	ldr	r1, [r7, #24]
 800e3e2:	68b8      	ldr	r0, [r7, #8]
 800e3e4:	f7fe fc04 	bl	800cbf0 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 800e3e8:	69f9      	ldr	r1, [r7, #28]
 800e3ea:	68b8      	ldr	r0, [r7, #8]
 800e3ec:	f7fe fc0e 	bl	800cc0c <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 800e3f0:	f7fd fc32 	bl	800bc58 <_ZN12TestRegistry18getCurrentRegistryEv>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	3208      	adds	r2, #8
 800e3fa:	6812      	ldr	r2, [r2, #0]
 800e3fc:	68b9      	ldr	r1, [r7, #8]
 800e3fe:	4618      	mov	r0, r3
 800e400:	4790      	blx	r2
}
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	4618      	mov	r0, r3
 800e406:	3710      	adds	r7, #16
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	080175d0 	.word	0x080175d0

0800e410 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	4a04      	ldr	r2, [pc, #16]	; (800e42c <_ZN13TestInstallerD1Ev+0x1c>)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	601a      	str	r2, [r3, #0]
{
}
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	4618      	mov	r0, r3
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	080175d0 	.word	0x080175d0

0800e430 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
}
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f7ff ffe9 	bl	800e410 <_ZN13TestInstallerD1Ev>
 800e43e:	2104      	movs	r1, #4
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f7f7 fb8b 	bl	8005b5c <_ZdlPvj>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4618      	mov	r0, r3
 800e44a:	3708      	adds	r7, #8
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10a      	bne.n	800e476 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e466:	4293      	cmp	r3, r2
 800e468:	d105      	bne.n	800e476 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800e46a:	4805      	ldr	r0, [pc, #20]	; (800e480 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800e46c:	f7ff fe38 	bl	800e0e0 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 800e470:	4804      	ldr	r0, [pc, #16]	; (800e484 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800e472:	f7ff fdd5 	bl	800e020 <_ZN20NormalTestTerminatorD1Ev>
}
 800e476:	bf00      	nop
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	2000008c 	.word	0x2000008c
 800e484:	20000088 	.word	0x20000088

0800e488 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 800e488:	b580      	push	{r7, lr}
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e490:	2001      	movs	r0, #1
 800e492:	f7ff ffdd 	bl	800e450 <_Z41__static_initialization_and_destruction_0ii>
 800e496:	bd80      	pop	{r7, pc}

0800e498 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 800e498:	b580      	push	{r7, lr}
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	f7ff ffd5 	bl	800e450 <_Z41__static_initialization_and_destruction_0ii>
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 800e4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	ed87 0b00 	vstr	d0, [r7]
 800e4b2:	683c      	ldr	r4, [r7, #0]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	461e      	mov	r6, r3
 800e4be:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c2:	4b10      	ldr	r3, [pc, #64]	; (800e504 <_ZSt5isinfd+0x5c>)
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	4629      	mov	r1, r5
 800e4c8:	f7f2 f95e 	bl	8000788 <__aeabi_dcmpun>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d10b      	bne.n	800e4ea <_ZSt5isinfd+0x42>
 800e4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d6:	4b0b      	ldr	r3, [pc, #44]	; (800e504 <_ZSt5isinfd+0x5c>)
 800e4d8:	4620      	mov	r0, r4
 800e4da:	4629      	mov	r1, r5
 800e4dc:	f7f2 f936 	bl	800074c <__aeabi_dcmple>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d101      	bne.n	800e4ea <_ZSt5isinfd+0x42>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	461e      	mov	r6, r3
 800e4ea:	b2f3      	uxtb	r3, r6
 800e4ec:	f083 0301 	eor.w	r3, r3, #1
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	bf14      	ite	ne
 800e4f6:	2301      	movne	r3, #1
 800e4f8:	2300      	moveq	r3, #0
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e504:	7fefffff 	.word	0x7fefffff

0800e508 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 800e508:	b590      	push	{r4, r7, lr}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	ed87 0b00 	vstr	d0, [r7]
 800e512:	2301      	movs	r3, #1
 800e514:	461c      	mov	r4, r3
 800e516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e51a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e51e:	f7f2 f933 	bl	8000788 <__aeabi_dcmpun>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d101      	bne.n	800e52c <_ZSt5isnand+0x24>
 800e528:	2300      	movs	r3, #0
 800e52a:	461c      	mov	r4, r3
 800e52c:	b2e3      	uxtb	r3, r4
 800e52e:	2b00      	cmp	r3, #0
 800e530:	bf14      	ite	ne
 800e532:	2301      	movne	r3, #1
 800e534:	2300      	moveq	r3, #0
 800e536:	b2db      	uxtb	r3, r3
 800e538:	4618      	mov	r0, r3
 800e53a:	370c      	adds	r7, #12
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd90      	pop	{r4, r7, pc}

0800e540 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 800e540:	b590      	push	{r4, r7, lr}
 800e542:	b095      	sub	sp, #84	; 0x54
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	3334      	adds	r3, #52	; 0x34
 800e552:	681c      	ldr	r4, [r3, #0]
 800e554:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e558:	490f      	ldr	r1, [pc, #60]	; (800e598 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7f8 f9d3 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800e560:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e564:	f107 0314 	add.w	r3, r7, #20
 800e568:	68f9      	ldr	r1, [r7, #12]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7f9 ff1c 	bl	80083a8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800e570:	f107 0314 	add.w	r3, r7, #20
 800e574:	4619      	mov	r1, r3
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	47a0      	blx	r4
 800e57a:	f107 0314 	add.w	r3, r7, #20
 800e57e:	4618      	mov	r0, r3
 800e580:	f7f9 ffd2 	bl	8008528 <_ZN11TestFailureD1Ev>
 800e584:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e588:	4618      	mov	r0, r3
 800e58a:	f7f8 fd74 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800e58e:	bf00      	nop
 800e590:	3754      	adds	r7, #84	; 0x54
 800e592:	46bd      	mov	sp, r7
 800e594:	bd90      	pop	{r4, r7, pc}
 800e596:	bf00      	nop
 800e598:	08015d90 	.word	0x08015d90

0800e59c <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 800e59c:	b480      	push	{r7}
 800e59e:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 800e5a0:	2301      	movs	r3, #1
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 800e5b6:	4b13      	ldr	r3, [pc, #76]	; (800e604 <PlatformSpecificSetJmpImplementation+0x58>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	225c      	movs	r2, #92	; 0x5c
 800e5bc:	fb02 f303 	mul.w	r3, r2, r3
 800e5c0:	4a11      	ldr	r2, [pc, #68]	; (800e608 <PlatformSpecificSetJmpImplementation+0x5c>)
 800e5c2:	4413      	add	r3, r2
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7f1 fe2b 	bl	8000220 <setjmp>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	bf0c      	ite	eq
 800e5d0:	2301      	moveq	r3, #1
 800e5d2:	2300      	movne	r3, #0
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00e      	beq.n	800e5f8 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 800e5da:	4b0a      	ldr	r3, [pc, #40]	; (800e604 <PlatformSpecificSetJmpImplementation+0x58>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	4a08      	ldr	r2, [pc, #32]	; (800e604 <PlatformSpecificSetJmpImplementation+0x58>)
 800e5e2:	6013      	str	r3, [r2, #0]
        function(data);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6838      	ldr	r0, [r7, #0]
 800e5e8:	4798      	blx	r3
        jmp_buf_index--;
 800e5ea:	4b06      	ldr	r3, [pc, #24]	; (800e604 <PlatformSpecificSetJmpImplementation+0x58>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	4a04      	ldr	r2, [pc, #16]	; (800e604 <PlatformSpecificSetJmpImplementation+0x58>)
 800e5f2:	6013      	str	r3, [r2, #0]
        return 1;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e000      	b.n	800e5fa <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	20000a84 	.word	0x20000a84
 800e608:	200006ec 	.word	0x200006ec

0800e60c <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 800e610:	4b07      	ldr	r3, [pc, #28]	; (800e630 <PlatformSpecificLongJmpImplementation+0x24>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	3b01      	subs	r3, #1
 800e616:	4a06      	ldr	r2, [pc, #24]	; (800e630 <PlatformSpecificLongJmpImplementation+0x24>)
 800e618:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 800e61a:	4b05      	ldr	r3, [pc, #20]	; (800e630 <PlatformSpecificLongJmpImplementation+0x24>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	225c      	movs	r2, #92	; 0x5c
 800e620:	fb02 f303 	mul.w	r3, r2, r3
 800e624:	4a03      	ldr	r2, [pc, #12]	; (800e634 <PlatformSpecificLongJmpImplementation+0x28>)
 800e626:	4413      	add	r3, r2
 800e628:	2101      	movs	r1, #1
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7f1 fdfe 	bl	800022c <longjmp>
 800e630:	20000a84 	.word	0x20000a84
 800e634:	200006ec 	.word	0x200006ec

0800e638 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 800e638:	b480      	push	{r7}
 800e63a:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 800e63c:	2300      	movs	r3, #0
#endif
}
 800e63e:	4618      	mov	r0, r3
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 800e64e:	2000      	movs	r0, #0
 800e650:	f004 fbd6 	bl	8012e00 <time>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 800e65c:	463b      	mov	r3, r7
 800e65e:	4618      	mov	r0, r3
 800e660:	f003 fa64 	bl	8011b2c <localtime>
 800e664:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	4a04      	ldr	r2, [pc, #16]	; (800e67c <TimeStringImplementation+0x34>)
 800e66a:	2150      	movs	r1, #80	; 0x50
 800e66c:	4804      	ldr	r0, [pc, #16]	; (800e680 <TimeStringImplementation+0x38>)
 800e66e:	f004 fb35 	bl	8012cdc <strftime>
    return dateTime;
 800e672:	4b03      	ldr	r3, [pc, #12]	; (800e680 <TimeStringImplementation+0x38>)
}
 800e674:	4618      	mov	r0, r3
 800e676:	3710      	adds	r7, #16
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	08015dcc 	.word	0x08015dcc
 800e680:	20000a88 	.word	0x20000a88

0800e684 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 800e68e:	6839      	ldr	r1, [r7, #0]
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f003 f881 	bl	8011798 <fopen>
 800e696:	4603      	mov	r3, r0
#endif
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f003 f8e1 	bl	8011874 <fputs>
}
 800e6b2:	bf00      	nop
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b082      	sub	sp, #8
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f002 fe62 	bl	801138c <fclose>
}
 800e6c8:	bf00      	nop
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	af00      	add	r7, sp, #0
  fflush(stdout);
 800e6d4:	4b03      	ldr	r3, [pc, #12]	; (800e6e4 <PlatformSpecificFlushImplementation+0x14>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f002 ff20 	bl	8011520 <fflush>
}
 800e6e0:	bf00      	nop
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	20000100 	.word	0x20000100

0800e6e8 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 800e6f2:	ed97 0b00 	vldr	d0, [r7]
 800e6f6:	f7ff ff07 	bl	800e508 <_ZSt5isnand>
 800e6fa:	4603      	mov	r3, r0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3708      	adds	r7, #8
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 800e70e:	ed97 0b00 	vldr	d0, [r7]
 800e712:	f7ff fec9 	bl	800e4a8 <_ZSt5isinfd>
 800e716:	4603      	mov	r3, r0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 800e720:	b480      	push	{r7}
 800e722:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 800e724:	2300      	movs	r3, #0
#endif

}
 800e726:	4618      	mov	r0, r3
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
}
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
}
 800e74c:	bf00      	nop
 800e74e:	370c      	adds	r7, #12
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 800e778:	4a25      	ldr	r2, [pc, #148]	; (800e810 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	601a      	str	r2, [r3, #0]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	68ba      	ldr	r2, [r7, #8]
 800e782:	605a      	str	r2, [r3, #4]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	609a      	str	r2, [r3, #8]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	731a      	strb	r2, [r3, #12]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	2200      	movs	r2, #0
 800e794:	735a      	strb	r2, [r3, #13]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2200      	movs	r2, #0
 800e79a:	739a      	strb	r2, [r3, #14]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	73da      	strb	r2, [r3, #15]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	741a      	strb	r2, [r3, #16]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	745a      	strb	r2, [r3, #17]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	749a      	strb	r2, [r3, #18]
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	74da      	strb	r2, [r3, #19]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	751a      	strb	r2, [r3, #20]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	755a      	strb	r2, [r3, #21]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	759a      	strb	r2, [r3, #22]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	75da      	strb	r2, [r3, #23]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	761a      	strb	r2, [r3, #24]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	61da      	str	r2, [r3, #28]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	621a      	str	r2, [r3, #32]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	625a      	str	r2, [r3, #36]	; 0x24
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	629a      	str	r2, [r3, #40]	; 0x28
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	3330      	adds	r3, #48	; 0x30
 800e7fc:	4905      	ldr	r1, [pc, #20]	; (800e814 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7f8 f881 	bl	8006906 <_ZN12SimpleStringC1EPKc>
{
}
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	4618      	mov	r0, r3
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	080176fc 	.word	0x080176fc
 800e814:	08015de0 	.word	0x08015de0

0800e818 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	4618      	mov	r0, r3
 800e824:	f7f8 fc27 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4618      	mov	r0, r3
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
	...

0800e834 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 800e834:	b590      	push	{r4, r7, lr}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	4a20      	ldr	r2, [pc, #128]	; (800e8c0 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e846:	2b00      	cmp	r3, #0
 800e848:	d015      	beq.n	800e876 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84e:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e854:	4618      	mov	r0, r3
 800e856:	f002 fc9a 	bl	801118e <_ZNK10TestFilter7getNextEv>
 800e85a:	4602      	mov	r2, r0
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 800e860:	68fc      	ldr	r4, [r7, #12]
 800e862:	2c00      	cmp	r4, #0
 800e864:	d0ed      	beq.n	800e842 <_ZN20CommandLineArgumentsD1Ev+0xe>
 800e866:	4620      	mov	r0, r4
 800e868:	f7ff ffd6 	bl	800e818 <_ZN10TestFilterD1Ev>
 800e86c:	2110      	movs	r1, #16
 800e86e:	4620      	mov	r0, r4
 800e870:	f7f7 f974 	bl	8005b5c <_ZdlPvj>
    while(groupFilters_) {
 800e874:	e7e5      	b.n	800e842 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d015      	beq.n	800e8aa <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e882:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e888:	4618      	mov	r0, r3
 800e88a:	f002 fc80 	bl	801118e <_ZNK10TestFilter7getNextEv>
 800e88e:	4602      	mov	r2, r0
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 800e894:	68bc      	ldr	r4, [r7, #8]
 800e896:	2c00      	cmp	r4, #0
 800e898:	d0ed      	beq.n	800e876 <_ZN20CommandLineArgumentsD1Ev+0x42>
 800e89a:	4620      	mov	r0, r4
 800e89c:	f7ff ffbc 	bl	800e818 <_ZN10TestFilterD1Ev>
 800e8a0:	2110      	movs	r1, #16
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f7f7 f95a 	bl	8005b5c <_ZdlPvj>
    while(nameFilters_) {
 800e8a8:	e7e5      	b.n	800e876 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	3330      	adds	r3, #48	; 0x30
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7f8 fbe1 	bl	8007076 <_ZN12SimpleStringD1Ev>
    }
}
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3714      	adds	r7, #20
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd90      	pop	{r4, r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	080176fc 	.word	0x080176fc

0800e8c4 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
}
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f7ff ffb1 	bl	800e834 <_ZN20CommandLineArgumentsD1Ev>
 800e8d2:	2138      	movs	r1, #56	; 0x38
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7f7 f941 	bl	8005b5c <_ZdlPvj>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 800e8e4:	b5b0      	push	{r4, r5, r7, lr}
 800e8e6:	b0be      	sub	sp, #248	; 0xf8
 800e8e8:	af02      	add	r7, sp, #8
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
 800e8ee:	2400      	movs	r4, #0
    bool correctParameters = true;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	613b      	str	r3, [r7, #16]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	429a      	cmp	r2, r3
 800e902:	f340 83a4 	ble.w	800f04e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	689a      	ldr	r2, [r3, #8]
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	4413      	add	r3, r2
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	f107 0308 	add.w	r3, r7, #8
 800e916:	4611      	mov	r1, r2
 800e918:	4618      	mov	r0, r3
 800e91a:	f7f7 fff4 	bl	8006906 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 800e91e:	f107 0314 	add.w	r3, r7, #20
 800e922:	49c8      	ldr	r1, [pc, #800]	; (800ec44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 800e924:	4618      	mov	r0, r3
 800e926:	f7f7 ffee 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800e92a:	f107 0214 	add.w	r2, r7, #20
 800e92e:	f107 0308 	add.w	r3, r7, #8
 800e932:	4611      	mov	r1, r2
 800e934:	4618      	mov	r0, r3
 800e936:	f7f8 fbaa 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800e93a:	4603      	mov	r3, r0
 800e93c:	461d      	mov	r5, r3
 800e93e:	f107 0314 	add.w	r3, r7, #20
 800e942:	4618      	mov	r0, r3
 800e944:	f7f8 fb97 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800e948:	2d00      	cmp	r5, #0
 800e94a:	d006      	beq.n	800e95a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2201      	movs	r2, #1
 800e950:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 800e952:	2300      	movs	r3, #0
 800e954:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800e958:	e366      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 800e95a:	f107 031c 	add.w	r3, r7, #28
 800e95e:	49ba      	ldr	r1, [pc, #744]	; (800ec48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 800e960:	4618      	mov	r0, r3
 800e962:	f7f7 ffd0 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800e966:	f107 021c 	add.w	r2, r7, #28
 800e96a:	f107 0308 	add.w	r3, r7, #8
 800e96e:	4611      	mov	r1, r2
 800e970:	4618      	mov	r0, r3
 800e972:	f7f8 fb8c 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800e976:	4603      	mov	r3, r0
 800e978:	461d      	mov	r5, r3
 800e97a:	f107 031c 	add.w	r3, r7, #28
 800e97e:	4618      	mov	r0, r3
 800e980:	f7f8 fb79 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800e984:	2d00      	cmp	r5, #0
 800e986:	d003      	beq.n	800e990 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	735a      	strb	r2, [r3, #13]
 800e98e:	e34b      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 800e990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e994:	49ad      	ldr	r1, [pc, #692]	; (800ec4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 800e996:	4618      	mov	r0, r3
 800e998:	f7f7 ffb5 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800e99c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e9a0:	f107 0308 	add.w	r3, r7, #8
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7f8 fb71 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	461d      	mov	r5, r3
 800e9b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7f8 fb5e 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800e9ba:	2d00      	cmp	r5, #0
 800e9bc:	d003      	beq.n	800e9c6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	739a      	strb	r2, [r3, #14]
 800e9c4:	e330      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 800e9c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e9ca:	49a1      	ldr	r1, [pc, #644]	; (800ec50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7f7 ff9a 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800e9d2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e9d6:	f107 0308 	add.w	r3, r7, #8
 800e9da:	4611      	mov	r1, r2
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7f8 fb56 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	461d      	mov	r5, r3
 800e9e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7f8 fb43 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800e9f0:	2d00      	cmp	r5, #0
 800e9f2:	d003      	beq.n	800e9fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	73da      	strb	r2, [r3, #15]
 800e9fa:	e315      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 800e9fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ea00:	4994      	ldr	r1, [pc, #592]	; (800ec54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7f7 ff7f 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ea08:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ea0c:	f107 0308 	add.w	r3, r7, #8
 800ea10:	4611      	mov	r1, r2
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7f8 fb3b 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	461d      	mov	r5, r3
 800ea1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7f8 fb28 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ea26:	2d00      	cmp	r5, #0
 800ea28:	d003      	beq.n	800ea32 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	741a      	strb	r2, [r3, #16]
 800ea30:	e2fa      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 800ea32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ea36:	4988      	ldr	r1, [pc, #544]	; (800ec58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7f7 ff64 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ea3e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ea42:	f107 0308 	add.w	r3, r7, #8
 800ea46:	4611      	mov	r1, r2
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7f8 fb20 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	461d      	mov	r5, r3
 800ea52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7f8 fb0d 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ea5c:	2d00      	cmp	r5, #0
 800ea5e:	d003      	beq.n	800ea68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2201      	movs	r2, #1
 800ea64:	755a      	strb	r2, [r3, #21]
 800ea66:	e2df      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 800ea68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ea6c:	497b      	ldr	r1, [pc, #492]	; (800ec5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7f7 ff49 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ea74:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ea78:	f107 0308 	add.w	r3, r7, #8
 800ea7c:	4611      	mov	r1, r2
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7f8 fb05 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800ea84:	4603      	mov	r3, r0
 800ea86:	461d      	mov	r5, r3
 800ea88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7f8 faf2 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ea92:	2d00      	cmp	r5, #0
 800ea94:	d003      	beq.n	800ea9e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	745a      	strb	r2, [r3, #17]
 800ea9c:	e2c4      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 800ea9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800eaa2:	496f      	ldr	r1, [pc, #444]	; (800ec60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7f7 ff2e 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800eaaa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800eaae:	f107 0308 	add.w	r3, r7, #8
 800eab2:	4611      	mov	r1, r2
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7f8 faea 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800eaba:	4603      	mov	r3, r0
 800eabc:	461d      	mov	r5, r3
 800eabe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7f8 fad7 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800eac8:	2d00      	cmp	r5, #0
 800eaca:	d003      	beq.n	800ead4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2201      	movs	r2, #1
 800ead0:	749a      	strb	r2, [r3, #18]
 800ead2:	e2a9      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 800ead4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ead8:	4962      	ldr	r1, [pc, #392]	; (800ec64 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 800eada:	4618      	mov	r0, r3
 800eadc:	f7f7 ff13 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800eae0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800eae4:	f107 0308 	add.w	r3, r7, #8
 800eae8:	4611      	mov	r1, r2
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7f8 facf 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	461d      	mov	r5, r3
 800eaf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7f8 fabc 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800eafe:	2d00      	cmp	r5, #0
 800eb00:	d003      	beq.n	800eb0a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2201      	movs	r2, #1
 800eb06:	74da      	strb	r2, [r3, #19]
 800eb08:	e28e      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 800eb0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800eb0e:	4956      	ldr	r1, [pc, #344]	; (800ec68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7f7 fef8 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800eb16:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800eb1a:	f107 0308 	add.w	r3, r7, #8
 800eb1e:	4611      	mov	r1, r2
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f8 fab4 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800eb26:	4603      	mov	r3, r0
 800eb28:	461d      	mov	r5, r3
 800eb2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7f8 faa1 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800eb34:	2d00      	cmp	r5, #0
 800eb36:	d003      	beq.n	800eb40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	751a      	strb	r2, [r3, #20]
 800eb3e:	e273      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 800eb40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800eb44:	4949      	ldr	r1, [pc, #292]	; (800ec6c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7f7 fedd 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800eb4c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800eb50:	f107 0308 	add.w	r3, r7, #8
 800eb54:	4611      	mov	r1, r2
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7f8 fa99 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	461d      	mov	r5, r3
 800eb60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7f8 fa86 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800eb6a:	2d00      	cmp	r5, #0
 800eb6c:	d003      	beq.n	800eb76 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	759a      	strb	r2, [r3, #22]
 800eb74:	e258      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 800eb76:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800eb7a:	493d      	ldr	r1, [pc, #244]	; (800ec70 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7f7 fec2 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800eb82:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800eb86:	f107 0308 	add.w	r3, r7, #8
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7f7 ff7e 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800eb92:	4603      	mov	r3, r0
 800eb94:	461d      	mov	r5, r3
 800eb96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7f8 fa6b 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800eba0:	2d00      	cmp	r5, #0
 800eba2:	d009      	beq.n	800ebb8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6859      	ldr	r1, [r3, #4]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	689a      	ldr	r2, [r3, #8]
 800ebac:	f107 0310 	add.w	r3, r7, #16
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 fb33 	bl	800f21c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 800ebb6:	e237      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 800ebb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ebbc:	492d      	ldr	r1, [pc, #180]	; (800ec74 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7f7 fea1 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ebc4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800ebc8:	f107 0308 	add.w	r3, r7, #8
 800ebcc:	4611      	mov	r1, r2
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7f7 ff5d 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	461d      	mov	r5, r3
 800ebd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7f8 fa4a 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ebe2:	2d00      	cmp	r5, #0
 800ebe4:	d009      	beq.n	800ebfa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6859      	ldr	r1, [r3, #4]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	689a      	ldr	r2, [r3, #8]
 800ebee:	f107 0310 	add.w	r3, r7, #16
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 fc40 	bl	800f478 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 800ebf8:	e216      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 800ebfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ebfe:	491e      	ldr	r1, [pc, #120]	; (800ec78 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7f7 fe80 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ec06:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800ec0a:	f107 0308 	add.w	r3, r7, #8
 800ec0e:	4611      	mov	r1, r2
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7f7 ff3c 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800ec16:	4603      	mov	r3, r0
 800ec18:	461d      	mov	r5, r3
 800ec1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7f8 fa29 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ec24:	2d00      	cmp	r5, #0
 800ec26:	d029      	beq.n	800ec7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6859      	ldr	r1, [r3, #4]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	689a      	ldr	r2, [r3, #8]
 800ec30:	f107 0310 	add.w	r3, r7, #16
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 fc61 	bl	800f4fc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800ec40:	e1f2      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800ec42:	bf00      	nop
 800ec44:	08015de4 	.word	0x08015de4
 800ec48:	08015de8 	.word	0x08015de8
 800ec4c:	08015dec 	.word	0x08015dec
 800ec50:	08015df0 	.word	0x08015df0
 800ec54:	08015df4 	.word	0x08015df4
 800ec58:	08015df8 	.word	0x08015df8
 800ec5c:	08015dfc 	.word	0x08015dfc
 800ec60:	08015e00 	.word	0x08015e00
 800ec64:	08015e04 	.word	0x08015e04
 800ec68:	08015e08 	.word	0x08015e08
 800ec6c:	08015e0c 	.word	0x08015e0c
 800ec70:	08015e10 	.word	0x08015e10
 800ec74:	08015e14 	.word	0x08015e14
 800ec78:	08015e18 	.word	0x08015e18
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 800ec7c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ec80:	49b9      	ldr	r1, [pc, #740]	; (800ef68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f7 fe3f 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ec88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800ec8c:	f107 0308 	add.w	r3, r7, #8
 800ec90:	4611      	mov	r1, r2
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7f7 fefb 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	461d      	mov	r5, r3
 800ec9c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7f8 f9e8 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800eca6:	2d00      	cmp	r5, #0
 800eca8:	d009      	beq.n	800ecbe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6859      	ldr	r1, [r3, #4]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	689a      	ldr	r2, [r3, #8]
 800ecb2:	f107 0310 	add.w	r3, r7, #16
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 fccc 	bl	800f654 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 800ecbc:	e1b4      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 800ecbe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ecc2:	49aa      	ldr	r1, [pc, #680]	; (800ef6c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7f7 fe1e 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ecca:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800ecce:	f107 0308 	add.w	r3, r7, #8
 800ecd2:	4611      	mov	r1, r2
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7f7 feda 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	461d      	mov	r5, r3
 800ecde:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7f8 f9c7 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ece8:	2d00      	cmp	r5, #0
 800ecea:	d009      	beq.n	800ed00 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6859      	ldr	r1, [r3, #4]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	689a      	ldr	r2, [r3, #8]
 800ecf4:	f107 0310 	add.w	r3, r7, #16
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 fcf1 	bl	800f6e0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 800ecfe:	e193      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 800ed00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ed04:	499a      	ldr	r1, [pc, #616]	; (800ef70 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7f7 fdfd 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ed0c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800ed10:	f107 0308 	add.w	r3, r7, #8
 800ed14:	4611      	mov	r1, r2
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7f7 feb9 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	461d      	mov	r5, r3
 800ed20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7f8 f9a6 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ed2a:	2d00      	cmp	r5, #0
 800ed2c:	d009      	beq.n	800ed42 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6859      	ldr	r1, [r3, #4]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	689a      	ldr	r2, [r3, #8]
 800ed36:	f107 0310 	add.w	r3, r7, #16
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 fd16 	bl	800f76c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 800ed40:	e172      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 800ed42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ed46:	498b      	ldr	r1, [pc, #556]	; (800ef74 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7f7 fddc 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ed4e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800ed52:	f107 0308 	add.w	r3, r7, #8
 800ed56:	4611      	mov	r1, r2
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7f7 fe98 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	461d      	mov	r5, r3
 800ed62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7f8 f985 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ed6c:	2d00      	cmp	r5, #0
 800ed6e:	d009      	beq.n	800ed84 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6859      	ldr	r1, [r3, #4]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	689a      	ldr	r2, [r3, #8]
 800ed78:	f107 0310 	add.w	r3, r7, #16
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f000 fd3d 	bl	800f7fc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 800ed82:	e151      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 800ed84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ed88:	497b      	ldr	r1, [pc, #492]	; (800ef78 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7f7 fdbb 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ed90:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800ed94:	f107 0308 	add.w	r3, r7, #8
 800ed98:	4611      	mov	r1, r2
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7f7 fe77 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800eda0:	4603      	mov	r3, r0
 800eda2:	461d      	mov	r5, r3
 800eda4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7f8 f964 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800edae:	2d00      	cmp	r5, #0
 800edb0:	d009      	beq.n	800edc6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6859      	ldr	r1, [r3, #4]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	689a      	ldr	r2, [r3, #8]
 800edba:	f107 0310 	add.w	r3, r7, #16
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fd5e 	bl	800f880 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 800edc4:	e130      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 800edc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800edca:	496c      	ldr	r1, [pc, #432]	; (800ef7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 800edcc:	4618      	mov	r0, r3
 800edce:	f7f7 fd9a 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800edd2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800edd6:	f107 0308 	add.w	r3, r7, #8
 800edda:	4611      	mov	r1, r2
 800eddc:	4618      	mov	r0, r3
 800edde:	f7f7 fe56 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800ede2:	4603      	mov	r3, r0
 800ede4:	461d      	mov	r5, r3
 800ede6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800edea:	4618      	mov	r0, r3
 800edec:	f7f8 f943 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800edf0:	2d00      	cmp	r5, #0
 800edf2:	d009      	beq.n	800ee08 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6859      	ldr	r1, [r3, #4]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	689a      	ldr	r2, [r3, #8]
 800edfc:	f107 0310 	add.w	r3, r7, #16
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f000 fd83 	bl	800f90c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 800ee06:	e10f      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 800ee08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800ee0c:	495c      	ldr	r1, [pc, #368]	; (800ef80 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7f7 fd79 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ee14:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800ee18:	f107 0308 	add.w	r3, r7, #8
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7f7 fe35 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800ee24:	4603      	mov	r3, r0
 800ee26:	461d      	mov	r5, r3
 800ee28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7f8 f922 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ee32:	2d00      	cmp	r5, #0
 800ee34:	d009      	beq.n	800ee4a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6859      	ldr	r1, [r3, #4]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	689a      	ldr	r2, [r3, #8]
 800ee3e:	f107 0310 	add.w	r3, r7, #16
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 fda8 	bl	800f998 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 800ee48:	e0ee      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 800ee4a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ee4e:	494d      	ldr	r1, [pc, #308]	; (800ef84 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7f7 fd58 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ee56:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800ee5a:	f107 0308 	add.w	r3, r7, #8
 800ee5e:	4611      	mov	r1, r2
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7f7 fe14 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800ee66:	4603      	mov	r3, r0
 800ee68:	461d      	mov	r5, r3
 800ee6a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7f8 f901 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ee74:	2d00      	cmp	r5, #0
 800ee76:	d00c      	beq.n	800ee92 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6859      	ldr	r1, [r3, #4]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	689a      	ldr	r2, [r3, #8]
 800ee80:	f107 0310 	add.w	r3, r7, #16
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f000 fa29 	bl	800f2dc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800ee90:	e0ca      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 800ee92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ee96:	493c      	ldr	r1, [pc, #240]	; (800ef88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7f7 fd34 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ee9e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800eea2:	f107 0308 	add.w	r3, r7, #8
 800eea6:	4611      	mov	r1, r2
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7f7 fdf0 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	461d      	mov	r5, r3
 800eeb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7f8 f8dd 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800eebc:	2d00      	cmp	r5, #0
 800eebe:	d00b      	beq.n	800eed8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6859      	ldr	r1, [r3, #4]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	689a      	ldr	r2, [r3, #8]
 800eec8:	f107 0310 	add.w	r3, r7, #16
 800eecc:	482e      	ldr	r0, [pc, #184]	; (800ef88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800eece:	9000      	str	r0, [sp, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 fda9 	bl	800fa28 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800eed6:	e0a7      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 800eed8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800eedc:	492b      	ldr	r1, [pc, #172]	; (800ef8c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800eede:	4618      	mov	r0, r3
 800eee0:	f7f7 fd11 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800eee4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800eee8:	f107 0308 	add.w	r3, r7, #8
 800eeec:	4611      	mov	r1, r2
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7f7 fdcd 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800eef4:	4603      	mov	r3, r0
 800eef6:	461d      	mov	r5, r3
 800eef8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7f8 f8ba 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ef02:	2d00      	cmp	r5, #0
 800ef04:	d00b      	beq.n	800ef1e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6859      	ldr	r1, [r3, #4]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	689a      	ldr	r2, [r3, #8]
 800ef0e:	f107 0310 	add.w	r3, r7, #16
 800ef12:	481e      	ldr	r0, [pc, #120]	; (800ef8c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800ef14:	9000      	str	r0, [sp, #0]
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 fd86 	bl	800fa28 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800ef1c:	e084      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 800ef1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ef22:	491b      	ldr	r1, [pc, #108]	; (800ef90 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7f7 fcee 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800ef2a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800ef2e:	f107 0308 	add.w	r3, r7, #8
 800ef32:	4611      	mov	r1, r2
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7f7 fdaa 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	461d      	mov	r5, r3
 800ef3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7f8 f897 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800ef48:	2d00      	cmp	r5, #0
 800ef4a:	d023      	beq.n	800ef94 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6859      	ldr	r1, [r3, #4]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	689a      	ldr	r2, [r3, #8]
 800ef54:	f107 0310 	add.w	r3, r7, #16
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f000 fe3b 	bl	800fbd4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800ef64:	e060      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800ef66:	bf00      	nop
 800ef68:	08015e1c 	.word	0x08015e1c
 800ef6c:	08015e20 	.word	0x08015e20
 800ef70:	08015e24 	.word	0x08015e24
 800ef74:	08015e2c 	.word	0x08015e2c
 800ef78:	08015e30 	.word	0x08015e30
 800ef7c:	08015e34 	.word	0x08015e34
 800ef80:	08015e38 	.word	0x08015e38
 800ef84:	08015e40 	.word	0x08015e40
 800ef88:	08015e44 	.word	0x08015e44
 800ef8c:	08015e4c 	.word	0x08015e4c
 800ef90:	08015e5c 	.word	0x08015e5c
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 800ef94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800ef98:	4930      	ldr	r1, [pc, #192]	; (800f05c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7f7 fcb3 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800efa0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800efa4:	f107 0308 	add.w	r3, r7, #8
 800efa8:	4611      	mov	r1, r2
 800efaa:	4618      	mov	r0, r3
 800efac:	f7f7 fd6f 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800efb0:	4603      	mov	r3, r0
 800efb2:	461d      	mov	r5, r3
 800efb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800efb8:	4618      	mov	r0, r3
 800efba:	f7f8 f85c 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800efbe:	2d00      	cmp	r5, #0
 800efc0:	d00e      	beq.n	800efe0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	331c      	adds	r3, #28
 800efc8:	681d      	ldr	r5, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6859      	ldr	r1, [r3, #4]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	689a      	ldr	r2, [r3, #8]
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	6838      	ldr	r0, [r7, #0]
 800efd6:	47a8      	blx	r5
 800efd8:	4603      	mov	r3, r0
 800efda:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800efde:	e023      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 800efe0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800efe4:	491e      	ldr	r1, [pc, #120]	; (800f060 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7f7 fc8d 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800efec:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800eff0:	f107 0308 	add.w	r3, r7, #8
 800eff4:	4611      	mov	r1, r2
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7f7 fd49 	bl	8006a8e <_ZNK12SimpleString10startsWithERKS_>
 800effc:	4603      	mov	r3, r0
 800effe:	461d      	mov	r5, r3
 800f000:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f004:	4618      	mov	r0, r3
 800f006:	f7f8 f836 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f00a:	2d00      	cmp	r5, #0
 800f00c:	d009      	beq.n	800f022 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6859      	ldr	r1, [r3, #4]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	689a      	ldr	r2, [r3, #8]
 800f016:	f107 0310 	add.w	r3, r7, #16
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 fd98 	bl	800fb50 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 800f020:	e002      	b.n	800f028 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 800f022:	2300      	movs	r3, #0
 800f024:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 800f028:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d102      	bne.n	800f036 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 800f030:	2400      	movs	r4, #0
 800f032:	2500      	movs	r5, #0
 800f034:	e000      	b.n	800f038 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 800f036:	2501      	movs	r5, #1
 800f038:	f107 0308 	add.w	r3, r7, #8
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7f8 f81a 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f042:	2d01      	cmp	r5, #1
 800f044:	d104      	bne.n	800f050 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	3301      	adds	r3, #1
 800f04a:	613b      	str	r3, [r7, #16]
 800f04c:	e455      	b.n	800e8fa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 800f04e:	2401      	movs	r4, #1
 800f050:	4623      	mov	r3, r4
}
 800f052:	4618      	mov	r0, r3
 800f054:	37f0      	adds	r7, #240	; 0xf0
 800f056:	46bd      	mov	sp, r7
 800f058:	bdb0      	pop	{r4, r5, r7, pc}
 800f05a:	bf00      	nop
 800f05c:	08015df4 	.word	0x08015df4
 800f060:	08015e60 	.word	0x08015e60

0800f064 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 800f06c:	4b03      	ldr	r3, [pc, #12]	; (800f07c <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 800f06e:	4618      	mov	r0, r3
 800f070:	370c      	adds	r7, #12
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	08015e64 	.word	0x08015e64

0800f080 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 800f088:	4b03      	ldr	r3, [pc, #12]	; (800f098 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	370c      	adds	r7, #12
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop
 800f098:	08015f94 	.word	0x08015f94

0800f09c <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
    return needHelp_;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	7b1b      	ldrb	r3, [r3, #12]
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	370c      	adds	r7, #12
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
    return verbose_;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	7b5b      	ldrb	r3, [r3, #13]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	370c      	adds	r7, #12
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr

0800f0cc <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b083      	sub	sp, #12
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	7b9b      	ldrb	r3, [r3, #14]
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
    return color_;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	7bdb      	ldrb	r3, [r3, #15]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr

0800f0fc <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	7c5b      	ldrb	r3, [r3, #17]
}
 800f108:	4618      	mov	r0, r3
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	7c9b      	ldrb	r3, [r3, #18]
}
 800f120:	4618      	mov	r0, r3
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	7cdb      	ldrb	r3, [r3, #19]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	7d1b      	ldrb	r3, [r3, #20]
}
 800f150:	4618      	mov	r0, r3
 800f152:	370c      	adds	r7, #12
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr

0800f15c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 800f15c:	b480      	push	{r7}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	7c1b      	ldrb	r3, [r3, #16]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
    return repeat_;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	69db      	ldr	r3, [r3, #28]
}
 800f180:	4618      	mov	r0, r3
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
    return reversing_;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	7d5b      	ldrb	r3, [r3, #21]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	7d9b      	ldrb	r3, [r3, #22]
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	370c      	adds	r7, #12
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr

0800f1bc <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
    return shuffling_;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	7ddb      	ldrb	r3, [r3, #23]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	370c      	adds	r7, #12
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6a1b      	ldr	r3, [r3, #32]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800f210:	4618      	mov	r0, r3
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]
 800f228:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2200      	movs	r2, #0
 800f22e:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	4413      	add	r3, r2
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	f107 0310 	add.w	r3, r7, #16
 800f240:	4611      	mov	r1, r2
 800f242:	4618      	mov	r0, r3
 800f244:	f7f7 fb5f 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 800f248:	f107 0310 	add.w	r3, r7, #16
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7f7 fef1 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800f252:	4603      	mov	r3, r0
 800f254:	2b02      	cmp	r3, #2
 800f256:	bf8c      	ite	hi
 800f258:	2301      	movhi	r3, #1
 800f25a:	2300      	movls	r3, #0
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00e      	beq.n	800f280 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	687a      	ldr	r2, [r7, #4]
 800f26a:	4413      	add	r3, r2
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	3302      	adds	r3, #2
 800f270:	4618      	mov	r0, r3
 800f272:	f7f7 f944 	bl	80064fe <_ZN12SimpleString4AtoIEPKc>
 800f276:	4603      	mov	r3, r0
 800f278:	461a      	mov	r2, r3
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	61da      	str	r2, [r3, #28]
 800f27e:	e01c      	b.n	800f2ba <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	3301      	adds	r3, #1
 800f286:	68ba      	ldr	r2, [r7, #8]
 800f288:	429a      	cmp	r2, r3
 800f28a:	dd16      	ble.n	800f2ba <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	3301      	adds	r3, #1
 800f292:	009b      	lsls	r3, r3, #2
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	4413      	add	r3, r2
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7f7 f92f 	bl	80064fe <_ZN12SimpleString4AtoIEPKc>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	69db      	ldr	r3, [r3, #28]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d004      	beq.n	800f2ba <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	1c5a      	adds	r2, r3, #1
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	69db      	ldr	r3, [r3, #28]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d102      	bne.n	800f2c8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2202      	movs	r2, #2
 800f2c6:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 800f2c8:	f107 0310 	add.w	r3, r7, #16
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7f7 fed2 	bl	8007076 <_ZN12SimpleStringD1Ev>

}
 800f2d2:	bf00      	nop
 800f2d4:	3718      	adds	r7, #24
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
	...

0800f2dc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 800f2dc:	b590      	push	{r4, r7, lr}
 800f2de:	b089      	sub	sp, #36	; 0x24
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
 800f2e8:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 800f2f0:	4b34      	ldr	r3, [pc, #208]	; (800f3c4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4798      	blx	r3
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	6a1b      	ldr	r3, [r3, #32]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d104      	bne.n	800f310 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	6a1b      	ldr	r3, [r3, #32]
 800f30a:	1c5a      	adds	r2, r3, #1
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	4413      	add	r3, r2
 800f31a:	681a      	ldr	r2, [r3, #0]
 800f31c:	f107 0314 	add.w	r3, r7, #20
 800f320:	4611      	mov	r1, r2
 800f322:	4618      	mov	r0, r3
 800f324:	f7f7 faef 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 800f328:	f107 0314 	add.w	r3, r7, #20
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7f7 fe81 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800f332:	4603      	mov	r3, r0
 800f334:	2b02      	cmp	r3, #2
 800f336:	bf8c      	ite	hi
 800f338:	2301      	movhi	r3, #1
 800f33a:	2300      	movls	r3, #0
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d010      	beq.n	800f364 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2201      	movs	r2, #1
 800f346:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	4413      	add	r3, r2
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	3302      	adds	r3, #2
 800f356:	4618      	mov	r0, r3
 800f358:	f7f7 f898 	bl	800648c <_ZN12SimpleString4AtoUEPKc>
 800f35c:	4602      	mov	r2, r0
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	621a      	str	r2, [r3, #32]
 800f362:	e01e      	b.n	800f3a2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	3301      	adds	r3, #1
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	dd18      	ble.n	800f3a2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	3301      	adds	r3, #1
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	4413      	add	r3, r2
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4618      	mov	r0, r3
 800f380:	f7f7 f884 	bl	800648c <_ZN12SimpleString4AtoUEPKc>
 800f384:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d00a      	beq.n	800f3a2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2201      	movs	r2, #1
 800f390:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	69fa      	ldr	r2, [r7, #28]
 800f396:	621a      	str	r2, [r3, #32]
            i++;
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	1c5a      	adds	r2, r3, #1
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	6a1b      	ldr	r3, [r3, #32]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	bf14      	ite	ne
 800f3aa:	2301      	movne	r3, #1
 800f3ac:	2300      	moveq	r3, #0
 800f3ae:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 800f3b0:	f107 0314 	add.w	r3, r7, #20
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7f7 fe5e 	bl	8007076 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 800f3ba:	4623      	mov	r3, r4
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3724      	adds	r7, #36	; 0x24
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd90      	pop	{r4, r7, pc}
 800f3c4:	200000a4 	.word	0x200000a4

0800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b088      	sub	sp, #32
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
 800f3d4:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 800f3d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3d8:	f7f7 fe2c 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800f3dc:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	683a      	ldr	r2, [r7, #0]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	f107 0314 	add.w	r3, r7, #20
 800f3ee:	4611      	mov	r1, r2
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7f7 fa88 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 800f3f6:	f107 0314 	add.w	r3, r7, #20
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7f7 fe1a 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800f400:	4602      	mov	r2, r0
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	4293      	cmp	r3, r2
 800f406:	bf34      	ite	cc
 800f408:	2301      	movcc	r3, #1
 800f40a:	2300      	movcs	r3, #0
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00c      	beq.n	800f42c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 800f412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	683a      	ldr	r2, [r7, #0]
 800f41a:	4413      	add	r3, r2
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	4413      	add	r3, r2
 800f422:	4619      	mov	r1, r3
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f7f7 fa6e 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f42a:	e019      	b.n	800f460 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 800f42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	3301      	adds	r3, #1
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	429a      	cmp	r2, r3
 800f436:	dd0f      	ble.n	800f458 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 800f438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	1c5a      	adds	r2, r3, #1
 800f43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f440:	601a      	str	r2, [r3, #0]
 800f442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	4413      	add	r3, r2
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4619      	mov	r1, r3
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f7f7 fa58 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f456:	e003      	b.n	800f460 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 800f458:	4906      	ldr	r1, [pc, #24]	; (800f474 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f7f7 fa53 	bl	8006906 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 800f460:	f107 0314 	add.w	r3, r7, #20
 800f464:	4618      	mov	r0, r3
 800f466:	f7f7 fe06 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	3720      	adds	r7, #32
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	08015de0 	.word	0x08015de0

0800f478 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 800f478:	b5b0      	push	{r4, r5, r7, lr}
 800f47a:	b08c      	sub	sp, #48	; 0x30
 800f47c:	af02      	add	r7, sp, #8
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	607a      	str	r2, [r7, #4]
 800f484:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 800f486:	f107 031c 	add.w	r3, r7, #28
 800f48a:	491a      	ldr	r1, [pc, #104]	; (800f4f4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7f7 fa3a 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f492:	f107 0014 	add.w	r0, r7, #20
 800f496:	f107 031c 	add.w	r3, r7, #28
 800f49a:	9301      	str	r3, [sp, #4]
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	9300      	str	r3, [sp, #0]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	68f9      	ldr	r1, [r7, #12]
 800f4a6:	f7ff ff8f 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f4aa:	f107 0514 	add.w	r5, r7, #20
 800f4ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f4b2:	4911      	ldr	r1, [pc, #68]	; (800f4f8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 800f4b4:	2010      	movs	r0, #16
 800f4b6:	f7f6 fb3d 	bl	8005b34 <_ZnwjPKci>
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	4629      	mov	r1, r5
 800f4be:	4620      	mov	r0, r4
 800f4c0:	f001 fe36 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800f4c4:	627c      	str	r4, [r7, #36]	; 0x24
 800f4c6:	f107 0314 	add.w	r3, r7, #20
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7f7 fdd3 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f4d0:	f107 031c 	add.w	r3, r7, #28
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7f7 fdce 	bl	8007076 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4de:	4619      	mov	r1, r3
 800f4e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4e2:	f001 fe45 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f4ec:	bf00      	nop
 800f4ee:	3728      	adds	r7, #40	; 0x28
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bdb0      	pop	{r4, r5, r7, pc}
 800f4f4:	08015e14 	.word	0x08015e14
 800f4f8:	080167a8 	.word	0x080167a8

0800f4fc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 800f4fc:	b5b0      	push	{r4, r5, r7, lr}
 800f4fe:	b092      	sub	sp, #72	; 0x48
 800f500:	af02      	add	r7, sp, #8
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 800f50a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f50e:	494e      	ldr	r1, [pc, #312]	; (800f648 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 800f510:	4618      	mov	r0, r3
 800f512:	f7f7 f9f8 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f516:	f107 0020 	add.w	r0, r7, #32
 800f51a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f51e:	9301      	str	r3, [sp, #4]
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	9300      	str	r3, [sp, #0]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	68ba      	ldr	r2, [r7, #8]
 800f528:	68f9      	ldr	r1, [r7, #12]
 800f52a:	f7ff ff4d 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f52e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f532:	4618      	mov	r0, r3
 800f534:	f7f7 fd9f 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 800f538:	f107 0310 	add.w	r3, r7, #16
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7f8 fba1 	bl	8007c84 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 800f542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f546:	4941      	ldr	r1, [pc, #260]	; (800f64c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 800f548:	4618      	mov	r0, r3
 800f54a:	f7f7 f9dc 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f54e:	f107 0210 	add.w	r2, r7, #16
 800f552:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f556:	f107 0320 	add.w	r3, r7, #32
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7f7 fb3f 	bl	8006bde <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 800f560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f564:	4618      	mov	r0, r3
 800f566:	f7f7 fd86 	bl	8007076 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 800f56a:	f107 0310 	add.w	r3, r7, #16
 800f56e:	4618      	mov	r0, r3
 800f570:	f7f8 fc2d 	bl	8007dce <_ZNK22SimpleStringCollection4sizeEv>
 800f574:	4603      	mov	r3, r0
 800f576:	2b02      	cmp	r3, #2
 800f578:	bf14      	ite	ne
 800f57a:	2301      	movne	r3, #1
 800f57c:	2300      	moveq	r3, #0
 800f57e:	b2db      	uxtb	r3, r3
 800f580:	2b00      	cmp	r3, #0
 800f582:	d001      	beq.n	800f588 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 800f584:	2400      	movs	r4, #0
 800f586:	e04f      	b.n	800f628 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 800f588:	f107 0310 	add.w	r3, r7, #16
 800f58c:	2100      	movs	r1, #0
 800f58e:	4618      	mov	r0, r3
 800f590:	f7f8 fc2a 	bl	8007de8 <_ZN22SimpleStringCollectionixEj>
 800f594:	4604      	mov	r4, r0
 800f596:	f107 0310 	add.w	r3, r7, #16
 800f59a:	2100      	movs	r1, #0
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7f8 fc23 	bl	8007de8 <_ZN22SimpleStringCollectionixEj>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7f7 fd45 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	4621      	mov	r1, r4
 800f5b6:	f7f7 fe67 	bl	8007288 <_ZNK12SimpleString9subStringEjj>
 800f5ba:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800f5be:	f44f 728f 	mov.w	r2, #286	; 0x11e
 800f5c2:	4923      	ldr	r1, [pc, #140]	; (800f650 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 800f5c4:	2010      	movs	r0, #16
 800f5c6:	f7f6 fab5 	bl	8005b34 <_ZnwjPKci>
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	4629      	mov	r1, r5
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f001 fdae 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d8:	4619      	mov	r1, r3
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f001 fdc8 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	625a      	str	r2, [r3, #36]	; 0x24
 800f5e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7f7 fd43 	bl	8007076 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 800f5f0:	f107 0310 	add.w	r3, r7, #16
 800f5f4:	2101      	movs	r1, #1
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7f8 fbf6 	bl	8007de8 <_ZN22SimpleStringCollectionixEj>
 800f5fc:	4605      	mov	r5, r0
 800f5fe:	f240 121f 	movw	r2, #287	; 0x11f
 800f602:	4913      	ldr	r1, [pc, #76]	; (800f650 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 800f604:	2010      	movs	r0, #16
 800f606:	f7f6 fa95 	bl	8005b34 <_ZnwjPKci>
 800f60a:	4604      	mov	r4, r0
 800f60c:	4629      	mov	r1, r5
 800f60e:	4620      	mov	r0, r4
 800f610:	f001 fd8e 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f618:	4619      	mov	r1, r3
 800f61a:	4620      	mov	r0, r4
 800f61c:	f001 fda8 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800f620:	4602      	mov	r2, r0
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 800f626:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 800f628:	f107 0310 	add.w	r3, r7, #16
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7f8 fb9d 	bl	8007d6c <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 800f632:	f107 0320 	add.w	r3, r7, #32
 800f636:	4618      	mov	r0, r3
 800f638:	f7f7 fd1d 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f63c:	4623      	mov	r3, r4
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3740      	adds	r7, #64	; 0x40
 800f642:	46bd      	mov	sp, r7
 800f644:	bdb0      	pop	{r4, r5, r7, pc}
 800f646:	bf00      	nop
 800f648:	08015e18 	.word	0x08015e18
 800f64c:	080167c8 	.word	0x080167c8
 800f650:	080167a8 	.word	0x080167a8

0800f654 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 800f654:	b5b0      	push	{r4, r5, r7, lr}
 800f656:	b08c      	sub	sp, #48	; 0x30
 800f658:	af02      	add	r7, sp, #8
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	607a      	str	r2, [r7, #4]
 800f660:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 800f662:	f107 031c 	add.w	r3, r7, #28
 800f666:	491c      	ldr	r1, [pc, #112]	; (800f6d8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 800f668:	4618      	mov	r0, r3
 800f66a:	f7f7 f94c 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f66e:	f107 0014 	add.w	r0, r7, #20
 800f672:	f107 031c 	add.w	r3, r7, #28
 800f676:	9301      	str	r3, [sp, #4]
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	68ba      	ldr	r2, [r7, #8]
 800f680:	68f9      	ldr	r1, [r7, #12]
 800f682:	f7ff fea1 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f686:	f107 0514 	add.w	r5, r7, #20
 800f68a:	f240 1225 	movw	r2, #293	; 0x125
 800f68e:	4913      	ldr	r1, [pc, #76]	; (800f6dc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 800f690:	2010      	movs	r0, #16
 800f692:	f7f6 fa4f 	bl	8005b34 <_ZnwjPKci>
 800f696:	4604      	mov	r4, r0
 800f698:	4629      	mov	r1, r5
 800f69a:	4620      	mov	r0, r4
 800f69c:	f001 fd48 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800f6a0:	627c      	str	r4, [r7, #36]	; 0x24
 800f6a2:	f107 0314 	add.w	r3, r7, #20
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7f7 fce5 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f6ac:	f107 031c 	add.w	r3, r7, #28
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7f7 fce0 	bl	8007076 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 800f6b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6b8:	f001 fd75 	bl	80111a6 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6c4:	f001 fd54 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f6ce:	bf00      	nop
 800f6d0:	3728      	adds	r7, #40	; 0x28
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bdb0      	pop	{r4, r5, r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	08015e1c 	.word	0x08015e1c
 800f6dc:	080167a8 	.word	0x080167a8

0800f6e0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 800f6e0:	b5b0      	push	{r4, r5, r7, lr}
 800f6e2:	b08c      	sub	sp, #48	; 0x30
 800f6e4:	af02      	add	r7, sp, #8
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
 800f6ec:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 800f6ee:	f107 031c 	add.w	r3, r7, #28
 800f6f2:	491c      	ldr	r1, [pc, #112]	; (800f764 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7f7 f906 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f6fa:	f107 0014 	add.w	r0, r7, #20
 800f6fe:	f107 031c 	add.w	r3, r7, #28
 800f702:	9301      	str	r3, [sp, #4]
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	9300      	str	r3, [sp, #0]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	68f9      	ldr	r1, [r7, #12]
 800f70e:	f7ff fe5b 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f712:	f107 0514 	add.w	r5, r7, #20
 800f716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f71a:	4913      	ldr	r1, [pc, #76]	; (800f768 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 800f71c:	2010      	movs	r0, #16
 800f71e:	f7f6 fa09 	bl	8005b34 <_ZnwjPKci>
 800f722:	4604      	mov	r4, r0
 800f724:	4629      	mov	r1, r5
 800f726:	4620      	mov	r0, r4
 800f728:	f001 fd02 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800f72c:	627c      	str	r4, [r7, #36]	; 0x24
 800f72e:	f107 0314 	add.w	r3, r7, #20
 800f732:	4618      	mov	r0, r3
 800f734:	f7f7 fc9f 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f738:	f107 031c 	add.w	r3, r7, #28
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7f7 fc9a 	bl	8007076 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 800f742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f744:	f001 fd3c 	bl	80111c0 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f74c:	4619      	mov	r1, r3
 800f74e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f750:	f001 fd0e 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800f754:	4602      	mov	r2, r0
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f75a:	bf00      	nop
 800f75c:	3728      	adds	r7, #40	; 0x28
 800f75e:	46bd      	mov	sp, r7
 800f760:	bdb0      	pop	{r4, r5, r7, pc}
 800f762:	bf00      	nop
 800f764:	08015e20 	.word	0x08015e20
 800f768:	080167a8 	.word	0x080167a8

0800f76c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 800f76c:	b5b0      	push	{r4, r5, r7, lr}
 800f76e:	b08c      	sub	sp, #48	; 0x30
 800f770:	af02      	add	r7, sp, #8
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	607a      	str	r2, [r7, #4]
 800f778:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 800f77a:	f107 031c 	add.w	r3, r7, #28
 800f77e:	491d      	ldr	r1, [pc, #116]	; (800f7f4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 800f780:	4618      	mov	r0, r3
 800f782:	f7f7 f8c0 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f786:	f107 0014 	add.w	r0, r7, #20
 800f78a:	f107 031c 	add.w	r3, r7, #28
 800f78e:	9301      	str	r3, [sp, #4]
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	68ba      	ldr	r2, [r7, #8]
 800f798:	68f9      	ldr	r1, [r7, #12]
 800f79a:	f7ff fe15 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f79e:	f107 0514 	add.w	r5, r7, #20
 800f7a2:	f240 1233 	movw	r2, #307	; 0x133
 800f7a6:	4914      	ldr	r1, [pc, #80]	; (800f7f8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 800f7a8:	2010      	movs	r0, #16
 800f7aa:	f7f6 f9c3 	bl	8005b34 <_ZnwjPKci>
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	4629      	mov	r1, r5
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f001 fcbc 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800f7b8:	627c      	str	r4, [r7, #36]	; 0x24
 800f7ba:	f107 0314 	add.w	r3, r7, #20
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7f7 fc59 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f7c4:	f107 031c 	add.w	r3, r7, #28
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7f7 fc54 	bl	8007076 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 800f7ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7d0:	f001 fce9 	bl	80111a6 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 800f7d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7d6:	f001 fcf3 	bl	80111c0 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7de:	4619      	mov	r1, r3
 800f7e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7e2:	f001 fcc5 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f7ec:	bf00      	nop
 800f7ee:	3728      	adds	r7, #40	; 0x28
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bdb0      	pop	{r4, r5, r7, pc}
 800f7f4:	08015e24 	.word	0x08015e24
 800f7f8:	080167a8 	.word	0x080167a8

0800f7fc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 800f7fc:	b5b0      	push	{r4, r5, r7, lr}
 800f7fe:	b08c      	sub	sp, #48	; 0x30
 800f800:	af02      	add	r7, sp, #8
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
 800f808:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 800f80a:	f107 031c 	add.w	r3, r7, #28
 800f80e:	491a      	ldr	r1, [pc, #104]	; (800f878 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 800f810:	4618      	mov	r0, r3
 800f812:	f7f7 f878 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f816:	f107 0014 	add.w	r0, r7, #20
 800f81a:	f107 031c 	add.w	r3, r7, #28
 800f81e:	9301      	str	r3, [sp, #4]
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	9300      	str	r3, [sp, #0]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	68f9      	ldr	r1, [r7, #12]
 800f82a:	f7ff fdcd 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f82e:	f107 0514 	add.w	r5, r7, #20
 800f832:	f240 123b 	movw	r2, #315	; 0x13b
 800f836:	4911      	ldr	r1, [pc, #68]	; (800f87c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 800f838:	2010      	movs	r0, #16
 800f83a:	f7f6 f97b 	bl	8005b34 <_ZnwjPKci>
 800f83e:	4604      	mov	r4, r0
 800f840:	4629      	mov	r1, r5
 800f842:	4620      	mov	r0, r4
 800f844:	f001 fc74 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800f848:	627c      	str	r4, [r7, #36]	; 0x24
 800f84a:	f107 0314 	add.w	r3, r7, #20
 800f84e:	4618      	mov	r0, r3
 800f850:	f7f7 fc11 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f854:	f107 031c 	add.w	r3, r7, #28
 800f858:	4618      	mov	r0, r3
 800f85a:	f7f7 fc0c 	bl	8007076 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f862:	4619      	mov	r1, r3
 800f864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f866:	f001 fc83 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800f86a:	4602      	mov	r2, r0
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f870:	bf00      	nop
 800f872:	3728      	adds	r7, #40	; 0x28
 800f874:	46bd      	mov	sp, r7
 800f876:	bdb0      	pop	{r4, r5, r7, pc}
 800f878:	08015e2c 	.word	0x08015e2c
 800f87c:	080167a8 	.word	0x080167a8

0800f880 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 800f880:	b5b0      	push	{r4, r5, r7, lr}
 800f882:	b08c      	sub	sp, #48	; 0x30
 800f884:	af02      	add	r7, sp, #8
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
 800f88c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 800f88e:	f107 031c 	add.w	r3, r7, #28
 800f892:	491c      	ldr	r1, [pc, #112]	; (800f904 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 800f894:	4618      	mov	r0, r3
 800f896:	f7f7 f836 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f89a:	f107 0014 	add.w	r0, r7, #20
 800f89e:	f107 031c 	add.w	r3, r7, #28
 800f8a2:	9301      	str	r3, [sp, #4]
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	68ba      	ldr	r2, [r7, #8]
 800f8ac:	68f9      	ldr	r1, [r7, #12]
 800f8ae:	f7ff fd8b 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f8b2:	f107 0514 	add.w	r5, r7, #20
 800f8b6:	f240 1241 	movw	r2, #321	; 0x141
 800f8ba:	4913      	ldr	r1, [pc, #76]	; (800f908 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 800f8bc:	2010      	movs	r0, #16
 800f8be:	f7f6 f939 	bl	8005b34 <_ZnwjPKci>
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f001 fc32 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800f8cc:	627c      	str	r4, [r7, #36]	; 0x24
 800f8ce:	f107 0314 	add.w	r3, r7, #20
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7f7 fbcf 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f8d8:	f107 031c 	add.w	r3, r7, #28
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7f7 fbca 	bl	8007076 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 800f8e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8e4:	f001 fc5f 	bl	80111a6 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8f0:	f001 fc3e 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f8fa:	bf00      	nop
 800f8fc:	3728      	adds	r7, #40	; 0x28
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bdb0      	pop	{r4, r5, r7, pc}
 800f902:	bf00      	nop
 800f904:	08015e30 	.word	0x08015e30
 800f908:	080167a8 	.word	0x080167a8

0800f90c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 800f90c:	b5b0      	push	{r4, r5, r7, lr}
 800f90e:	b08c      	sub	sp, #48	; 0x30
 800f910:	af02      	add	r7, sp, #8
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
 800f918:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 800f91a:	f107 031c 	add.w	r3, r7, #28
 800f91e:	491c      	ldr	r1, [pc, #112]	; (800f990 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 800f920:	4618      	mov	r0, r3
 800f922:	f7f6 fff0 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f926:	f107 0014 	add.w	r0, r7, #20
 800f92a:	f107 031c 	add.w	r3, r7, #28
 800f92e:	9301      	str	r3, [sp, #4]
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	9300      	str	r3, [sp, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	68f9      	ldr	r1, [r7, #12]
 800f93a:	f7ff fd45 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f93e:	f107 0514 	add.w	r5, r7, #20
 800f942:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f946:	4913      	ldr	r1, [pc, #76]	; (800f994 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 800f948:	2010      	movs	r0, #16
 800f94a:	f7f6 f8f3 	bl	8005b34 <_ZnwjPKci>
 800f94e:	4604      	mov	r4, r0
 800f950:	4629      	mov	r1, r5
 800f952:	4620      	mov	r0, r4
 800f954:	f001 fbec 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800f958:	627c      	str	r4, [r7, #36]	; 0x24
 800f95a:	f107 0314 	add.w	r3, r7, #20
 800f95e:	4618      	mov	r0, r3
 800f960:	f7f7 fb89 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f964:	f107 031c 	add.w	r3, r7, #28
 800f968:	4618      	mov	r0, r3
 800f96a:	f7f7 fb84 	bl	8007076 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 800f96e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f970:	f001 fc26 	bl	80111c0 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f978:	4619      	mov	r1, r3
 800f97a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f97c:	f001 fbf8 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800f980:	4602      	mov	r2, r0
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f986:	bf00      	nop
 800f988:	3728      	adds	r7, #40	; 0x28
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bdb0      	pop	{r4, r5, r7, pc}
 800f98e:	bf00      	nop
 800f990:	08015e34 	.word	0x08015e34
 800f994:	080167a8 	.word	0x080167a8

0800f998 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 800f998:	b5b0      	push	{r4, r5, r7, lr}
 800f99a:	b08c      	sub	sp, #48	; 0x30
 800f99c:	af02      	add	r7, sp, #8
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	607a      	str	r2, [r7, #4]
 800f9a4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 800f9a6:	f107 031c 	add.w	r3, r7, #28
 800f9aa:	491d      	ldr	r1, [pc, #116]	; (800fa20 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7f6 ffaa 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800f9b2:	f107 0014 	add.w	r0, r7, #20
 800f9b6:	f107 031c 	add.w	r3, r7, #28
 800f9ba:	9301      	str	r3, [sp, #4]
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	9300      	str	r3, [sp, #0]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	68ba      	ldr	r2, [r7, #8]
 800f9c4:	68f9      	ldr	r1, [r7, #12]
 800f9c6:	f7ff fcff 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f9ca:	f107 0514 	add.w	r5, r7, #20
 800f9ce:	f240 124f 	movw	r2, #335	; 0x14f
 800f9d2:	4914      	ldr	r1, [pc, #80]	; (800fa24 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 800f9d4:	2010      	movs	r0, #16
 800f9d6:	f7f6 f8ad 	bl	8005b34 <_ZnwjPKci>
 800f9da:	4604      	mov	r4, r0
 800f9dc:	4629      	mov	r1, r5
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f001 fba6 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800f9e4:	627c      	str	r4, [r7, #36]	; 0x24
 800f9e6:	f107 0314 	add.w	r3, r7, #20
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7f7 fb43 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800f9f0:	f107 031c 	add.w	r3, r7, #28
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7f7 fb3e 	bl	8007076 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 800f9fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9fc:	f001 fbe0 	bl	80111c0 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 800fa00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa02:	f001 fbd0 	bl	80111a6 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa0e:	f001 fbaf 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800fa12:	4602      	mov	r2, r0
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fa18:	bf00      	nop
 800fa1a:	3728      	adds	r7, #40	; 0x28
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bdb0      	pop	{r4, r5, r7, pc}
 800fa20:	08015e38 	.word	0x08015e38
 800fa24:	080167a8 	.word	0x080167a8

0800fa28 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 800fa28:	b5b0      	push	{r4, r5, r7, lr}
 800fa2a:	b092      	sub	sp, #72	; 0x48
 800fa2c:	af02      	add	r7, sp, #8
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
 800fa34:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 800fa36:	f107 0320 	add.w	r3, r7, #32
 800fa3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7f6 ff62 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800fa42:	f107 0018 	add.w	r0, r7, #24
 800fa46:	f107 0320 	add.w	r3, r7, #32
 800fa4a:	9301      	str	r3, [sp, #4]
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	9300      	str	r3, [sp, #0]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	68ba      	ldr	r2, [r7, #8]
 800fa54:	68f9      	ldr	r1, [r7, #12]
 800fa56:	f7ff fcb7 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fa5a:	f107 0320 	add.w	r3, r7, #32
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7f7 fb09 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 800fa64:	f107 0010 	add.w	r0, r7, #16
 800fa68:	f107 0118 	add.w	r1, r7, #24
 800fa6c:	2329      	movs	r3, #41	; 0x29
 800fa6e:	222c      	movs	r2, #44	; 0x2c
 800fa70:	f7f7 fcb2 	bl	80073d8 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 800fa74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa78:	f107 0110 	add.w	r1, r7, #16
 800fa7c:	2202      	movs	r2, #2
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7f7 fc4c 	bl	800731c <_ZNK12SimpleString9subStringEj>
 800fa84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fa88:	f107 0310 	add.w	r3, r7, #16
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7f6 ffa5 	bl	80069de <_ZN12SimpleStringaSERKS_>
 800fa94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7f7 faec 	bl	8007076 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 800fa9e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 800faa2:	492a      	ldr	r1, [pc, #168]	; (800fb4c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 800faa4:	2010      	movs	r0, #16
 800faa6:	f7f6 f845 	bl	8005b34 <_ZnwjPKci>
 800faaa:	4604      	mov	r4, r0
 800faac:	f107 0310 	add.w	r3, r7, #16
 800fab0:	4619      	mov	r1, r3
 800fab2:	4620      	mov	r0, r4
 800fab4:	f001 fb3c 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800fab8:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 800faba:	f107 0318 	add.w	r3, r7, #24
 800fabe:	2100      	movs	r1, #0
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7f7 fc3c 	bl	800733e <_ZNK12SimpleString2atEj>
 800fac6:	4603      	mov	r3, r0
 800fac8:	461a      	mov	r2, r3
 800faca:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800face:	f107 0118 	add.w	r1, r7, #24
 800fad2:	232c      	movs	r3, #44	; 0x2c
 800fad4:	f7f7 fc80 	bl	80073d8 <_ZNK12SimpleString17subStringFromTillEcc>
 800fad8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800fadc:	f240 125b 	movw	r2, #347	; 0x15b
 800fae0:	491a      	ldr	r1, [pc, #104]	; (800fb4c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 800fae2:	2010      	movs	r0, #16
 800fae4:	f7f6 f826 	bl	8005b34 <_ZnwjPKci>
 800fae8:	4604      	mov	r4, r0
 800faea:	4629      	mov	r1, r5
 800faec:	4620      	mov	r0, r4
 800faee:	f001 fb1f 	bl	8011130 <_ZN10TestFilterC1ERK12SimpleString>
 800faf2:	63bc      	str	r4, [r7, #56]	; 0x38
 800faf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7f7 fabc 	bl	8007076 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 800fafe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fb00:	f001 fb51 	bl	80111a6 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 800fb04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb06:	f001 fb4e 	bl	80111a6 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb0e:	4619      	mov	r1, r3
 800fb10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb12:	f001 fb2d 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800fb16:	4602      	mov	r2, r0
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb20:	4619      	mov	r1, r3
 800fb22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fb24:	f001 fb24 	bl	8011170 <_ZN10TestFilter3addEPS_>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 800fb2e:	f107 0310 	add.w	r3, r7, #16
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7f7 fa9f 	bl	8007076 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 800fb38:	f107 0318 	add.w	r3, r7, #24
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7f7 fa9a 	bl	8007076 <_ZN12SimpleStringD1Ev>
}
 800fb42:	bf00      	nop
 800fb44:	3740      	adds	r7, #64	; 0x40
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bdb0      	pop	{r4, r5, r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	080167a8 	.word	0x080167a8

0800fb50 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 800fb50:	b590      	push	{r4, r7, lr}
 800fb52:	b08b      	sub	sp, #44	; 0x2c
 800fb54:	af02      	add	r7, sp, #8
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	607a      	str	r2, [r7, #4]
 800fb5c:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 800fb5e:	f107 0318 	add.w	r3, r7, #24
 800fb62:	491b      	ldr	r1, [pc, #108]	; (800fbd0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7f6 fece 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800fb6a:	f107 0010 	add.w	r0, r7, #16
 800fb6e:	f107 0318 	add.w	r3, r7, #24
 800fb72:	9301      	str	r3, [sp, #4]
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	9300      	str	r3, [sp, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	68ba      	ldr	r2, [r7, #8]
 800fb7c:	68f9      	ldr	r1, [r7, #12]
 800fb7e:	f7ff fc23 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fb82:	f107 0318 	add.w	r3, r7, #24
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7f7 fa75 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 800fb8c:	f107 0310 	add.w	r3, r7, #16
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7f7 fa4f 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	bf0c      	ite	eq
 800fb9c:	2301      	moveq	r3, #1
 800fb9e:	2300      	movne	r3, #0
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d001      	beq.n	800fbaa <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 800fba6:	2400      	movs	r4, #0
 800fba8:	e008      	b.n	800fbbc <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	3330      	adds	r3, #48	; 0x30
 800fbae:	f107 0210 	add.w	r2, r7, #16
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7f6 ff12 	bl	80069de <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 800fbba:	2401      	movs	r4, #1
 800fbbc:	f107 0310 	add.w	r3, r7, #16
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f7 fa58 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800fbc6:	2c01      	cmp	r4, #1
}
 800fbc8:	3724      	adds	r7, #36	; 0x24
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd90      	pop	{r4, r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	08015e60 	.word	0x08015e60

0800fbd4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 800fbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbd6:	b093      	sub	sp, #76	; 0x4c
 800fbd8:	af02      	add	r7, sp, #8
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	607a      	str	r2, [r7, #4]
 800fbe0:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 800fbe2:	f107 0318 	add.w	r3, r7, #24
 800fbe6:	4953      	ldr	r1, [pc, #332]	; (800fd34 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7f6 fe8c 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800fbee:	f107 0010 	add.w	r0, r7, #16
 800fbf2:	f107 0318 	add.w	r3, r7, #24
 800fbf6:	9301      	str	r3, [sp, #4]
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	9300      	str	r3, [sp, #0]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	68f9      	ldr	r1, [r7, #12]
 800fc02:	f7ff fbe1 	bl	800f3c8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fc06:	f107 0318 	add.w	r3, r7, #24
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7f7 fa33 	bl	8007076 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 800fc10:	f107 0310 	add.w	r3, r7, #16
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7f7 fa0d 	bl	8007034 <_ZNK12SimpleString4sizeEv>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	bf0c      	ite	eq
 800fc20:	2301      	moveq	r3, #1
 800fc22:	2300      	movne	r3, #0
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d001      	beq.n	800fc2e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 800fc2a:	2400      	movs	r4, #0
 800fc2c:	e078      	b.n	800fd20 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 800fc2e:	2500      	movs	r5, #0
 800fc30:	f107 0320 	add.w	r3, r7, #32
 800fc34:	4940      	ldr	r1, [pc, #256]	; (800fd38 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7f6 fe65 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800fc3c:	2601      	movs	r6, #1
 800fc3e:	f107 0220 	add.w	r2, r7, #32
 800fc42:	f107 0310 	add.w	r3, r7, #16
 800fc46:	4611      	mov	r1, r2
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7f7 fa20 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d111      	bne.n	800fc78 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 800fc54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc58:	4938      	ldr	r1, [pc, #224]	; (800fd3c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7f6 fe53 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800fc60:	2501      	movs	r5, #1
 800fc62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fc66:	f107 0310 	add.w	r3, r7, #16
 800fc6a:	4611      	mov	r1, r2
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7f7 fa0e 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d001      	beq.n	800fc7c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 800fc78:	2401      	movs	r4, #1
 800fc7a:	e000      	b.n	800fc7e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 800fc7c:	2400      	movs	r4, #0
 800fc7e:	2d00      	cmp	r5, #0
 800fc80:	d004      	beq.n	800fc8c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 800fc82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7f7 f9f5 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800fc8c:	2e00      	cmp	r6, #0
 800fc8e:	d004      	beq.n	800fc9a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 800fc90:	f107 0320 	add.w	r3, r7, #32
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7f7 f9ee 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800fc9a:	2c00      	cmp	r4, #0
 800fc9c:	d005      	beq.n	800fcaa <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2200      	movs	r2, #0
 800fca2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 800fca6:	2401      	movs	r4, #1
 800fca8:	e03a      	b.n	800fd20 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 800fcaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fcae:	4924      	ldr	r1, [pc, #144]	; (800fd40 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7f6 fe28 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800fcb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fcba:	f107 0310 	add.w	r3, r7, #16
 800fcbe:	4611      	mov	r1, r2
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7f7 f9e4 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	461c      	mov	r4, r3
 800fcca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7f7 f9d1 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800fcd4:	2c00      	cmp	r4, #0
 800fcd6:	d005      	beq.n	800fce4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2201      	movs	r2, #1
 800fcdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 800fce0:	2401      	movs	r4, #1
 800fce2:	e01d      	b.n	800fd20 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 800fce4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fce8:	4916      	ldr	r1, [pc, #88]	; (800fd44 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7f6 fe0b 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 800fcf0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800fcf4:	f107 0310 	add.w	r3, r7, #16
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7f7 f9c7 	bl	800708e <_ZeqRK12SimpleStringS1_>
 800fd00:	4603      	mov	r3, r0
 800fd02:	461c      	mov	r4, r3
 800fd04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7f7 f9b4 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800fd0e:	2c00      	cmp	r4, #0
 800fd10:	d005      	beq.n	800fd1e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2202      	movs	r2, #2
 800fd16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 800fd1a:	2401      	movs	r4, #1
 800fd1c:	e000      	b.n	800fd20 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 800fd1e:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 800fd20:	f107 0310 	add.w	r3, r7, #16
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7f7 f9a6 	bl	8007076 <_ZN12SimpleStringD1Ev>
 800fd2a:	4623      	mov	r3, r4
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3744      	adds	r7, #68	; 0x44
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd34:	08015e5c 	.word	0x08015e5c
 800fd38:	080167cc 	.word	0x080167cc
 800fd3c:	080167d4 	.word	0x080167d4
 800fd40:	080167dc 	.word	0x080167dc
 800fd44:	080167e4 	.word	0x080167e4

0800fd48 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	bf0c      	ite	eq
 800fd5a:	2301      	moveq	r3, #1
 800fd5c:	2300      	movne	r3, #0
 800fd5e:	b2db      	uxtb	r3, r3
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd7a:	2b02      	cmp	r3, #2
 800fd7c:	bf0c      	ite	eq
 800fd7e:	2301      	moveq	r3, #1
 800fd80:	2300      	movne	r3, #0
 800fd82:	b2db      	uxtb	r3, r3
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	370c      	adds	r7, #12
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr

0800fd90 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
    return packageName_;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	3330      	adds	r3, #48	; 0x30
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	370c      	adds	r7, #12
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr

0800fda8 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	601a      	str	r2, [r3, #0]
    {}
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	370c      	adds	r7, #12
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc2:	4770      	bx	lr

0800fdc4 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	601a      	str	r2, [r3, #0]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fddc:	3304      	adds	r3, #4
 800fdde:	f640 72ff 	movw	r2, #4095	; 0xfff
 800fde2:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	701a      	strb	r2, [r3, #0]
}
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4618      	mov	r0, r3
 800fdee:	370c      	adds	r7, #12
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr

0800fdf8 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe06:	2200      	movs	r2, #0
 800fe08:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	701a      	strb	r2, [r3, #0]
}
 800fe10:	bf00      	nop
 800fe12:	370c      	adds	r7, #12
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 800fe1c:	b40e      	push	{r1, r2, r3}
 800fe1e:	b590      	push	{r4, r7, lr}
 800fe20:	b086      	sub	sp, #24
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe2c:	3304      	adds	r3, #4
 800fe2e:	681a      	ldr	r2, [r3, #0]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	1ad3      	subs	r3, r2, r3
 800fe3a:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d032      	beq.n	800fea8 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 800fe42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe46:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 800fe48:	4b1b      	ldr	r3, [pc, #108]	; (800feb8 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 800fe4a:	681c      	ldr	r4, [r3, #0]
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	18d0      	adds	r0, r2, r3
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	1c59      	adds	r1, r3, #1
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe60:	47a0      	blx	r4
 800fe62:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	dd09      	ble.n	800fe7e <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	441a      	add	r2, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe7c:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe8c:	3304      	adds	r3, #4
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d90a      	bls.n	800feaa <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fea4:	601a      	str	r2, [r3, #0]
 800fea6:	e000      	b.n	800feaa <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 800fea8:	bf00      	nop
    va_end(arguments);
}
 800feaa:	3718      	adds	r7, #24
 800feac:	46bd      	mov	sp, r7
 800feae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800feb2:	b003      	add	sp, #12
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	200000ac 	.word	0x200000ac

0800febc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b08c      	sub	sp, #48	; 0x30
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 800fecc:	2310      	movs	r3, #16
 800fece:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 800fed0:	2300      	movs	r3, #0
 800fed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 800fed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d273      	bcs.n	800ffc4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 800fedc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fede:	493b      	ldr	r1, [pc, #236]	; (800ffcc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 800fee0:	68f8      	ldr	r0, [r7, #12]
 800fee2:	f7ff ff9b 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feea:	1ad3      	subs	r3, r2, r3
 800feec:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 800feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef0:	2b10      	cmp	r3, #16
 800fef2:	d901      	bls.n	800fef8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 800fef4:	2310      	movs	r3, #16
 800fef6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 800fef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fefa:	f1c3 0310 	rsb	r3, r3, #16
 800fefe:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 800ff00:	2300      	movs	r3, #0
 800ff02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d215      	bcs.n	800ff38 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 800ff0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff10:	4413      	add	r3, r2
 800ff12:	69fa      	ldr	r2, [r7, #28]
 800ff14:	4413      	add	r3, r2
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	461a      	mov	r2, r3
 800ff1a:	492d      	ldr	r1, [pc, #180]	; (800ffd0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 800ff1c:	68f8      	ldr	r0, [r7, #12]
 800ff1e:	f7ff ff7d 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 800ff22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff24:	2b07      	cmp	r3, #7
 800ff26:	d103      	bne.n	800ff30 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 800ff28:	492a      	ldr	r1, [pc, #168]	; (800ffd4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 800ff2a:	68f8      	ldr	r0, [r7, #12]
 800ff2c:	f7ff ff76 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 800ff30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff32:	3301      	adds	r3, #1
 800ff34:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff36:	e7e5      	b.n	800ff04 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 800ff38:	2300      	movs	r3, #0
 800ff3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d207      	bcs.n	800ff54 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 800ff44:	4924      	ldr	r1, [pc, #144]	; (800ffd8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f7ff ff68 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 800ff4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4e:	3301      	adds	r3, #1
 800ff50:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff52:	e7f3      	b.n	800ff3c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	2b08      	cmp	r3, #8
 800ff58:	d903      	bls.n	800ff62 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 800ff5a:	491e      	ldr	r1, [pc, #120]	; (800ffd4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 800ff5c:	68f8      	ldr	r0, [r7, #12]
 800ff5e:	f7ff ff5d 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 800ff62:	491e      	ldr	r1, [pc, #120]	; (800ffdc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 800ff64:	68f8      	ldr	r0, [r7, #12]
 800ff66:	f7ff ff59 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d21d      	bcs.n	800ffb2 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 800ff76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7a:	4413      	add	r3, r2
 800ff7c:	69fa      	ldr	r2, [r7, #28]
 800ff7e:	4413      	add	r3, r2
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 800ff86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ff8a:	2b1f      	cmp	r3, #31
 800ff8c:	d903      	bls.n	800ff96 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 800ff8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ff92:	2b7e      	cmp	r3, #126	; 0x7e
 800ff94:	d902      	bls.n	800ff9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 800ff96:	232e      	movs	r3, #46	; 0x2e
 800ff98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 800ff9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	490f      	ldr	r1, [pc, #60]	; (800ffe0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 800ffa4:	68f8      	ldr	r0, [r7, #12]
 800ffa6:	f7ff ff39 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 800ffaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffac:	3301      	adds	r3, #1
 800ffae:	62bb      	str	r3, [r7, #40]	; 0x28
 800ffb0:	e7dd      	b.n	800ff6e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 800ffb2:	490c      	ldr	r1, [pc, #48]	; (800ffe4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f7ff ff31 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 800ffba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbe:	4413      	add	r3, r2
 800ffc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 800ffc2:	e787      	b.n	800fed4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 800ffc4:	bf00      	nop
 800ffc6:	3730      	adds	r7, #48	; 0x30
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	080167fc 	.word	0x080167fc
 800ffd0:	08016808 	.word	0x08016808
 800ffd4:	08016810 	.word	0x08016810
 800ffd8:	08016814 	.word	0x08016814
 800ffdc:	08016818 	.word	0x08016818
 800ffe0:	0801681c 	.word	0x0801681c
 800ffe4:	08016820 	.word	0x08016820

0800ffe8 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
    return buffer_;
 800fff0:	687b      	ldr	r3, [r7, #4]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	370c      	adds	r7, #12
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr

0800fffe <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 800fffe:	b480      	push	{r7}
 8010000:	b083      	sub	sp, #12
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
 8010006:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801000e:	3304      	adds	r3, #4
 8010010:	683a      	ldr	r2, [r7, #0]
 8010012:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801001a:	3304      	adds	r3, #4
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010022:	d306      	bcc.n	8010032 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801002a:	3304      	adds	r3, #4
 801002c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010030:	601a      	str	r2, [r3, #0]
}
 8010032:	bf00      	nop
 8010034:	370c      	adds	r7, #12
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr

0801003e <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 801003e:	b480      	push	{r7}
 8010040:	b083      	sub	sp, #12
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801004c:	3304      	adds	r3, #4
 801004e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010052:	601a      	str	r2, [r3, #0]
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010076:	3304      	adds	r3, #4
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	429a      	cmp	r2, r3
 801007c:	bf2c      	ite	cs
 801007e:	2301      	movcs	r3, #1
 8010080:	2300      	movcc	r3, #0
 8010082:	b2db      	uxtb	r3, r3
}
 8010084:	4618      	mov	r0, r3
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	601a      	str	r2, [r3, #0]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	711a      	strb	r2, [r3, #4]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	3308      	adds	r3, #8
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7ff fe8b 	bl	800fdc4 <_ZN18SimpleStringBufferC1Ev>
{
}
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4618      	mov	r0, r3
 80100b2:	3708      	adds	r7, #8
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 80100b8:	b5b0      	push	{r4, r5, r7, lr}
 80100ba:	b086      	sub	sp, #24
 80100bc:	af02      	add	r7, sp, #8
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	607a      	str	r2, [r7, #4]
 80100c4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	f103 0408 	add.w	r4, r3, #8
 80100cc:	687d      	ldr	r5, [r7, #4]
 80100ce:	6a3b      	ldr	r3, [r7, #32]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	3314      	adds	r3, #20
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	6a38      	ldr	r0, [r7, #32]
 80100d8:	4798      	blx	r3
 80100da:	4603      	mov	r3, r0
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	462b      	mov	r3, r5
 80100e4:	68ba      	ldr	r2, [r7, #8]
 80100e6:	4904      	ldr	r1, [pc, #16]	; (80100f8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 80100e8:	4620      	mov	r0, r4
 80100ea:	f7ff fe97 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
}
 80100ee:	bf00      	nop
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bdb0      	pop	{r4, r5, r7, pc}
 80100f6:	bf00      	nop
 80100f8:	08016824 	.word	0x08016824

080100fc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80100fc:	b5b0      	push	{r4, r5, r7, lr}
 80100fe:	b086      	sub	sp, #24
 8010100:	af02      	add	r7, sp, #8
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
 8010108:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f103 0408 	add.w	r4, r3, #8
 8010110:	687d      	ldr	r5, [r7, #4]
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	3318      	adds	r3, #24
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	6838      	ldr	r0, [r7, #0]
 801011c:	4798      	blx	r3
 801011e:	4603      	mov	r3, r0
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	462b      	mov	r3, r5
 8010124:	68ba      	ldr	r2, [r7, #8]
 8010126:	4904      	ldr	r1, [pc, #16]	; (8010138 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8010128:	4620      	mov	r0, r4
 801012a:	f7ff fe77 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
}
 801012e:	bf00      	nop
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bdb0      	pop	{r4, r5, r7, pc}
 8010136:	bf00      	nop
 8010138:	0801685c 	.word	0x0801685c

0801013c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	3308      	adds	r3, #8
 8010148:	4903      	ldr	r1, [pc, #12]	; (8010158 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 801014a:	4618      	mov	r0, r3
 801014c:	f7ff fe66 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010150:	bf00      	nop
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	0801688c 	.word	0x0801688c

0801015c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b084      	sub	sp, #16
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2200      	movs	r2, #0
 8010168:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2200      	movs	r2, #0
 801016e:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8010170:	2367      	movs	r3, #103	; 0x67
 8010172:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f203 1311 	addw	r3, r3, #273	; 0x111
 801017a:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f103 0208 	add.w	r2, r3, #8
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010188:	4619      	mov	r1, r3
 801018a:	4610      	mov	r0, r2
 801018c:	f7ff ff37 	bl	800fffe <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8010190:	bf00      	nop
 8010192:	3710      	adds	r7, #16
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8010198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801019a:	b089      	sub	sp, #36	; 0x24
 801019c:	af04      	add	r7, sp, #16
 801019e:	60f8      	str	r0, [r7, #12]
 80101a0:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d102      	bne.n	80101b0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	f000 f882 	bl	80102b4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	1c5a      	adds	r2, r3, #1
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f103 0508 	add.w	r5, r3, #8
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80101d2:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	695a      	ldr	r2, [r3, #20]
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	695b      	ldr	r3, [r3, #20]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	3314      	adds	r3, #20
 80101e0:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80101e2:	4610      	mov	r0, r2
 80101e4:	4798      	blx	r3
 80101e6:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80101ec:	9303      	str	r3, [sp, #12]
 80101ee:	9202      	str	r2, [sp, #8]
 80101f0:	683a      	ldr	r2, [r7, #0]
 80101f2:	9201      	str	r2, [sp, #4]
 80101f4:	9400      	str	r4, [sp, #0]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4632      	mov	r2, r6
 80101fa:	4915      	ldr	r1, [pc, #84]	; (8010250 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80101fc:	4628      	mov	r0, r5
 80101fe:	f7ff fe0d 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	f103 0008 	add.w	r0, r3, #8
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	6899      	ldr	r1, [r3, #8]
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	461a      	mov	r2, r3
 8010212:	f7ff fe53 	bl	800febc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	695a      	ldr	r2, [r3, #20]
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	695b      	ldr	r3, [r3, #20]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	3314      	adds	r3, #20
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4610      	mov	r0, r2
 8010226:	4798      	blx	r3
 8010228:	4603      	mov	r3, r0
 801022a:	490a      	ldr	r1, [pc, #40]	; (8010254 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 801022c:	4618      	mov	r0, r3
 801022e:	f7f6 f9a7 	bl	8006580 <_ZN12SimpleString6StrCmpEPKcS1_>
 8010232:	4603      	mov	r3, r0
 8010234:	2b00      	cmp	r3, #0
 8010236:	bf0c      	ite	eq
 8010238:	2301      	moveq	r3, #1
 801023a:	2300      	movne	r3, #0
 801023c:	b2db      	uxtb	r3, r3
 801023e:	2b00      	cmp	r3, #0
 8010240:	d002      	beq.n	8010248 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2201      	movs	r2, #1
 8010246:	711a      	strb	r2, [r3, #4]
}
 8010248:	bf00      	nop
 801024a:	3714      	adds	r7, #20
 801024c:	46bd      	mov	sp, r7
 801024e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010250:	080168ac 	.word	0x080168ac
 8010254:	0801690c 	.word	0x0801690c

08010258 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d103      	bne.n	8010270 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7ff ff67 	bl	801013c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 801026e:	e01e      	b.n	80102ae <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	3308      	adds	r3, #8
 8010274:	4618      	mov	r0, r3
 8010276:	f7ff fef3 	bl	8010060 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 801027a:	4603      	mov	r3, r0
 801027c:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	3308      	adds	r3, #8
 8010282:	4618      	mov	r0, r3
 8010284:	f7ff fedb 	bl	801003e <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8010288:	7bfb      	ldrb	r3, [r7, #15]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d002      	beq.n	8010294 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 f820 	bl	80102d4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4619      	mov	r1, r3
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f000 f82a 	bl	80102f4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	791b      	ldrb	r3, [r3, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d002      	beq.n	80102ae <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 f839 	bl	8010320 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 80102ae:	3710      	adds	r7, #16
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	3308      	adds	r3, #8
 80102c0:	4903      	ldr	r1, [pc, #12]	; (80102d0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7ff fdaa 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
}
 80102c8:	bf00      	nop
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	08016914 	.word	0x08016914

080102d4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	3308      	adds	r3, #8
 80102e0:	4903      	ldr	r1, [pc, #12]	; (80102f0 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7ff fd9a 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
}
 80102e8:	bf00      	nop
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	0801692c 	.word	0x0801692c

080102f4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f103 0008 	add.w	r0, r3, #8
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	4a04      	ldr	r2, [pc, #16]	; (8010318 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8010308:	4904      	ldr	r1, [pc, #16]	; (801031c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 801030a:	f7ff fd87 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
}
 801030e:	bf00      	nop
 8010310:	3708      	adds	r7, #8
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	08016974 	.word	0x08016974
 801031c:	0801698c 	.word	0x0801698c

08010320 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	3308      	adds	r3, #8
 801032c:	4903      	ldr	r1, [pc, #12]	; (801033c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 801032e:	4618      	mov	r0, r3
 8010330:	f7ff fd74 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010334:	bf00      	nop
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	08016994 	.word	0x08016994

08010340 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b08a      	sub	sp, #40	; 0x28
 8010344:	af06      	add	r7, sp, #24
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	607a      	str	r2, [r7, #4]
 801034c:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 801034e:	f7f9 fe9f 	bl	800a090 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8010352:	4602      	mov	r2, r0
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	9305      	str	r3, [sp, #20]
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	9304      	str	r3, [sp, #16]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	9303      	str	r3, [sp, #12]
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	9302      	str	r3, [sp, #8]
 8010364:	9201      	str	r2, [sp, #4]
 8010366:	2300      	movs	r3, #0
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	2300      	movs	r3, #0
 801036c:	4a04      	ldr	r2, [pc, #16]	; (8010380 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 801036e:	4905      	ldr	r1, [pc, #20]	; (8010384 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8010370:	68f8      	ldr	r0, [r7, #12]
 8010372:	f000 f855 	bl	8010420 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8010376:	bf00      	nop
 8010378:	3710      	adds	r7, #16
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	080167f0 	.word	0x080167f0
 8010384:	08016aa8 	.word	0x08016aa8

08010388 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8010388:	b590      	push	{r4, r7, lr}
 801038a:	b08b      	sub	sp, #44	; 0x2c
 801038c:	af06      	add	r7, sp, #24
 801038e:	60f8      	str	r0, [r7, #12]
 8010390:	60b9      	str	r1, [r7, #8]
 8010392:	607a      	str	r2, [r7, #4]
 8010394:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	68d8      	ldr	r0, [r3, #12]
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	691c      	ldr	r4, [r3, #16]
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	68ba      	ldr	r2, [r7, #8]
 80103a4:	6952      	ldr	r2, [r2, #20]
 80103a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80103a8:	9105      	str	r1, [sp, #20]
 80103aa:	6a39      	ldr	r1, [r7, #32]
 80103ac:	9104      	str	r1, [sp, #16]
 80103ae:	6839      	ldr	r1, [r7, #0]
 80103b0:	9103      	str	r1, [sp, #12]
 80103b2:	6879      	ldr	r1, [r7, #4]
 80103b4:	9102      	str	r1, [sp, #8]
 80103b6:	9201      	str	r2, [sp, #4]
 80103b8:	9300      	str	r3, [sp, #0]
 80103ba:	4623      	mov	r3, r4
 80103bc:	4602      	mov	r2, r0
 80103be:	4904      	ldr	r1, [pc, #16]	; (80103d0 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80103c0:	68f8      	ldr	r0, [r7, #12]
 80103c2:	f000 f82d 	bl	8010420 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80103c6:	bf00      	nop
 80103c8:	3714      	adds	r7, #20
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd90      	pop	{r4, r7, pc}
 80103ce:	bf00      	nop
 80103d0:	08016acc 	.word	0x08016acc

080103d4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80103d4:	b590      	push	{r4, r7, lr}
 80103d6:	b08b      	sub	sp, #44	; 0x2c
 80103d8:	af06      	add	r7, sp, #24
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	60b9      	str	r1, [r7, #8]
 80103de:	607a      	str	r2, [r7, #4]
 80103e0:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	68d8      	ldr	r0, [r3, #12]
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	691c      	ldr	r4, [r3, #16]
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	68ba      	ldr	r2, [r7, #8]
 80103f0:	6952      	ldr	r2, [r2, #20]
 80103f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80103f4:	9105      	str	r1, [sp, #20]
 80103f6:	6a39      	ldr	r1, [r7, #32]
 80103f8:	9104      	str	r1, [sp, #16]
 80103fa:	6839      	ldr	r1, [r7, #0]
 80103fc:	9103      	str	r1, [sp, #12]
 80103fe:	6879      	ldr	r1, [r7, #4]
 8010400:	9102      	str	r1, [sp, #8]
 8010402:	9201      	str	r2, [sp, #4]
 8010404:	9300      	str	r3, [sp, #0]
 8010406:	4623      	mov	r3, r4
 8010408:	4602      	mov	r2, r0
 801040a:	4904      	ldr	r1, [pc, #16]	; (801041c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f000 f807 	bl	8010420 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8010412:	bf00      	nop
 8010414:	3714      	adds	r7, #20
 8010416:	46bd      	mov	sp, r7
 8010418:	bd90      	pop	{r4, r7, pc}
 801041a:	bf00      	nop
 801041c:	08016af4 	.word	0x08016af4

08010420 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8010420:	b590      	push	{r4, r7, lr}
 8010422:	b087      	sub	sp, #28
 8010424:	af02      	add	r7, sp, #8
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
 801042c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	3308      	adds	r3, #8
 8010432:	68ba      	ldr	r2, [r7, #8]
 8010434:	4910      	ldr	r1, [pc, #64]	; (8010478 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff fcf0 	bl	800fe1c <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 801043c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	6a3b      	ldr	r3, [r7, #32]
 8010442:	683a      	ldr	r2, [r7, #0]
 8010444:	6879      	ldr	r1, [r7, #4]
 8010446:	68f8      	ldr	r0, [r7, #12]
 8010448:	f7ff fe36 	bl	80100b8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 801044c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f7ff fe52 	bl	80100fc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8010458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	3308      	adds	r3, #8
 801045e:	681c      	ldr	r4, [r3, #0]
 8010460:	68f8      	ldr	r0, [r7, #12]
 8010462:	f000 f80b 	bl	801047c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8010466:	4603      	mov	r3, r0
 8010468:	4619      	mov	r1, r3
 801046a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801046c:	47a0      	blx	r4
}
 801046e:	bf00      	nop
 8010470:	3714      	adds	r7, #20
 8010472:	46bd      	mov	sp, r7
 8010474:	bd90      	pop	{r4, r7, pc}
 8010476:	bf00      	nop
 8010478:	08016b20 	.word	0x08016b20

0801047c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	3308      	adds	r3, #8
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff fdad 	bl	800ffe8 <_ZN18SimpleStringBuffer8toStringEv>
 801048e:	4603      	mov	r3, r0
}
 8010490:	4618      	mov	r0, r3
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	3308      	adds	r3, #8
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7ff fca7 	bl	800fdf8 <_ZN18SimpleStringBuffer5clearEv>
}
 80104aa:	bf00      	nop
 80104ac:	3708      	adds	r7, #8
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 80104b2:	b480      	push	{r7}
 80104b4:	b085      	sub	sp, #20
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	60f8      	str	r0, [r7, #12]
 80104ba:	60b9      	str	r1, [r7, #8]
 80104bc:	607a      	str	r2, [r7, #4]
 80104be:	603b      	str	r3, [r7, #0]
    number_ = number;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	68ba      	ldr	r2, [r7, #8]
 80104ca:	609a      	str	r2, [r3, #8]
    size_ = size;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	683a      	ldr	r2, [r7, #0]
 80104d0:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	69ba      	ldr	r2, [r7, #24]
 80104d6:	615a      	str	r2, [r3, #20]
    period_ = period;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	7f3a      	ldrb	r2, [r7, #28]
 80104dc:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80104e4:	765a      	strb	r2, [r3, #25]
    file_ = file;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104ea:	60da      	str	r2, [r3, #12]
    line_ = line;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104f0:	611a      	str	r2, [r3, #16]
}
 80104f2:	bf00      	nop
 80104f4:	3714      	adds	r7, #20
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80104fe:	b480      	push	{r7}
 8010500:	b085      	sub	sp, #20
 8010502:	af00      	add	r7, sp, #0
 8010504:	60f8      	str	r0, [r7, #12]
 8010506:	60b9      	str	r1, [r7, #8]
 8010508:	4613      	mov	r3, r2
 801050a:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 801050c:	79fb      	ldrb	r3, [r7, #7]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d00b      	beq.n	801052a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	7e1b      	ldrb	r3, [r3, #24]
 8010516:	79fa      	ldrb	r2, [r7, #7]
 8010518:	429a      	cmp	r2, r3
 801051a:	d006      	beq.n	801052a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	7e1b      	ldrb	r3, [r3, #24]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d004      	beq.n	801052e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8010524:	79fb      	ldrb	r3, [r7, #7]
 8010526:	2b02      	cmp	r3, #2
 8010528:	d101      	bne.n	801052e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 801052a:	2301      	movs	r3, #1
 801052c:	e000      	b.n	8010530 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 801052e:	2300      	movs	r3, #0
}
 8010530:	4618      	mov	r0, r3
 8010532:	3714      	adds	r7, #20
 8010534:	46bd      	mov	sp, r7
 8010536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053a:	4770      	bx	lr

0801053c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	61da      	str	r2, [r3, #28]
    head_ = node;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	683a      	ldr	r2, [r7, #0]
 8010552:	601a      	str	r2, [r3, #0]
}
 8010554:	bf00      	nop
 8010556:	370c      	adds	r7, #12
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr

08010560 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8010560:	b480      	push	{r7}
 8010562:	b085      	sub	sp, #20
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8010570:	2300      	movs	r3, #0
 8010572:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d019      	beq.n	80105ae <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	683a      	ldr	r2, [r7, #0]
 8010580:	429a      	cmp	r2, r3
 8010582:	d10e      	bne.n	80105a2 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d005      	beq.n	8010596 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	69da      	ldr	r2, [r3, #28]
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	61da      	str	r2, [r3, #28]
                return cur;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	e00c      	b.n	80105b0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	69da      	ldr	r2, [r3, #28]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	601a      	str	r2, [r3, #0]
                return cur;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	e006      	b.n	80105b0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	69db      	ldr	r3, [r3, #28]
 80105aa:	60fb      	str	r3, [r7, #12]
    while (cur) {
 80105ac:	e7e2      	b.n	8010574 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 80105ae:	2300      	movs	r3, #0
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3714      	adds	r7, #20
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00a      	beq.n	80105e8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	429a      	cmp	r2, r3
 80105da:	d101      	bne.n	80105e0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	e004      	b.n	80105ea <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	69db      	ldr	r3, [r3, #28]
 80105e4:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80105e6:	e7f1      	b.n	80105cc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80105e8:	2300      	movs	r3, #0
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3714      	adds	r7, #20
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr

080105f6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80105f6:	b580      	push	{r7, lr}
 80105f8:	b086      	sub	sp, #24
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	60f8      	str	r0, [r7, #12]
 80105fe:	60b9      	str	r1, [r7, #8]
 8010600:	4613      	mov	r3, r2
 8010602:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	617b      	str	r3, [r7, #20]
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d00e      	beq.n	801062c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 801060e:	79fb      	ldrb	r3, [r7, #7]
 8010610:	461a      	mov	r2, r3
 8010612:	6979      	ldr	r1, [r7, #20]
 8010614:	68f8      	ldr	r0, [r7, #12]
 8010616:	f7ff ff72 	bl	80104fe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	d001      	beq.n	8010624 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	e004      	b.n	801062e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	69db      	ldr	r3, [r3, #28]
 8010628:	617b      	str	r3, [r7, #20]
 801062a:	e7ed      	b.n	8010608 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 801062c:	2300      	movs	r3, #0
}
 801062e:	4618      	mov	r0, r3
 8010630:	3718      	adds	r7, #24
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}

08010636 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8010636:	b580      	push	{r7, lr}
 8010638:	b082      	sub	sp, #8
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
 801063e:	460b      	mov	r3, r1
 8010640:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	78fa      	ldrb	r2, [r7, #3]
 8010648:	4619      	mov	r1, r3
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f7ff ffd3 	bl	80105f6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010650:	4603      	mov	r3, r0
}
 8010652:	4618      	mov	r0, r3
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b084      	sub	sp, #16
 801065e:	af00      	add	r7, sp, #0
 8010660:	60f8      	str	r0, [r7, #12]
 8010662:	60b9      	str	r1, [r7, #8]
 8010664:	4613      	mov	r3, r2
 8010666:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	69db      	ldr	r3, [r3, #28]
 801066c:	79fa      	ldrb	r2, [r7, #7]
 801066e:	4619      	mov	r1, r3
 8010670:	68f8      	ldr	r0, [r7, #12]
 8010672:	f7ff ffc0 	bl	80105f6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010676:	4603      	mov	r3, r0
}
 8010678:	4618      	mov	r0, r3
 801067a:	3710      	adds	r7, #16
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	460b      	mov	r3, r1
 801068a:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801068c:	2300      	movs	r3, #0
 801068e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	60bb      	str	r3, [r7, #8]
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00f      	beq.n	80106bc <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 801069c:	78fb      	ldrb	r3, [r7, #3]
 801069e:	461a      	mov	r2, r3
 80106a0:	68b9      	ldr	r1, [r7, #8]
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f7ff ff2b 	bl	80104fe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d002      	beq.n	80106b4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	3301      	adds	r3, #1
 80106b2:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	69db      	ldr	r3, [r3, #28]
 80106b8:	60bb      	str	r3, [r7, #8]
 80106ba:	e7ec      	b.n	8010696 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 80106bc:	68fb      	ldr	r3, [r7, #12]
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3710      	adds	r7, #16
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
	...

080106c8 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 80106d2:	6839      	ldr	r1, [r7, #0]
 80106d4:	4b09      	ldr	r3, [pc, #36]	; (80106fc <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80106d6:	fba3 2301 	umull	r2, r3, r3, r1
 80106da:	1aca      	subs	r2, r1, r3
 80106dc:	0852      	lsrs	r2, r2, #1
 80106de:	4413      	add	r3, r2
 80106e0:	099a      	lsrs	r2, r3, #6
 80106e2:	4613      	mov	r3, r2
 80106e4:	00db      	lsls	r3, r3, #3
 80106e6:	4413      	add	r3, r2
 80106e8:	00db      	lsls	r3, r3, #3
 80106ea:	4413      	add	r3, r2
 80106ec:	1aca      	subs	r2, r1, r3
 80106ee:	4613      	mov	r3, r2
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr
 80106fc:	c0e07039 	.word	0xc0e07039

08010700 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	689b      	ldr	r3, [r3, #8]
 801070e:	4619      	mov	r1, r3
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f7ff ffd9 	bl	80106c8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8010716:	4603      	mov	r3, r0
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	687a      	ldr	r2, [r7, #4]
 801071c:	4413      	add	r3, r2
 801071e:	6839      	ldr	r1, [r7, #0]
 8010720:	4618      	mov	r0, r3
 8010722:	f7ff ff0b 	bl	801053c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8010726:	bf00      	nop
 8010728:	3708      	adds	r7, #8
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}

0801072e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 801072e:	b580      	push	{r7, lr}
 8010730:	b082      	sub	sp, #8
 8010732:	af00      	add	r7, sp, #0
 8010734:	6078      	str	r0, [r7, #4]
 8010736:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8010738:	6839      	ldr	r1, [r7, #0]
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7ff ffc4 	bl	80106c8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8010740:	4603      	mov	r3, r0
 8010742:	009b      	lsls	r3, r3, #2
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	4413      	add	r3, r2
 8010748:	6839      	ldr	r1, [r7, #0]
 801074a:	4618      	mov	r0, r3
 801074c:	f7ff ff08 	bl	8010560 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8010750:	4603      	mov	r3, r0
}
 8010752:	4618      	mov	r0, r3
 8010754:	3708      	adds	r7, #8
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b082      	sub	sp, #8
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
 8010762:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8010764:	6839      	ldr	r1, [r7, #0]
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7ff ffae 	bl	80106c8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801076c:	4603      	mov	r3, r0
 801076e:	009b      	lsls	r3, r3, #2
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	4413      	add	r3, r2
 8010774:	6839      	ldr	r1, [r7, #0]
 8010776:	4618      	mov	r0, r3
 8010778:	f7ff ff20 	bl	80105bc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 801077c:	4603      	mov	r3, r0
}
 801077e:	4618      	mov	r0, r3
 8010780:	3708      	adds	r7, #8
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8010786:	b580      	push	{r7, lr}
 8010788:	b084      	sub	sp, #16
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
 801078e:	460b      	mov	r3, r1
 8010790:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8010792:	2300      	movs	r3, #0
 8010794:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8010796:	2300      	movs	r3, #0
 8010798:	60bb      	str	r3, [r7, #8]
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	2b48      	cmp	r3, #72	; 0x48
 801079e:	dc10      	bgt.n	80107c2 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	4413      	add	r3, r2
 80107a8:	78fa      	ldrb	r2, [r7, #3]
 80107aa:	4611      	mov	r1, r2
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7ff ff67 	bl	8010680 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 80107b2:	4602      	mov	r2, r0
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	4413      	add	r3, r2
 80107b8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	3301      	adds	r3, #1
 80107be:	60bb      	str	r3, [r7, #8]
 80107c0:	e7eb      	b.n	801079a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 80107c2:	68fb      	ldr	r3, [r7, #12]
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3710      	adds	r7, #16
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	460b      	mov	r3, r1
 80107d6:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 80107d8:	2300      	movs	r3, #0
 80107da:	60fb      	str	r3, [r7, #12]
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2b48      	cmp	r3, #72	; 0x48
 80107e0:	dc12      	bgt.n	8010808 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	4413      	add	r3, r2
 80107ea:	78fa      	ldrb	r2, [r7, #3]
 80107ec:	4611      	mov	r1, r2
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7ff ff21 	bl	8010636 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80107f4:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d001      	beq.n	8010800 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	e004      	b.n	801080a <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	3301      	adds	r3, #1
 8010804:	60fb      	str	r3, [r7, #12]
 8010806:	e7e9      	b.n	80107dc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8010808:	2300      	movs	r3, #0
}
 801080a:	4618      	mov	r0, r3
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b086      	sub	sp, #24
 8010816:	af00      	add	r7, sp, #0
 8010818:	60f8      	str	r0, [r7, #12]
 801081a:	60b9      	str	r1, [r7, #8]
 801081c:	4613      	mov	r3, r2
 801081e:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	4619      	mov	r1, r3
 8010826:	68f8      	ldr	r0, [r7, #12]
 8010828:	f7ff ff4e 	bl	80106c8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801082c:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	68fa      	ldr	r2, [r7, #12]
 8010834:	4413      	add	r3, r2
 8010836:	79fa      	ldrb	r2, [r7, #7]
 8010838:	68b9      	ldr	r1, [r7, #8]
 801083a:	4618      	mov	r0, r3
 801083c:	f7ff ff0d 	bl	801065a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010840:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d001      	beq.n	801084c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	e019      	b.n	8010880 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	3301      	adds	r3, #1
 8010850:	617b      	str	r3, [r7, #20]
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	2b48      	cmp	r3, #72	; 0x48
 8010856:	d812      	bhi.n	801087e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	68fa      	ldr	r2, [r7, #12]
 801085e:	4413      	add	r3, r2
 8010860:	79fa      	ldrb	r2, [r7, #7]
 8010862:	4611      	mov	r1, r2
 8010864:	4618      	mov	r0, r3
 8010866:	f7ff fee6 	bl	8010636 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801086a:	6138      	str	r0, [r7, #16]
        if (node) return node;
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d001      	beq.n	8010876 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	e004      	b.n	8010880 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	3301      	adds	r3, #1
 801087a:	617b      	str	r3, [r7, #20]
 801087c:	e7e9      	b.n	8010852 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 801087e:	2300      	movs	r3, #0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3718      	adds	r7, #24
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8010888:	b5b0      	push	{r4, r5, r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2448      	movs	r4, #72	; 0x48
 8010894:	461d      	mov	r5, r3
 8010896:	2c00      	cmp	r4, #0
 8010898:	db05      	blt.n	80108a6 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801089a:	4628      	mov	r0, r5
 801089c:	f7ff fa84 	bl	800fda8 <_ZN22MemoryLeakDetectorListC1Ev>
 80108a0:	3504      	adds	r5, #4
 80108a2:	3c01      	subs	r4, #1
 80108a4:	e7f7      	b.n	8010896 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	4618      	mov	r0, r3
 80108aa:	3708      	adds	r7, #8
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bdb0      	pop	{r4, r5, r7, pc}

080108b0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 80108b0:	b590      	push	{r4, r7, lr}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
 80108ba:	4a1d      	ldr	r2, [pc, #116]	; (8010930 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	601a      	str	r2, [r3, #0]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	330c      	adds	r3, #12
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7ff fbe3 	bl	8010090 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108d0:	331c      	adds	r3, #28
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7ff ffd8 	bl	8010888 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80108de:	2201      	movs	r2, #1
 80108e0:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80108e8:	3304      	adds	r3, #4
 80108ea:	2201      	movs	r2, #1
 80108ec:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2201      	movs	r2, #1
 80108f2:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80108fa:	3308      	adds	r3, #8
 80108fc:	2200      	movs	r2, #0
 80108fe:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	683a      	ldr	r2, [r7, #0]
 8010904:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8010906:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 801090a:	490a      	ldr	r1, [pc, #40]	; (8010934 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 801090c:	2004      	movs	r0, #4
 801090e:	f7f5 f911 	bl	8005b34 <_ZnwjPKci>
 8010912:	4604      	mov	r4, r0
 8010914:	4620      	mov	r0, r4
 8010916:	f7f5 fd07 	bl	8006328 <_ZN11SimpleMutexC1Ev>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010920:	330c      	adds	r3, #12
 8010922:	601c      	str	r4, [r3, #0]
}
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	4618      	mov	r0, r3
 8010928:	370c      	adds	r7, #12
 801092a:	46bd      	mov	sp, r7
 801092c:	bd90      	pop	{r4, r7, pc}
 801092e:	bf00      	nop
 8010930:	08017710 	.word	0x08017710
 8010934:	08016b24 	.word	0x08016b24

08010938 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8010938:	b590      	push	{r4, r7, lr}
 801093a:	b083      	sub	sp, #12
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	4a0e      	ldr	r2, [pc, #56]	; (801097c <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801094c:	330c      	adds	r3, #12
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d00d      	beq.n	8010970 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801095a:	330c      	adds	r3, #12
 801095c:	681c      	ldr	r4, [r3, #0]
 801095e:	2c00      	cmp	r4, #0
 8010960:	d006      	beq.n	8010970 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8010962:	4620      	mov	r0, r4
 8010964:	f7f5 fcf2 	bl	800634c <_ZN11SimpleMutexD1Ev>
 8010968:	2104      	movs	r1, #4
 801096a:	4620      	mov	r0, r4
 801096c:	f7f5 f8f6 	bl	8005b5c <_ZdlPvj>
    }
}
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4618      	mov	r0, r3
 8010974:	370c      	adds	r7, #12
 8010976:	46bd      	mov	sp, r7
 8010978:	bd90      	pop	{r4, r7, pc}
 801097a:	bf00      	nop
 801097c:	08017710 	.word	0x08017710

08010980 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
}
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f7ff ffd5 	bl	8010938 <_ZN18MemoryLeakDetectorD1Ev>
 801098e:	f241 1150 	movw	r1, #4432	; 0x1150
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f7f5 f8e2 	bl	8005b5c <_ZdlPvj>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	4618      	mov	r0, r3
 801099c:	3708      	adds	r7, #8
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b082      	sub	sp, #8
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	330c      	adds	r3, #12
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7ff fd72 	bl	8010498 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2203      	movs	r2, #3
 80109b8:	721a      	strb	r2, [r3, #8]
}
 80109ba:	bf00      	nop
 80109bc:	3708      	adds	r7, #8
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}

080109c2 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 80109c2:	b480      	push	{r7}
 80109c4:	b083      	sub	sp, #12
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2202      	movs	r2, #2
 80109ce:	721a      	strb	r2, [r3, #8]
}
 80109d0:	bf00      	nop
 80109d2:	370c      	adds	r7, #12
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2202      	movs	r2, #2
 80109e8:	721a      	strb	r2, [r3, #8]
}
 80109ea:	bf00      	nop
 80109ec:	370c      	adds	r7, #12
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80109f6:	b480      	push	{r7}
 80109f8:	b083      	sub	sp, #12
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
    return mutex_;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010a04:	330c      	adds	r3, #12
 8010a06:	681b      	ldr	r3, [r3, #0]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f023 0303 	bic.w	r3, r3, #3
 8010a22:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	370c      	adds	r7, #12
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	3303      	adds	r3, #3
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7ff ffe8 	bl	8010a14 <_ZL31calculateVoidPointerAlignedSizej>
 8010a44:	4603      	mov	r3, r0
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8010a4e:	b580      	push	{r7, lr}
 8010a50:	b084      	sub	sp, #16
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	60f8      	str	r0, [r7, #12]
 8010a56:	60b9      	str	r1, [r7, #8]
 8010a58:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8010a5a:	6879      	ldr	r1, [r7, #4]
 8010a5c:	68f8      	ldr	r0, [r7, #12]
 8010a5e:	f7ff ffe7 	bl	8010a30 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8010a62:	4602      	mov	r2, r0
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	4413      	add	r3, r2
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	3710      	adds	r7, #16
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b08a      	sub	sp, #40	; 0x28
 8010a74:	af06      	add	r7, sp, #24
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	607a      	str	r2, [r7, #4]
 8010a7c:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010a84:	3304      	adds	r3, #4
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	1c51      	adds	r1, r2, #1
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010a90:	3304      	adds	r3, #4
 8010a92:	6019      	str	r1, [r3, #0]
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	7a19      	ldrb	r1, [r3, #8]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010a9e:	3308      	adds	r3, #8
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	6a38      	ldr	r0, [r7, #32]
 8010aa4:	9004      	str	r0, [sp, #16]
 8010aa6:	69f8      	ldr	r0, [r7, #28]
 8010aa8:	9003      	str	r0, [sp, #12]
 8010aaa:	9302      	str	r3, [sp, #8]
 8010aac:	9101      	str	r1, [sp, #4]
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	6879      	ldr	r1, [r7, #4]
 8010ab6:	68b8      	ldr	r0, [r7, #8]
 8010ab8:	f7ff fcfb 	bl	80104b2 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	689a      	ldr	r2, [r3, #8]
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	f000 f861 	bl	8010b90 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ad4:	331c      	adds	r3, #28
 8010ad6:	68b9      	ldr	r1, [r7, #8]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7ff fe11 	bl	8010700 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8010ade:	bf00      	nop
 8010ae0:	3710      	adds	r7, #16
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}

08010ae6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b08a      	sub	sp, #40	; 0x28
 8010aea:	af04      	add	r7, sp, #16
 8010aec:	60f8      	str	r0, [r7, #12]
 8010aee:	60b9      	str	r1, [r7, #8]
 8010af0:	607a      	str	r2, [r7, #4]
 8010af2:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8010af4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010af8:	9302      	str	r3, [sp, #8]
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afc:	9301      	str	r3, [sp, #4]
 8010afe:	6a3b      	ldr	r3, [r7, #32]
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	68b9      	ldr	r1, [r7, #8]
 8010b08:	68f8      	ldr	r0, [r7, #12]
 8010b0a:	f000 f96f 	bl	8010dec <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8010b0e:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d101      	bne.n	8010b1a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8010b16:	2300      	movs	r3, #0
 8010b18:	e017      	b.n	8010b4a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8010b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010b1e:	9300      	str	r3, [sp, #0]
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	68b9      	ldr	r1, [r7, #8]
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f000 f98a 	bl	8010e40 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8010b2c:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8010b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b30:	9302      	str	r3, [sp, #8]
 8010b32:	6a3b      	ldr	r3, [r7, #32]
 8010b34:	9301      	str	r3, [sp, #4]
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	9300      	str	r3, [sp, #0]
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	697a      	ldr	r2, [r7, #20]
 8010b3e:	6939      	ldr	r1, [r7, #16]
 8010b40:	68f8      	ldr	r0, [r7, #12]
 8010b42:	f7ff ff95 	bl	8010a70 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	689b      	ldr	r3, [r3, #8]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3718      	adds	r7, #24
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
	...

08010b54 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b64:	331c      	adds	r3, #28
 8010b66:	6839      	ldr	r1, [r7, #0]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7ff fdf6 	bl	801075a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8010b6e:	60f8      	str	r0, [r7, #12]
  if (node)
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d006      	beq.n	8010b84 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8010b76:	4b05      	ldr	r3, [pc, #20]	; (8010b8c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	68fa      	ldr	r2, [r7, #12]
 8010b7c:	6812      	ldr	r2, [r2, #0]
 8010b7e:	21cd      	movs	r1, #205	; 0xcd
 8010b80:	6838      	ldr	r0, [r7, #0]
 8010b82:	4798      	blx	r3
#endif
}
 8010b84:	bf00      	nop
 8010b86:	3710      	adds	r7, #16
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	200000d0 	.word	0x200000d0

08010b90 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	60fb      	str	r3, [r7, #12]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2b02      	cmp	r3, #2
 8010ba2:	d812      	bhi.n	8010bca <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8010ba4:	68f9      	ldr	r1, [r7, #12]
 8010ba6:	4b0c      	ldr	r3, [pc, #48]	; (8010bd8 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8010ba8:	fba3 2301 	umull	r2, r3, r3, r1
 8010bac:	085a      	lsrs	r2, r3, #1
 8010bae:	4613      	mov	r3, r2
 8010bb0:	005b      	lsls	r3, r3, #1
 8010bb2:	4413      	add	r3, r2
 8010bb4:	1aca      	subs	r2, r1, r3
 8010bb6:	6839      	ldr	r1, [r7, #0]
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	440b      	add	r3, r1
 8010bbc:	4907      	ldr	r1, [pc, #28]	; (8010bdc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8010bbe:	5c8a      	ldrb	r2, [r1, r2]
 8010bc0:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	60fb      	str	r3, [r7, #12]
 8010bc8:	e7e9      	b.n	8010b9e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8010bca:	bf00      	nop
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop
 8010bd8:	aaaaaaab 	.word	0xaaaaaaab
 8010bdc:	08017704 	.word	0x08017704

08010be0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8010bea:	2300      	movs	r3, #0
 8010bec:	60fb      	str	r3, [r7, #12]
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2b02      	cmp	r3, #2
 8010bf2:	d816      	bhi.n	8010c22 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8010bf4:	683a      	ldr	r2, [r7, #0]
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	4413      	add	r3, r2
 8010bfa:	7818      	ldrb	r0, [r3, #0]
 8010bfc:	68f9      	ldr	r1, [r7, #12]
 8010bfe:	4b0c      	ldr	r3, [pc, #48]	; (8010c30 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8010c00:	fba3 2301 	umull	r2, r3, r3, r1
 8010c04:	085a      	lsrs	r2, r3, #1
 8010c06:	4613      	mov	r3, r2
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	1aca      	subs	r2, r1, r3
 8010c0e:	4b09      	ldr	r3, [pc, #36]	; (8010c34 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8010c10:	5c9b      	ldrb	r3, [r3, r2]
 8010c12:	4298      	cmp	r0, r3
 8010c14:	d001      	beq.n	8010c1a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8010c16:	2300      	movs	r3, #0
 8010c18:	e004      	b.n	8010c24 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	60fb      	str	r3, [r7, #12]
 8010c20:	e7e5      	b.n	8010bee <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8010c22:	2301      	movs	r3, #1
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3714      	adds	r7, #20
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr
 8010c30:	aaaaaaab 	.word	0xaaaaaaab
 8010c34:	08017704 	.word	0x08017704

08010c38 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8010c44:	68ba      	ldr	r2, [r7, #8]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	d101      	bne.n	8010c50 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	e013      	b.n	8010c78 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	f083 0301 	eor.w	r3, r3, #1
 8010c5c:	b2db      	uxtb	r3, r3
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d001      	beq.n	8010c66 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8010c62:	2301      	movs	r3, #1
 8010c64:	e008      	b.n	8010c78 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	331c      	adds	r3, #28
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	68b9      	ldr	r1, [r7, #8]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	4798      	blx	r3
 8010c74:	4603      	mov	r3, r0
 8010c76:	bf00      	nop
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3710      	adds	r7, #16
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8010c80:	b590      	push	{r4, r7, lr}
 8010c82:	b087      	sub	sp, #28
 8010c84:	af02      	add	r7, sp, #8
 8010c86:	60f8      	str	r0, [r7, #12]
 8010c88:	60b9      	str	r1, [r7, #8]
 8010c8a:	607a      	str	r2, [r7, #4]
 8010c8c:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	695a      	ldr	r2, [r3, #20]
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	695b      	ldr	r3, [r3, #20]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	3328      	adds	r3, #40	; 0x28
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4610      	mov	r0, r2
 8010c9e:	4798      	blx	r3
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	6a3b      	ldr	r3, [r7, #32]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	3328      	adds	r3, #40	; 0x28
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	6a38      	ldr	r0, [r7, #32]
 8010cac:	4798      	blx	r3
 8010cae:	4603      	mov	r3, r0
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	4621      	mov	r1, r4
 8010cb4:	68f8      	ldr	r0, [r7, #12]
 8010cb6:	f7ff ffbf 	bl	8010c38 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	f083 0301 	eor.w	r3, r3, #1
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d014      	beq.n	8010cf0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f103 040c 	add.w	r4, r3, #12
 8010ccc:	6a3b      	ldr	r3, [r7, #32]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	3328      	adds	r3, #40	; 0x28
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	6a38      	ldr	r0, [r7, #32]
 8010cd6:	4798      	blx	r3
 8010cd8:	4602      	mov	r2, r0
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	9301      	str	r3, [sp, #4]
 8010ce0:	9200      	str	r2, [sp, #0]
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	68b9      	ldr	r1, [r7, #8]
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f7ff fb4d 	bl	8010388 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8010cee:	e02e      	b.n	8010d4e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	689a      	ldr	r2, [r3, #8]
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	4413      	add	r3, r2
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	68f8      	ldr	r0, [r7, #12]
 8010cfe:	f7ff ff6f 	bl	8010be0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8010d02:	4603      	mov	r3, r0
 8010d04:	f083 0301 	eor.w	r3, r3, #1
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d014      	beq.n	8010d38 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f103 040c 	add.w	r4, r3, #12
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	3328      	adds	r3, #40	; 0x28
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	6a38      	ldr	r0, [r7, #32]
 8010d1e:	4798      	blx	r3
 8010d20:	4602      	mov	r2, r0
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	9301      	str	r3, [sp, #4]
 8010d28:	9200      	str	r2, [sp, #0]
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	68b9      	ldr	r1, [r7, #8]
 8010d30:	4620      	mov	r0, r4
 8010d32:	f7ff fb4f 	bl	80103d4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8010d36:	e00a      	b.n	8010d4e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8010d38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d006      	beq.n	8010d4e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8010d40:	6a3b      	ldr	r3, [r7, #32]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	3324      	adds	r3, #36	; 0x24
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	68b9      	ldr	r1, [r7, #8]
 8010d4a:	6a38      	ldr	r0, [r7, #32]
 8010d4c:	4798      	blx	r3
}
 8010d4e:	bf00      	nop
 8010d50:	3714      	adds	r7, #20
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd90      	pop	{r4, r7, pc}
	...

08010d58 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b086      	sub	sp, #24
 8010d5c:	af02      	add	r7, sp, #8
 8010d5e:	60f8      	str	r0, [r7, #12]
 8010d60:	60b9      	str	r1, [r7, #8]
 8010d62:	607a      	str	r2, [r7, #4]
 8010d64:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8010d66:	4b08      	ldr	r3, [pc, #32]	; (8010d88 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	78fb      	ldrb	r3, [r7, #3]
 8010d6c:	9301      	str	r3, [sp, #4]
 8010d6e:	2300      	movs	r3, #0
 8010d70:	9300      	str	r3, [sp, #0]
 8010d72:	4613      	mov	r3, r2
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	68b9      	ldr	r1, [r7, #8]
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f000 f87f 	bl	8010e7c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8010d7e:	4603      	mov	r3, r0
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3710      	adds	r7, #16
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	200000f8 	.word	0x200000f8

08010d8c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8010d8c:	b590      	push	{r4, r7, lr}
 8010d8e:	b085      	sub	sp, #20
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
 8010d98:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8010d9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d00e      	beq.n	8010dc0 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	3308      	adds	r3, #8
 8010da8:	681c      	ldr	r4, [r3, #0]
 8010daa:	6879      	ldr	r1, [r7, #4]
 8010dac:	68f8      	ldr	r0, [r7, #12]
 8010dae:	f7ff fe3f 	bl	8010a30 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8010db2:	4601      	mov	r1, r0
 8010db4:	6a3b      	ldr	r3, [r7, #32]
 8010db6:	683a      	ldr	r2, [r7, #0]
 8010db8:	68b8      	ldr	r0, [r7, #8]
 8010dba:	47a0      	blx	r4
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	e010      	b.n	8010de2 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	3308      	adds	r3, #8
 8010dc6:	681c      	ldr	r4, [r3, #0]
 8010dc8:	6879      	ldr	r1, [r7, #4]
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f7ff fe30 	bl	8010a30 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	f103 0120 	add.w	r1, r3, #32
 8010dd6:	6a3b      	ldr	r3, [r7, #32]
 8010dd8:	683a      	ldr	r2, [r7, #0]
 8010dda:	68b8      	ldr	r0, [r7, #8]
 8010ddc:	47a0      	blx	r4
 8010dde:	4603      	mov	r3, r0
 8010de0:	bf00      	nop
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3714      	adds	r7, #20
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd90      	pop	{r4, r7, pc}
	...

08010dec <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8010dec:	b590      	push	{r4, r7, lr}
 8010dee:	b085      	sub	sp, #20
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	607a      	str	r2, [r7, #4]
 8010df8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8010dfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d00b      	beq.n	8010e1a <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8010e02:	4b0e      	ldr	r3, [pc, #56]	; (8010e3c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8010e04:	681c      	ldr	r4, [r3, #0]
 8010e06:	6839      	ldr	r1, [r7, #0]
 8010e08:	68f8      	ldr	r0, [r7, #12]
 8010e0a:	f7ff fe11 	bl	8010a30 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	4619      	mov	r1, r3
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	47a0      	blx	r4
 8010e16:	4603      	mov	r3, r0
 8010e18:	e00c      	b.n	8010e34 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8010e1a:	4b08      	ldr	r3, [pc, #32]	; (8010e3c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8010e1c:	681c      	ldr	r4, [r3, #0]
 8010e1e:	6839      	ldr	r1, [r7, #0]
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	f7ff fe05 	bl	8010a30 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8010e26:	4603      	mov	r3, r0
 8010e28:	3320      	adds	r3, #32
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	47a0      	blx	r4
 8010e30:	4603      	mov	r3, r0
 8010e32:	bf00      	nop
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3714      	adds	r7, #20
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd90      	pop	{r4, r7, pc}
 8010e3c:	200000c8 	.word	0x200000c8

08010e40 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	60f8      	str	r0, [r7, #12]
 8010e48:	60b9      	str	r1, [r7, #8]
 8010e4a:	607a      	str	r2, [r7, #4]
 8010e4c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8010e4e:	7e3b      	ldrb	r3, [r7, #24]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d008      	beq.n	8010e66 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	3320      	adds	r3, #32
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2120      	movs	r1, #32
 8010e5e:	68b8      	ldr	r0, [r7, #8]
 8010e60:	4798      	blx	r3
 8010e62:	4603      	mov	r3, r0
 8010e64:	e006      	b.n	8010e74 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	6839      	ldr	r1, [r7, #0]
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	f7ff fdef 	bl	8010a4e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8010e70:	4603      	mov	r3, r0
 8010e72:	bf00      	nop
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3710      	adds	r7, #16
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b08a      	sub	sp, #40	; 0x28
 8010e80:	af04      	add	r7, sp, #16
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
 8010e88:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8010e8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010e8e:	9301      	str	r3, [sp, #4]
 8010e90:	6a3b      	ldr	r3, [r7, #32]
 8010e92:	9300      	str	r3, [sp, #0]
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	68b9      	ldr	r1, [r7, #8]
 8010e9a:	68f8      	ldr	r0, [r7, #12]
 8010e9c:	f7ff ff76 	bl	8010d8c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8010ea0:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d101      	bne.n	8010eac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	e017      	b.n	8010edc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8010eac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010eb0:	9300      	str	r3, [sp, #0]
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	68b9      	ldr	r1, [r7, #8]
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f7ff ffc1 	bl	8010e40 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8010ebe:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8010ec0:	6a3b      	ldr	r3, [r7, #32]
 8010ec2:	9302      	str	r3, [sp, #8]
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	9301      	str	r3, [sp, #4]
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	697a      	ldr	r2, [r7, #20]
 8010ed0:	6939      	ldr	r1, [r7, #16]
 8010ed2:	68f8      	ldr	r0, [r7, #12]
 8010ed4:	f7ff fdcc 	bl	8010a70 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	689b      	ldr	r3, [r3, #8]
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3718      	adds	r7, #24
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8010ee4:	b590      	push	{r4, r7, lr}
 8010ee6:	b089      	sub	sp, #36	; 0x24
 8010ee8:	af02      	add	r7, sp, #8
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
 8010ef0:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d03a      	beq.n	8010f6e <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010efe:	331c      	adds	r3, #28
 8010f00:	6879      	ldr	r1, [r7, #4]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7ff fc13 	bl	801072e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8010f08:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d10b      	bne.n	8010f28 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f103 000c 	add.w	r0, r3, #12
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	9300      	str	r3, [sp, #0]
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f20:	6839      	ldr	r1, [r7, #0]
 8010f22:	f7ff fa0d 	bl	8010340 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8010f26:	e023      	b.n	8010f70 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8010f28:	68b8      	ldr	r0, [r7, #8]
 8010f2a:	f7f8 ffa7 	bl	8009e7c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	f083 0301 	eor.w	r3, r3, #1
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d01a      	beq.n	8010f70 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8010f40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010f44:	9301      	str	r3, [sp, #4]
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	9300      	str	r3, [sp, #0]
 8010f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4c:	683a      	ldr	r2, [r7, #0]
 8010f4e:	6979      	ldr	r1, [r7, #20]
 8010f50:	68f8      	ldr	r0, [r7, #12]
 8010f52:	f7ff fe95 	bl	8010c80 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	330c      	adds	r3, #12
 8010f5c:	681c      	ldr	r4, [r3, #0]
 8010f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f60:	9300      	str	r3, [sp, #0]
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	693a      	ldr	r2, [r7, #16]
 8010f66:	6879      	ldr	r1, [r7, #4]
 8010f68:	68b8      	ldr	r0, [r7, #8]
 8010f6a:	47a0      	blx	r4
 8010f6c:	e000      	b.n	8010f70 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8010f6e:	bf00      	nop
    }
}
 8010f70:	371c      	adds	r7, #28
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd90      	pop	{r4, r7, pc}
	...

08010f78 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b086      	sub	sp, #24
 8010f7c:	af02      	add	r7, sp, #8
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	60b9      	str	r1, [r7, #8]
 8010f82:	607a      	str	r2, [r7, #4]
 8010f84:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8010f86:	4b08      	ldr	r3, [pc, #32]	; (8010fa8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8010f88:	681a      	ldr	r2, [r3, #0]
 8010f8a:	78fb      	ldrb	r3, [r7, #3]
 8010f8c:	9301      	str	r3, [sp, #4]
 8010f8e:	2300      	movs	r3, #0
 8010f90:	9300      	str	r3, [sp, #0]
 8010f92:	4613      	mov	r3, r2
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	68b9      	ldr	r1, [r7, #8]
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f7ff ffa3 	bl	8010ee4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8010f9e:	bf00      	nop
 8010fa0:	3710      	adds	r7, #16
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	200000f8 	.word	0x200000f8

08010fac <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b08a      	sub	sp, #40	; 0x28
 8010fb0:	af04      	add	r7, sp, #16
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
 8010fb8:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d023      	beq.n	8011008 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fc6:	331c      	adds	r3, #28
 8010fc8:	6879      	ldr	r1, [r7, #4]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7ff fbaf 	bl	801072e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8010fd0:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d10c      	bne.n	8010ff2 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f103 000c 	add.w	r0, r3, #12
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	9300      	str	r3, [sp, #0]
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fe8:	6a39      	ldr	r1, [r7, #32]
 8010fea:	f7ff f9a9 	bl	8010340 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	e019      	b.n	8011026 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8010ff2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010ff6:	9301      	str	r3, [sp, #4]
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	9300      	str	r3, [sp, #0]
 8010ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffe:	6a3a      	ldr	r2, [r7, #32]
 8011000:	6979      	ldr	r1, [r7, #20]
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	f7ff fe3c 	bl	8010c80 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8011008:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801100c:	9302      	str	r3, [sp, #8]
 801100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011010:	9301      	str	r3, [sp, #4]
 8011012:	6a3b      	ldr	r3, [r7, #32]
 8011014:	9300      	str	r3, [sp, #0]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	68b9      	ldr	r1, [r7, #8]
 801101c:	68f8      	ldr	r0, [r7, #12]
 801101e:	f7ff fd62 	bl	8010ae6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8011022:	4603      	mov	r3, r0
 8011024:	bf00      	nop
}
 8011026:	4618      	mov	r0, r3
 8011028:	3718      	adds	r7, #24
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}

0801102e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 801102e:	b580      	push	{r7, lr}
 8011030:	b084      	sub	sp, #16
 8011032:	af00      	add	r7, sp, #0
 8011034:	6078      	str	r0, [r7, #4]
 8011036:	460b      	mov	r3, r1
 8011038:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011040:	331c      	adds	r3, #28
 8011042:	78fa      	ldrb	r2, [r7, #3]
 8011044:	4611      	mov	r1, r2
 8011046:	4618      	mov	r0, r3
 8011048:	f7ff fbc0 	bl	80107cc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 801104c:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	330c      	adds	r3, #12
 8011052:	4618      	mov	r0, r3
 8011054:	f7ff f882 	bl	801015c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d010      	beq.n	8011080 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	330c      	adds	r3, #12
 8011062:	68f9      	ldr	r1, [r7, #12]
 8011064:	4618      	mov	r0, r3
 8011066:	f7ff f897 	bl	8010198 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011070:	331c      	adds	r3, #28
 8011072:	78fa      	ldrb	r2, [r7, #3]
 8011074:	68f9      	ldr	r1, [r7, #12]
 8011076:	4618      	mov	r0, r3
 8011078:	f7ff fbcb 	bl	8010812 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801107c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801107e:	e7eb      	b.n	8011058 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	330c      	adds	r3, #12
 8011084:	4618      	mov	r0, r3
 8011086:	f7ff f8e7 	bl	8010258 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 801108a:	bf00      	nop
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b082      	sub	sp, #8
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
 801109a:	460b      	mov	r3, r1
 801109c:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 801109e:	78fb      	ldrb	r3, [r7, #3]
 80110a0:	4619      	mov	r1, r3
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7ff ffc3 	bl	801102e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	330c      	adds	r3, #12
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7ff f9e5 	bl	801047c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80110b2:	4603      	mov	r3, r0
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3708      	adds	r7, #8
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}

080110bc <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110ca:	331c      	adds	r3, #28
 80110cc:	2103      	movs	r1, #3
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7ff fb7c 	bl	80107cc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80110d4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d011      	beq.n	8011100 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	7e1b      	ldrb	r3, [r3, #24]
 80110e0:	2b03      	cmp	r3, #3
 80110e2:	d102      	bne.n	80110ea <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2202      	movs	r2, #2
 80110e8:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110f0:	331c      	adds	r3, #28
 80110f2:	2203      	movs	r2, #3
 80110f4:	68f9      	ldr	r1, [r7, #12]
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7ff fb8b 	bl	8010812 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80110fc:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80110fe:	e7ea      	b.n	80110d6 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8011100:	bf00      	nop
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	460b      	mov	r3, r1
 8011112:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801111a:	331c      	adds	r3, #28
 801111c:	78fa      	ldrb	r2, [r7, #3]
 801111e:	4611      	mov	r1, r2
 8011120:	4618      	mov	r0, r3
 8011122:	f7ff fb30 	bl	8010786 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8011126:	4603      	mov	r3, r0
}
 8011128:	4618      	mov	r0, r3
 801112a:	3708      	adds	r7, #8
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	490b      	ldr	r1, [pc, #44]	; (801116c <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801113e:	4618      	mov	r0, r3
 8011140:	f7f5 fbe1 	bl	8006906 <_ZN12SimpleStringC1EPKc>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2200      	movs	r2, #0
 8011148:	721a      	strb	r2, [r3, #8]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2200      	movs	r2, #0
 801114e:	725a      	strb	r2, [r3, #9]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2200      	movs	r2, #0
 8011154:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6839      	ldr	r1, [r7, #0]
 801115a:	4618      	mov	r0, r3
 801115c:	f7f5 fc3f 	bl	80069de <_ZN12SimpleStringaSERKS_>
}
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4618      	mov	r0, r3
 8011164:	3708      	adds	r7, #8
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	08016b44 	.word	0x08016b44

08011170 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 8011170:	b480      	push	{r7}
 8011172:	b083      	sub	sp, #12
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	683a      	ldr	r2, [r7, #0]
 801117e:	60da      	str	r2, [r3, #12]
    return this;
 8011180:	687b      	ldr	r3, [r7, #4]
}
 8011182:	4618      	mov	r0, r3
 8011184:	370c      	adds	r7, #12
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr

0801118e <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801118e:	b480      	push	{r7}
 8011190:	b083      	sub	sp, #12
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]
    return next_;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	68db      	ldr	r3, [r3, #12]
}
 801119a:	4618      	mov	r0, r3
 801119c:	370c      	adds	r7, #12
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr

080111a6 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 80111a6:	b480      	push	{r7}
 80111a8:	b083      	sub	sp, #12
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2201      	movs	r2, #1
 80111b2:	721a      	strb	r2, [r3, #8]
}
 80111b4:	bf00      	nop
 80111b6:	370c      	adds	r7, #12
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr

080111c0 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2201      	movs	r2, #1
 80111cc:	725a      	strb	r2, [r3, #9]
}
 80111ce:	bf00      	nop
 80111d0:	370c      	adds	r7, #12
 80111d2:	46bd      	mov	sp, r7
 80111d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d8:	4770      	bx	lr

080111da <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b084      	sub	sp, #16
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
 80111e2:	6039      	str	r1, [r7, #0]
    bool matches = false;
 80111e4:	2300      	movs	r3, #0
 80111e6:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	7a1b      	ldrb	r3, [r3, #8]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d007      	beq.n	8011200 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	4619      	mov	r1, r3
 80111f4:	6838      	ldr	r0, [r7, #0]
 80111f6:	f7f5 ff4a 	bl	800708e <_ZeqRK12SimpleStringS1_>
 80111fa:	4603      	mov	r3, r0
 80111fc:	73fb      	strb	r3, [r7, #15]
 80111fe:	e006      	b.n	801120e <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	4619      	mov	r1, r3
 8011204:	6838      	ldr	r0, [r7, #0]
 8011206:	f7f5 fbfc 	bl	8006a02 <_ZNK12SimpleString8containsERKS_>
 801120a:	4603      	mov	r3, r0
 801120c:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	7a5b      	ldrb	r3, [r3, #9]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d004      	beq.n	8011220 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 8011216:	7bfb      	ldrb	r3, [r7, #15]
 8011218:	f083 0301 	eor.w	r3, r3, #1
 801121c:	b2db      	uxtb	r3, r3
 801121e:	e005      	b.n	801122c <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 8011220:	7bfb      	ldrb	r3, [r7, #15]
 8011222:	2b00      	cmp	r3, #0
 8011224:	bf14      	ite	ne
 8011226:	2301      	movne	r3, #1
 8011228:	2300      	moveq	r3, #0
 801122a:	b2db      	uxtb	r3, r3
}
 801122c:	4618      	mov	r0, r3
 801122e:	3710      	adds	r7, #16
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <__cxa_guard_acquire>:
 8011234:	6803      	ldr	r3, [r0, #0]
 8011236:	07db      	lsls	r3, r3, #31
 8011238:	d406      	bmi.n	8011248 <__cxa_guard_acquire+0x14>
 801123a:	7843      	ldrb	r3, [r0, #1]
 801123c:	b103      	cbz	r3, 8011240 <__cxa_guard_acquire+0xc>
 801123e:	deff      	udf	#255	; 0xff
 8011240:	2301      	movs	r3, #1
 8011242:	7043      	strb	r3, [r0, #1]
 8011244:	4618      	mov	r0, r3
 8011246:	4770      	bx	lr
 8011248:	2000      	movs	r0, #0
 801124a:	4770      	bx	lr

0801124c <__cxa_guard_release>:
 801124c:	2301      	movs	r3, #1
 801124e:	6003      	str	r3, [r0, #0]
 8011250:	4770      	bx	lr

08011252 <__cxa_pure_virtual>:
 8011252:	b508      	push	{r3, lr}
 8011254:	f000 f80c 	bl	8011270 <_ZSt9terminatev>

08011258 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011258:	b508      	push	{r3, lr}
 801125a:	4780      	blx	r0
 801125c:	f000 f816 	bl	801128c <abort>

08011260 <_ZSt13get_terminatev>:
 8011260:	4b02      	ldr	r3, [pc, #8]	; (801126c <_ZSt13get_terminatev+0xc>)
 8011262:	6818      	ldr	r0, [r3, #0]
 8011264:	f3bf 8f5b 	dmb	ish
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop
 801126c:	200000fc 	.word	0x200000fc

08011270 <_ZSt9terminatev>:
 8011270:	b508      	push	{r3, lr}
 8011272:	f7ff fff5 	bl	8011260 <_ZSt13get_terminatev>
 8011276:	f7ff ffef 	bl	8011258 <_ZN10__cxxabiv111__terminateEPFvvE>

0801127a <fabs>:
 801127a:	ec51 0b10 	vmov	r0, r1, d0
 801127e:	ee10 2a10 	vmov	r2, s0
 8011282:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011286:	ec43 2b10 	vmov	d0, r2, r3
 801128a:	4770      	bx	lr

0801128c <abort>:
 801128c:	b508      	push	{r3, lr}
 801128e:	2006      	movs	r0, #6
 8011290:	f000 ff70 	bl	8012174 <raise>
 8011294:	2001      	movs	r0, #1
 8011296:	f7ef fd4d 	bl	8000d34 <_exit>

0801129a <atexit>:
 801129a:	2300      	movs	r3, #0
 801129c:	4601      	mov	r1, r0
 801129e:	461a      	mov	r2, r3
 80112a0:	4618      	mov	r0, r3
 80112a2:	f002 b909 	b.w	80134b8 <__register_exitproc>
	...

080112a8 <__errno>:
 80112a8:	4b01      	ldr	r3, [pc, #4]	; (80112b0 <__errno+0x8>)
 80112aa:	6818      	ldr	r0, [r3, #0]
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop
 80112b0:	20000100 	.word	0x20000100

080112b4 <_fclose_r>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	4605      	mov	r5, r0
 80112b8:	460c      	mov	r4, r1
 80112ba:	b911      	cbnz	r1, 80112c2 <_fclose_r+0xe>
 80112bc:	2600      	movs	r6, #0
 80112be:	4630      	mov	r0, r6
 80112c0:	bd70      	pop	{r4, r5, r6, pc}
 80112c2:	b118      	cbz	r0, 80112cc <_fclose_r+0x18>
 80112c4:	6983      	ldr	r3, [r0, #24]
 80112c6:	b90b      	cbnz	r3, 80112cc <_fclose_r+0x18>
 80112c8:	f000 f994 	bl	80115f4 <__sinit>
 80112cc:	4b2c      	ldr	r3, [pc, #176]	; (8011380 <_fclose_r+0xcc>)
 80112ce:	429c      	cmp	r4, r3
 80112d0:	d114      	bne.n	80112fc <_fclose_r+0x48>
 80112d2:	686c      	ldr	r4, [r5, #4]
 80112d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112d6:	07d8      	lsls	r0, r3, #31
 80112d8:	d405      	bmi.n	80112e6 <_fclose_r+0x32>
 80112da:	89a3      	ldrh	r3, [r4, #12]
 80112dc:	0599      	lsls	r1, r3, #22
 80112de:	d402      	bmi.n	80112e6 <_fclose_r+0x32>
 80112e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112e2:	f000 fd3a 	bl	8011d5a <__retarget_lock_acquire_recursive>
 80112e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112ea:	b98b      	cbnz	r3, 8011310 <_fclose_r+0x5c>
 80112ec:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80112ee:	f016 0601 	ands.w	r6, r6, #1
 80112f2:	d1e3      	bne.n	80112bc <_fclose_r+0x8>
 80112f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112f6:	f000 fd32 	bl	8011d5e <__retarget_lock_release_recursive>
 80112fa:	e7e0      	b.n	80112be <_fclose_r+0xa>
 80112fc:	4b21      	ldr	r3, [pc, #132]	; (8011384 <_fclose_r+0xd0>)
 80112fe:	429c      	cmp	r4, r3
 8011300:	d101      	bne.n	8011306 <_fclose_r+0x52>
 8011302:	68ac      	ldr	r4, [r5, #8]
 8011304:	e7e6      	b.n	80112d4 <_fclose_r+0x20>
 8011306:	4b20      	ldr	r3, [pc, #128]	; (8011388 <_fclose_r+0xd4>)
 8011308:	429c      	cmp	r4, r3
 801130a:	bf08      	it	eq
 801130c:	68ec      	ldreq	r4, [r5, #12]
 801130e:	e7e1      	b.n	80112d4 <_fclose_r+0x20>
 8011310:	4621      	mov	r1, r4
 8011312:	4628      	mov	r0, r5
 8011314:	f000 f842 	bl	801139c <__sflush_r>
 8011318:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801131a:	4606      	mov	r6, r0
 801131c:	b133      	cbz	r3, 801132c <_fclose_r+0x78>
 801131e:	6a21      	ldr	r1, [r4, #32]
 8011320:	4628      	mov	r0, r5
 8011322:	4798      	blx	r3
 8011324:	2800      	cmp	r0, #0
 8011326:	bfb8      	it	lt
 8011328:	f04f 36ff 	movlt.w	r6, #4294967295
 801132c:	89a3      	ldrh	r3, [r4, #12]
 801132e:	061a      	lsls	r2, r3, #24
 8011330:	d503      	bpl.n	801133a <_fclose_r+0x86>
 8011332:	6921      	ldr	r1, [r4, #16]
 8011334:	4628      	mov	r0, r5
 8011336:	f000 fd9d 	bl	8011e74 <_free_r>
 801133a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801133c:	b141      	cbz	r1, 8011350 <_fclose_r+0x9c>
 801133e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011342:	4299      	cmp	r1, r3
 8011344:	d002      	beq.n	801134c <_fclose_r+0x98>
 8011346:	4628      	mov	r0, r5
 8011348:	f000 fd94 	bl	8011e74 <_free_r>
 801134c:	2300      	movs	r3, #0
 801134e:	6363      	str	r3, [r4, #52]	; 0x34
 8011350:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011352:	b121      	cbz	r1, 801135e <_fclose_r+0xaa>
 8011354:	4628      	mov	r0, r5
 8011356:	f000 fd8d 	bl	8011e74 <_free_r>
 801135a:	2300      	movs	r3, #0
 801135c:	64a3      	str	r3, [r4, #72]	; 0x48
 801135e:	f000 f931 	bl	80115c4 <__sfp_lock_acquire>
 8011362:	2300      	movs	r3, #0
 8011364:	81a3      	strh	r3, [r4, #12]
 8011366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011368:	07db      	lsls	r3, r3, #31
 801136a:	d402      	bmi.n	8011372 <_fclose_r+0xbe>
 801136c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801136e:	f000 fcf6 	bl	8011d5e <__retarget_lock_release_recursive>
 8011372:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011374:	f000 fcef 	bl	8011d56 <__retarget_lock_close_recursive>
 8011378:	f000 f92a 	bl	80115d0 <__sfp_lock_release>
 801137c:	e79f      	b.n	80112be <_fclose_r+0xa>
 801137e:	bf00      	nop
 8011380:	08017738 	.word	0x08017738
 8011384:	08017758 	.word	0x08017758
 8011388:	08017718 	.word	0x08017718

0801138c <fclose>:
 801138c:	4b02      	ldr	r3, [pc, #8]	; (8011398 <fclose+0xc>)
 801138e:	4601      	mov	r1, r0
 8011390:	6818      	ldr	r0, [r3, #0]
 8011392:	f7ff bf8f 	b.w	80112b4 <_fclose_r>
 8011396:	bf00      	nop
 8011398:	20000100 	.word	0x20000100

0801139c <__sflush_r>:
 801139c:	898a      	ldrh	r2, [r1, #12]
 801139e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a2:	4605      	mov	r5, r0
 80113a4:	0710      	lsls	r0, r2, #28
 80113a6:	460c      	mov	r4, r1
 80113a8:	d458      	bmi.n	801145c <__sflush_r+0xc0>
 80113aa:	684b      	ldr	r3, [r1, #4]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	dc05      	bgt.n	80113bc <__sflush_r+0x20>
 80113b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	dc02      	bgt.n	80113bc <__sflush_r+0x20>
 80113b6:	2000      	movs	r0, #0
 80113b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113be:	2e00      	cmp	r6, #0
 80113c0:	d0f9      	beq.n	80113b6 <__sflush_r+0x1a>
 80113c2:	2300      	movs	r3, #0
 80113c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80113c8:	682f      	ldr	r7, [r5, #0]
 80113ca:	602b      	str	r3, [r5, #0]
 80113cc:	d032      	beq.n	8011434 <__sflush_r+0x98>
 80113ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80113d0:	89a3      	ldrh	r3, [r4, #12]
 80113d2:	075a      	lsls	r2, r3, #29
 80113d4:	d505      	bpl.n	80113e2 <__sflush_r+0x46>
 80113d6:	6863      	ldr	r3, [r4, #4]
 80113d8:	1ac0      	subs	r0, r0, r3
 80113da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80113dc:	b10b      	cbz	r3, 80113e2 <__sflush_r+0x46>
 80113de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80113e0:	1ac0      	subs	r0, r0, r3
 80113e2:	2300      	movs	r3, #0
 80113e4:	4602      	mov	r2, r0
 80113e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113e8:	6a21      	ldr	r1, [r4, #32]
 80113ea:	4628      	mov	r0, r5
 80113ec:	47b0      	blx	r6
 80113ee:	1c43      	adds	r3, r0, #1
 80113f0:	89a3      	ldrh	r3, [r4, #12]
 80113f2:	d106      	bne.n	8011402 <__sflush_r+0x66>
 80113f4:	6829      	ldr	r1, [r5, #0]
 80113f6:	291d      	cmp	r1, #29
 80113f8:	d82c      	bhi.n	8011454 <__sflush_r+0xb8>
 80113fa:	4a2a      	ldr	r2, [pc, #168]	; (80114a4 <__sflush_r+0x108>)
 80113fc:	40ca      	lsrs	r2, r1
 80113fe:	07d6      	lsls	r6, r2, #31
 8011400:	d528      	bpl.n	8011454 <__sflush_r+0xb8>
 8011402:	2200      	movs	r2, #0
 8011404:	6062      	str	r2, [r4, #4]
 8011406:	04d9      	lsls	r1, r3, #19
 8011408:	6922      	ldr	r2, [r4, #16]
 801140a:	6022      	str	r2, [r4, #0]
 801140c:	d504      	bpl.n	8011418 <__sflush_r+0x7c>
 801140e:	1c42      	adds	r2, r0, #1
 8011410:	d101      	bne.n	8011416 <__sflush_r+0x7a>
 8011412:	682b      	ldr	r3, [r5, #0]
 8011414:	b903      	cbnz	r3, 8011418 <__sflush_r+0x7c>
 8011416:	6560      	str	r0, [r4, #84]	; 0x54
 8011418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801141a:	602f      	str	r7, [r5, #0]
 801141c:	2900      	cmp	r1, #0
 801141e:	d0ca      	beq.n	80113b6 <__sflush_r+0x1a>
 8011420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011424:	4299      	cmp	r1, r3
 8011426:	d002      	beq.n	801142e <__sflush_r+0x92>
 8011428:	4628      	mov	r0, r5
 801142a:	f000 fd23 	bl	8011e74 <_free_r>
 801142e:	2000      	movs	r0, #0
 8011430:	6360      	str	r0, [r4, #52]	; 0x34
 8011432:	e7c1      	b.n	80113b8 <__sflush_r+0x1c>
 8011434:	6a21      	ldr	r1, [r4, #32]
 8011436:	2301      	movs	r3, #1
 8011438:	4628      	mov	r0, r5
 801143a:	47b0      	blx	r6
 801143c:	1c41      	adds	r1, r0, #1
 801143e:	d1c7      	bne.n	80113d0 <__sflush_r+0x34>
 8011440:	682b      	ldr	r3, [r5, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d0c4      	beq.n	80113d0 <__sflush_r+0x34>
 8011446:	2b1d      	cmp	r3, #29
 8011448:	d001      	beq.n	801144e <__sflush_r+0xb2>
 801144a:	2b16      	cmp	r3, #22
 801144c:	d101      	bne.n	8011452 <__sflush_r+0xb6>
 801144e:	602f      	str	r7, [r5, #0]
 8011450:	e7b1      	b.n	80113b6 <__sflush_r+0x1a>
 8011452:	89a3      	ldrh	r3, [r4, #12]
 8011454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011458:	81a3      	strh	r3, [r4, #12]
 801145a:	e7ad      	b.n	80113b8 <__sflush_r+0x1c>
 801145c:	690f      	ldr	r7, [r1, #16]
 801145e:	2f00      	cmp	r7, #0
 8011460:	d0a9      	beq.n	80113b6 <__sflush_r+0x1a>
 8011462:	0793      	lsls	r3, r2, #30
 8011464:	680e      	ldr	r6, [r1, #0]
 8011466:	bf08      	it	eq
 8011468:	694b      	ldreq	r3, [r1, #20]
 801146a:	600f      	str	r7, [r1, #0]
 801146c:	bf18      	it	ne
 801146e:	2300      	movne	r3, #0
 8011470:	eba6 0807 	sub.w	r8, r6, r7
 8011474:	608b      	str	r3, [r1, #8]
 8011476:	f1b8 0f00 	cmp.w	r8, #0
 801147a:	dd9c      	ble.n	80113b6 <__sflush_r+0x1a>
 801147c:	6a21      	ldr	r1, [r4, #32]
 801147e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011480:	4643      	mov	r3, r8
 8011482:	463a      	mov	r2, r7
 8011484:	4628      	mov	r0, r5
 8011486:	47b0      	blx	r6
 8011488:	2800      	cmp	r0, #0
 801148a:	dc06      	bgt.n	801149a <__sflush_r+0xfe>
 801148c:	89a3      	ldrh	r3, [r4, #12]
 801148e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011492:	81a3      	strh	r3, [r4, #12]
 8011494:	f04f 30ff 	mov.w	r0, #4294967295
 8011498:	e78e      	b.n	80113b8 <__sflush_r+0x1c>
 801149a:	4407      	add	r7, r0
 801149c:	eba8 0800 	sub.w	r8, r8, r0
 80114a0:	e7e9      	b.n	8011476 <__sflush_r+0xda>
 80114a2:	bf00      	nop
 80114a4:	20400001 	.word	0x20400001

080114a8 <_fflush_r>:
 80114a8:	b538      	push	{r3, r4, r5, lr}
 80114aa:	690b      	ldr	r3, [r1, #16]
 80114ac:	4605      	mov	r5, r0
 80114ae:	460c      	mov	r4, r1
 80114b0:	b913      	cbnz	r3, 80114b8 <_fflush_r+0x10>
 80114b2:	2500      	movs	r5, #0
 80114b4:	4628      	mov	r0, r5
 80114b6:	bd38      	pop	{r3, r4, r5, pc}
 80114b8:	b118      	cbz	r0, 80114c2 <_fflush_r+0x1a>
 80114ba:	6983      	ldr	r3, [r0, #24]
 80114bc:	b90b      	cbnz	r3, 80114c2 <_fflush_r+0x1a>
 80114be:	f000 f899 	bl	80115f4 <__sinit>
 80114c2:	4b14      	ldr	r3, [pc, #80]	; (8011514 <_fflush_r+0x6c>)
 80114c4:	429c      	cmp	r4, r3
 80114c6:	d11b      	bne.n	8011500 <_fflush_r+0x58>
 80114c8:	686c      	ldr	r4, [r5, #4]
 80114ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d0ef      	beq.n	80114b2 <_fflush_r+0xa>
 80114d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80114d4:	07d0      	lsls	r0, r2, #31
 80114d6:	d404      	bmi.n	80114e2 <_fflush_r+0x3a>
 80114d8:	0599      	lsls	r1, r3, #22
 80114da:	d402      	bmi.n	80114e2 <_fflush_r+0x3a>
 80114dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114de:	f000 fc3c 	bl	8011d5a <__retarget_lock_acquire_recursive>
 80114e2:	4628      	mov	r0, r5
 80114e4:	4621      	mov	r1, r4
 80114e6:	f7ff ff59 	bl	801139c <__sflush_r>
 80114ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114ec:	07da      	lsls	r2, r3, #31
 80114ee:	4605      	mov	r5, r0
 80114f0:	d4e0      	bmi.n	80114b4 <_fflush_r+0xc>
 80114f2:	89a3      	ldrh	r3, [r4, #12]
 80114f4:	059b      	lsls	r3, r3, #22
 80114f6:	d4dd      	bmi.n	80114b4 <_fflush_r+0xc>
 80114f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114fa:	f000 fc30 	bl	8011d5e <__retarget_lock_release_recursive>
 80114fe:	e7d9      	b.n	80114b4 <_fflush_r+0xc>
 8011500:	4b05      	ldr	r3, [pc, #20]	; (8011518 <_fflush_r+0x70>)
 8011502:	429c      	cmp	r4, r3
 8011504:	d101      	bne.n	801150a <_fflush_r+0x62>
 8011506:	68ac      	ldr	r4, [r5, #8]
 8011508:	e7df      	b.n	80114ca <_fflush_r+0x22>
 801150a:	4b04      	ldr	r3, [pc, #16]	; (801151c <_fflush_r+0x74>)
 801150c:	429c      	cmp	r4, r3
 801150e:	bf08      	it	eq
 8011510:	68ec      	ldreq	r4, [r5, #12]
 8011512:	e7da      	b.n	80114ca <_fflush_r+0x22>
 8011514:	08017738 	.word	0x08017738
 8011518:	08017758 	.word	0x08017758
 801151c:	08017718 	.word	0x08017718

08011520 <fflush>:
 8011520:	4601      	mov	r1, r0
 8011522:	b920      	cbnz	r0, 801152e <fflush+0xe>
 8011524:	4b04      	ldr	r3, [pc, #16]	; (8011538 <fflush+0x18>)
 8011526:	4905      	ldr	r1, [pc, #20]	; (801153c <fflush+0x1c>)
 8011528:	6818      	ldr	r0, [r3, #0]
 801152a:	f000 babb 	b.w	8011aa4 <_fwalk_reent>
 801152e:	4b04      	ldr	r3, [pc, #16]	; (8011540 <fflush+0x20>)
 8011530:	6818      	ldr	r0, [r3, #0]
 8011532:	f7ff bfb9 	b.w	80114a8 <_fflush_r>
 8011536:	bf00      	nop
 8011538:	08017778 	.word	0x08017778
 801153c:	080114a9 	.word	0x080114a9
 8011540:	20000100 	.word	0x20000100

08011544 <std>:
 8011544:	2300      	movs	r3, #0
 8011546:	b510      	push	{r4, lr}
 8011548:	4604      	mov	r4, r0
 801154a:	e9c0 3300 	strd	r3, r3, [r0]
 801154e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011552:	6083      	str	r3, [r0, #8]
 8011554:	8181      	strh	r1, [r0, #12]
 8011556:	6643      	str	r3, [r0, #100]	; 0x64
 8011558:	81c2      	strh	r2, [r0, #14]
 801155a:	6183      	str	r3, [r0, #24]
 801155c:	4619      	mov	r1, r3
 801155e:	2208      	movs	r2, #8
 8011560:	305c      	adds	r0, #92	; 0x5c
 8011562:	f000 fc7f 	bl	8011e64 <memset>
 8011566:	4b05      	ldr	r3, [pc, #20]	; (801157c <std+0x38>)
 8011568:	6263      	str	r3, [r4, #36]	; 0x24
 801156a:	4b05      	ldr	r3, [pc, #20]	; (8011580 <std+0x3c>)
 801156c:	62a3      	str	r3, [r4, #40]	; 0x28
 801156e:	4b05      	ldr	r3, [pc, #20]	; (8011584 <std+0x40>)
 8011570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011572:	4b05      	ldr	r3, [pc, #20]	; (8011588 <std+0x44>)
 8011574:	6224      	str	r4, [r4, #32]
 8011576:	6323      	str	r3, [r4, #48]	; 0x30
 8011578:	bd10      	pop	{r4, pc}
 801157a:	bf00      	nop
 801157c:	080121ad 	.word	0x080121ad
 8011580:	080121d3 	.word	0x080121d3
 8011584:	0801220b 	.word	0x0801220b
 8011588:	0801222f 	.word	0x0801222f

0801158c <_cleanup_r>:
 801158c:	4901      	ldr	r1, [pc, #4]	; (8011594 <_cleanup_r+0x8>)
 801158e:	f000 ba89 	b.w	8011aa4 <_fwalk_reent>
 8011592:	bf00      	nop
 8011594:	080114a9 	.word	0x080114a9

08011598 <__sfmoreglue>:
 8011598:	b570      	push	{r4, r5, r6, lr}
 801159a:	1e4a      	subs	r2, r1, #1
 801159c:	2568      	movs	r5, #104	; 0x68
 801159e:	4355      	muls	r5, r2
 80115a0:	460e      	mov	r6, r1
 80115a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80115a6:	f000 fcb5 	bl	8011f14 <_malloc_r>
 80115aa:	4604      	mov	r4, r0
 80115ac:	b140      	cbz	r0, 80115c0 <__sfmoreglue+0x28>
 80115ae:	2100      	movs	r1, #0
 80115b0:	e9c0 1600 	strd	r1, r6, [r0]
 80115b4:	300c      	adds	r0, #12
 80115b6:	60a0      	str	r0, [r4, #8]
 80115b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80115bc:	f000 fc52 	bl	8011e64 <memset>
 80115c0:	4620      	mov	r0, r4
 80115c2:	bd70      	pop	{r4, r5, r6, pc}

080115c4 <__sfp_lock_acquire>:
 80115c4:	4801      	ldr	r0, [pc, #4]	; (80115cc <__sfp_lock_acquire+0x8>)
 80115c6:	f000 bbc8 	b.w	8011d5a <__retarget_lock_acquire_recursive>
 80115ca:	bf00      	nop
 80115cc:	20000ba0 	.word	0x20000ba0

080115d0 <__sfp_lock_release>:
 80115d0:	4801      	ldr	r0, [pc, #4]	; (80115d8 <__sfp_lock_release+0x8>)
 80115d2:	f000 bbc4 	b.w	8011d5e <__retarget_lock_release_recursive>
 80115d6:	bf00      	nop
 80115d8:	20000ba0 	.word	0x20000ba0

080115dc <__sinit_lock_acquire>:
 80115dc:	4801      	ldr	r0, [pc, #4]	; (80115e4 <__sinit_lock_acquire+0x8>)
 80115de:	f000 bbbc 	b.w	8011d5a <__retarget_lock_acquire_recursive>
 80115e2:	bf00      	nop
 80115e4:	20000b9b 	.word	0x20000b9b

080115e8 <__sinit_lock_release>:
 80115e8:	4801      	ldr	r0, [pc, #4]	; (80115f0 <__sinit_lock_release+0x8>)
 80115ea:	f000 bbb8 	b.w	8011d5e <__retarget_lock_release_recursive>
 80115ee:	bf00      	nop
 80115f0:	20000b9b 	.word	0x20000b9b

080115f4 <__sinit>:
 80115f4:	b510      	push	{r4, lr}
 80115f6:	4604      	mov	r4, r0
 80115f8:	f7ff fff0 	bl	80115dc <__sinit_lock_acquire>
 80115fc:	69a3      	ldr	r3, [r4, #24]
 80115fe:	b11b      	cbz	r3, 8011608 <__sinit+0x14>
 8011600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011604:	f7ff bff0 	b.w	80115e8 <__sinit_lock_release>
 8011608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801160c:	6523      	str	r3, [r4, #80]	; 0x50
 801160e:	4b13      	ldr	r3, [pc, #76]	; (801165c <__sinit+0x68>)
 8011610:	4a13      	ldr	r2, [pc, #76]	; (8011660 <__sinit+0x6c>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	62a2      	str	r2, [r4, #40]	; 0x28
 8011616:	42a3      	cmp	r3, r4
 8011618:	bf04      	itt	eq
 801161a:	2301      	moveq	r3, #1
 801161c:	61a3      	streq	r3, [r4, #24]
 801161e:	4620      	mov	r0, r4
 8011620:	f000 f820 	bl	8011664 <__sfp>
 8011624:	6060      	str	r0, [r4, #4]
 8011626:	4620      	mov	r0, r4
 8011628:	f000 f81c 	bl	8011664 <__sfp>
 801162c:	60a0      	str	r0, [r4, #8]
 801162e:	4620      	mov	r0, r4
 8011630:	f000 f818 	bl	8011664 <__sfp>
 8011634:	2200      	movs	r2, #0
 8011636:	60e0      	str	r0, [r4, #12]
 8011638:	2104      	movs	r1, #4
 801163a:	6860      	ldr	r0, [r4, #4]
 801163c:	f7ff ff82 	bl	8011544 <std>
 8011640:	68a0      	ldr	r0, [r4, #8]
 8011642:	2201      	movs	r2, #1
 8011644:	2109      	movs	r1, #9
 8011646:	f7ff ff7d 	bl	8011544 <std>
 801164a:	68e0      	ldr	r0, [r4, #12]
 801164c:	2202      	movs	r2, #2
 801164e:	2112      	movs	r1, #18
 8011650:	f7ff ff78 	bl	8011544 <std>
 8011654:	2301      	movs	r3, #1
 8011656:	61a3      	str	r3, [r4, #24]
 8011658:	e7d2      	b.n	8011600 <__sinit+0xc>
 801165a:	bf00      	nop
 801165c:	08017778 	.word	0x08017778
 8011660:	0801158d 	.word	0x0801158d

08011664 <__sfp>:
 8011664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011666:	4607      	mov	r7, r0
 8011668:	f7ff ffac 	bl	80115c4 <__sfp_lock_acquire>
 801166c:	4b1e      	ldr	r3, [pc, #120]	; (80116e8 <__sfp+0x84>)
 801166e:	681e      	ldr	r6, [r3, #0]
 8011670:	69b3      	ldr	r3, [r6, #24]
 8011672:	b913      	cbnz	r3, 801167a <__sfp+0x16>
 8011674:	4630      	mov	r0, r6
 8011676:	f7ff ffbd 	bl	80115f4 <__sinit>
 801167a:	3648      	adds	r6, #72	; 0x48
 801167c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011680:	3b01      	subs	r3, #1
 8011682:	d503      	bpl.n	801168c <__sfp+0x28>
 8011684:	6833      	ldr	r3, [r6, #0]
 8011686:	b30b      	cbz	r3, 80116cc <__sfp+0x68>
 8011688:	6836      	ldr	r6, [r6, #0]
 801168a:	e7f7      	b.n	801167c <__sfp+0x18>
 801168c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011690:	b9d5      	cbnz	r5, 80116c8 <__sfp+0x64>
 8011692:	4b16      	ldr	r3, [pc, #88]	; (80116ec <__sfp+0x88>)
 8011694:	60e3      	str	r3, [r4, #12]
 8011696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801169a:	6665      	str	r5, [r4, #100]	; 0x64
 801169c:	f000 fb5a 	bl	8011d54 <__retarget_lock_init_recursive>
 80116a0:	f7ff ff96 	bl	80115d0 <__sfp_lock_release>
 80116a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80116a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80116ac:	6025      	str	r5, [r4, #0]
 80116ae:	61a5      	str	r5, [r4, #24]
 80116b0:	2208      	movs	r2, #8
 80116b2:	4629      	mov	r1, r5
 80116b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80116b8:	f000 fbd4 	bl	8011e64 <memset>
 80116bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80116c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80116c4:	4620      	mov	r0, r4
 80116c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116c8:	3468      	adds	r4, #104	; 0x68
 80116ca:	e7d9      	b.n	8011680 <__sfp+0x1c>
 80116cc:	2104      	movs	r1, #4
 80116ce:	4638      	mov	r0, r7
 80116d0:	f7ff ff62 	bl	8011598 <__sfmoreglue>
 80116d4:	4604      	mov	r4, r0
 80116d6:	6030      	str	r0, [r6, #0]
 80116d8:	2800      	cmp	r0, #0
 80116da:	d1d5      	bne.n	8011688 <__sfp+0x24>
 80116dc:	f7ff ff78 	bl	80115d0 <__sfp_lock_release>
 80116e0:	230c      	movs	r3, #12
 80116e2:	603b      	str	r3, [r7, #0]
 80116e4:	e7ee      	b.n	80116c4 <__sfp+0x60>
 80116e6:	bf00      	nop
 80116e8:	08017778 	.word	0x08017778
 80116ec:	ffff0001 	.word	0xffff0001

080116f0 <_fopen_r>:
 80116f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116f2:	460f      	mov	r7, r1
 80116f4:	4611      	mov	r1, r2
 80116f6:	aa01      	add	r2, sp, #4
 80116f8:	4605      	mov	r5, r0
 80116fa:	f001 ff71 	bl	80135e0 <__sflags>
 80116fe:	4606      	mov	r6, r0
 8011700:	b918      	cbnz	r0, 801170a <_fopen_r+0x1a>
 8011702:	2400      	movs	r4, #0
 8011704:	4620      	mov	r0, r4
 8011706:	b003      	add	sp, #12
 8011708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801170a:	4628      	mov	r0, r5
 801170c:	f7ff ffaa 	bl	8011664 <__sfp>
 8011710:	4604      	mov	r4, r0
 8011712:	2800      	cmp	r0, #0
 8011714:	d0f5      	beq.n	8011702 <_fopen_r+0x12>
 8011716:	4639      	mov	r1, r7
 8011718:	9a01      	ldr	r2, [sp, #4]
 801171a:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801171e:	4628      	mov	r0, r5
 8011720:	f000 fc52 	bl	8011fc8 <_open_r>
 8011724:	1e07      	subs	r7, r0, #0
 8011726:	da09      	bge.n	801173c <_fopen_r+0x4c>
 8011728:	2500      	movs	r5, #0
 801172a:	f7ff ff4b 	bl	80115c4 <__sfp_lock_acquire>
 801172e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011730:	81a5      	strh	r5, [r4, #12]
 8011732:	f000 fb10 	bl	8011d56 <__retarget_lock_close_recursive>
 8011736:	f7ff ff4b 	bl	80115d0 <__sfp_lock_release>
 801173a:	e7e2      	b.n	8011702 <_fopen_r+0x12>
 801173c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801173e:	07db      	lsls	r3, r3, #31
 8011740:	d405      	bmi.n	801174e <_fopen_r+0x5e>
 8011742:	89a3      	ldrh	r3, [r4, #12]
 8011744:	0598      	lsls	r0, r3, #22
 8011746:	d402      	bmi.n	801174e <_fopen_r+0x5e>
 8011748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801174a:	f000 fb06 	bl	8011d5a <__retarget_lock_acquire_recursive>
 801174e:	4b0e      	ldr	r3, [pc, #56]	; (8011788 <_fopen_r+0x98>)
 8011750:	6263      	str	r3, [r4, #36]	; 0x24
 8011752:	4b0e      	ldr	r3, [pc, #56]	; (801178c <_fopen_r+0x9c>)
 8011754:	62a3      	str	r3, [r4, #40]	; 0x28
 8011756:	4b0e      	ldr	r3, [pc, #56]	; (8011790 <_fopen_r+0xa0>)
 8011758:	62e3      	str	r3, [r4, #44]	; 0x2c
 801175a:	05f1      	lsls	r1, r6, #23
 801175c:	4b0d      	ldr	r3, [pc, #52]	; (8011794 <_fopen_r+0xa4>)
 801175e:	81e7      	strh	r7, [r4, #14]
 8011760:	81a6      	strh	r6, [r4, #12]
 8011762:	6224      	str	r4, [r4, #32]
 8011764:	6323      	str	r3, [r4, #48]	; 0x30
 8011766:	d505      	bpl.n	8011774 <_fopen_r+0x84>
 8011768:	2302      	movs	r3, #2
 801176a:	2200      	movs	r2, #0
 801176c:	4621      	mov	r1, r4
 801176e:	4628      	mov	r0, r5
 8011770:	f000 f888 	bl	8011884 <_fseek_r>
 8011774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011776:	07da      	lsls	r2, r3, #31
 8011778:	d4c4      	bmi.n	8011704 <_fopen_r+0x14>
 801177a:	89a3      	ldrh	r3, [r4, #12]
 801177c:	059b      	lsls	r3, r3, #22
 801177e:	d4c1      	bmi.n	8011704 <_fopen_r+0x14>
 8011780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011782:	f000 faec 	bl	8011d5e <__retarget_lock_release_recursive>
 8011786:	e7bd      	b.n	8011704 <_fopen_r+0x14>
 8011788:	080121ad 	.word	0x080121ad
 801178c:	080121d3 	.word	0x080121d3
 8011790:	0801220b 	.word	0x0801220b
 8011794:	0801222f 	.word	0x0801222f

08011798 <fopen>:
 8011798:	4b02      	ldr	r3, [pc, #8]	; (80117a4 <fopen+0xc>)
 801179a:	460a      	mov	r2, r1
 801179c:	4601      	mov	r1, r0
 801179e:	6818      	ldr	r0, [r3, #0]
 80117a0:	f7ff bfa6 	b.w	80116f0 <_fopen_r>
 80117a4:	20000100 	.word	0x20000100

080117a8 <_fputs_r>:
 80117a8:	b570      	push	{r4, r5, r6, lr}
 80117aa:	460e      	mov	r6, r1
 80117ac:	4614      	mov	r4, r2
 80117ae:	4605      	mov	r5, r0
 80117b0:	b118      	cbz	r0, 80117ba <_fputs_r+0x12>
 80117b2:	6983      	ldr	r3, [r0, #24]
 80117b4:	b90b      	cbnz	r3, 80117ba <_fputs_r+0x12>
 80117b6:	f7ff ff1d 	bl	80115f4 <__sinit>
 80117ba:	4b2b      	ldr	r3, [pc, #172]	; (8011868 <_fputs_r+0xc0>)
 80117bc:	429c      	cmp	r4, r3
 80117be:	d11e      	bne.n	80117fe <_fputs_r+0x56>
 80117c0:	686c      	ldr	r4, [r5, #4]
 80117c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117c4:	07da      	lsls	r2, r3, #31
 80117c6:	d405      	bmi.n	80117d4 <_fputs_r+0x2c>
 80117c8:	89a3      	ldrh	r3, [r4, #12]
 80117ca:	059b      	lsls	r3, r3, #22
 80117cc:	d402      	bmi.n	80117d4 <_fputs_r+0x2c>
 80117ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117d0:	f000 fac3 	bl	8011d5a <__retarget_lock_acquire_recursive>
 80117d4:	89a3      	ldrh	r3, [r4, #12]
 80117d6:	0718      	lsls	r0, r3, #28
 80117d8:	d51b      	bpl.n	8011812 <_fputs_r+0x6a>
 80117da:	6923      	ldr	r3, [r4, #16]
 80117dc:	b1cb      	cbz	r3, 8011812 <_fputs_r+0x6a>
 80117de:	3e01      	subs	r6, #1
 80117e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80117e4:	bb39      	cbnz	r1, 8011836 <_fputs_r+0x8e>
 80117e6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80117e8:	f015 0501 	ands.w	r5, r5, #1
 80117ec:	d139      	bne.n	8011862 <_fputs_r+0xba>
 80117ee:	89a3      	ldrh	r3, [r4, #12]
 80117f0:	0599      	lsls	r1, r3, #22
 80117f2:	d402      	bmi.n	80117fa <_fputs_r+0x52>
 80117f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117f6:	f000 fab2 	bl	8011d5e <__retarget_lock_release_recursive>
 80117fa:	4628      	mov	r0, r5
 80117fc:	bd70      	pop	{r4, r5, r6, pc}
 80117fe:	4b1b      	ldr	r3, [pc, #108]	; (801186c <_fputs_r+0xc4>)
 8011800:	429c      	cmp	r4, r3
 8011802:	d101      	bne.n	8011808 <_fputs_r+0x60>
 8011804:	68ac      	ldr	r4, [r5, #8]
 8011806:	e7dc      	b.n	80117c2 <_fputs_r+0x1a>
 8011808:	4b19      	ldr	r3, [pc, #100]	; (8011870 <_fputs_r+0xc8>)
 801180a:	429c      	cmp	r4, r3
 801180c:	bf08      	it	eq
 801180e:	68ec      	ldreq	r4, [r5, #12]
 8011810:	e7d7      	b.n	80117c2 <_fputs_r+0x1a>
 8011812:	4621      	mov	r1, r4
 8011814:	4628      	mov	r0, r5
 8011816:	f001 fde1 	bl	80133dc <__swsetup_r>
 801181a:	2800      	cmp	r0, #0
 801181c:	d0df      	beq.n	80117de <_fputs_r+0x36>
 801181e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011820:	07da      	lsls	r2, r3, #31
 8011822:	d405      	bmi.n	8011830 <_fputs_r+0x88>
 8011824:	89a3      	ldrh	r3, [r4, #12]
 8011826:	059b      	lsls	r3, r3, #22
 8011828:	d402      	bmi.n	8011830 <_fputs_r+0x88>
 801182a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801182c:	f000 fa97 	bl	8011d5e <__retarget_lock_release_recursive>
 8011830:	f04f 35ff 	mov.w	r5, #4294967295
 8011834:	e7e1      	b.n	80117fa <_fputs_r+0x52>
 8011836:	68a3      	ldr	r3, [r4, #8]
 8011838:	3b01      	subs	r3, #1
 801183a:	2b00      	cmp	r3, #0
 801183c:	60a3      	str	r3, [r4, #8]
 801183e:	da04      	bge.n	801184a <_fputs_r+0xa2>
 8011840:	69a2      	ldr	r2, [r4, #24]
 8011842:	4293      	cmp	r3, r2
 8011844:	db06      	blt.n	8011854 <_fputs_r+0xac>
 8011846:	290a      	cmp	r1, #10
 8011848:	d004      	beq.n	8011854 <_fputs_r+0xac>
 801184a:	6823      	ldr	r3, [r4, #0]
 801184c:	1c5a      	adds	r2, r3, #1
 801184e:	6022      	str	r2, [r4, #0]
 8011850:	7019      	strb	r1, [r3, #0]
 8011852:	e7c5      	b.n	80117e0 <_fputs_r+0x38>
 8011854:	4622      	mov	r2, r4
 8011856:	4628      	mov	r0, r5
 8011858:	f001 fd5c 	bl	8013314 <__swbuf_r>
 801185c:	3001      	adds	r0, #1
 801185e:	d1bf      	bne.n	80117e0 <_fputs_r+0x38>
 8011860:	e7dd      	b.n	801181e <_fputs_r+0x76>
 8011862:	460d      	mov	r5, r1
 8011864:	e7c9      	b.n	80117fa <_fputs_r+0x52>
 8011866:	bf00      	nop
 8011868:	08017738 	.word	0x08017738
 801186c:	08017758 	.word	0x08017758
 8011870:	08017718 	.word	0x08017718

08011874 <fputs>:
 8011874:	4b02      	ldr	r3, [pc, #8]	; (8011880 <fputs+0xc>)
 8011876:	460a      	mov	r2, r1
 8011878:	4601      	mov	r1, r0
 801187a:	6818      	ldr	r0, [r3, #0]
 801187c:	f7ff bf94 	b.w	80117a8 <_fputs_r>
 8011880:	20000100 	.word	0x20000100

08011884 <_fseek_r>:
 8011884:	f000 b800 	b.w	8011888 <_fseeko_r>

08011888 <_fseeko_r>:
 8011888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801188c:	460c      	mov	r4, r1
 801188e:	4617      	mov	r7, r2
 8011890:	461e      	mov	r6, r3
 8011892:	4605      	mov	r5, r0
 8011894:	b118      	cbz	r0, 801189e <_fseeko_r+0x16>
 8011896:	6983      	ldr	r3, [r0, #24]
 8011898:	b90b      	cbnz	r3, 801189e <_fseeko_r+0x16>
 801189a:	f7ff feab 	bl	80115f4 <__sinit>
 801189e:	4b44      	ldr	r3, [pc, #272]	; (80119b0 <_fseeko_r+0x128>)
 80118a0:	429c      	cmp	r4, r3
 80118a2:	d122      	bne.n	80118ea <_fseeko_r+0x62>
 80118a4:	686c      	ldr	r4, [r5, #4]
 80118a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118a8:	07d9      	lsls	r1, r3, #31
 80118aa:	d405      	bmi.n	80118b8 <_fseeko_r+0x30>
 80118ac:	89a3      	ldrh	r3, [r4, #12]
 80118ae:	059a      	lsls	r2, r3, #22
 80118b0:	d402      	bmi.n	80118b8 <_fseeko_r+0x30>
 80118b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118b4:	f000 fa51 	bl	8011d5a <__retarget_lock_acquire_recursive>
 80118b8:	89a3      	ldrh	r3, [r4, #12]
 80118ba:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80118be:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80118c2:	d103      	bne.n	80118cc <_fseeko_r+0x44>
 80118c4:	4621      	mov	r1, r4
 80118c6:	4628      	mov	r0, r5
 80118c8:	f7ff fdee 	bl	80114a8 <_fflush_r>
 80118cc:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80118d0:	f1b8 0f00 	cmp.w	r8, #0
 80118d4:	d113      	bne.n	80118fe <_fseeko_r+0x76>
 80118d6:	231d      	movs	r3, #29
 80118d8:	602b      	str	r3, [r5, #0]
 80118da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118dc:	07d9      	lsls	r1, r3, #31
 80118de:	d55d      	bpl.n	801199c <_fseeko_r+0x114>
 80118e0:	f04f 36ff 	mov.w	r6, #4294967295
 80118e4:	4630      	mov	r0, r6
 80118e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ea:	4b32      	ldr	r3, [pc, #200]	; (80119b4 <_fseeko_r+0x12c>)
 80118ec:	429c      	cmp	r4, r3
 80118ee:	d101      	bne.n	80118f4 <_fseeko_r+0x6c>
 80118f0:	68ac      	ldr	r4, [r5, #8]
 80118f2:	e7d8      	b.n	80118a6 <_fseeko_r+0x1e>
 80118f4:	4b30      	ldr	r3, [pc, #192]	; (80119b8 <_fseeko_r+0x130>)
 80118f6:	429c      	cmp	r4, r3
 80118f8:	bf08      	it	eq
 80118fa:	68ec      	ldreq	r4, [r5, #12]
 80118fc:	e7d3      	b.n	80118a6 <_fseeko_r+0x1e>
 80118fe:	2e01      	cmp	r6, #1
 8011900:	d036      	beq.n	8011970 <_fseeko_r+0xe8>
 8011902:	f036 0302 	bics.w	r3, r6, #2
 8011906:	d147      	bne.n	8011998 <_fseeko_r+0x110>
 8011908:	6923      	ldr	r3, [r4, #16]
 801190a:	b91b      	cbnz	r3, 8011914 <_fseeko_r+0x8c>
 801190c:	4621      	mov	r1, r4
 801190e:	4628      	mov	r0, r5
 8011910:	f000 fa4a 	bl	8011da8 <__smakebuf_r>
 8011914:	4621      	mov	r1, r4
 8011916:	4628      	mov	r0, r5
 8011918:	f7ff fdc6 	bl	80114a8 <_fflush_r>
 801191c:	2800      	cmp	r0, #0
 801191e:	d1dc      	bne.n	80118da <_fseeko_r+0x52>
 8011920:	6a21      	ldr	r1, [r4, #32]
 8011922:	4633      	mov	r3, r6
 8011924:	463a      	mov	r2, r7
 8011926:	4628      	mov	r0, r5
 8011928:	47c0      	blx	r8
 801192a:	3001      	adds	r0, #1
 801192c:	d0d5      	beq.n	80118da <_fseeko_r+0x52>
 801192e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011930:	b141      	cbz	r1, 8011944 <_fseeko_r+0xbc>
 8011932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011936:	4299      	cmp	r1, r3
 8011938:	d002      	beq.n	8011940 <_fseeko_r+0xb8>
 801193a:	4628      	mov	r0, r5
 801193c:	f000 fa9a 	bl	8011e74 <_free_r>
 8011940:	2300      	movs	r3, #0
 8011942:	6363      	str	r3, [r4, #52]	; 0x34
 8011944:	6923      	ldr	r3, [r4, #16]
 8011946:	6023      	str	r3, [r4, #0]
 8011948:	89a3      	ldrh	r3, [r4, #12]
 801194a:	2500      	movs	r5, #0
 801194c:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8011950:	6065      	str	r5, [r4, #4]
 8011952:	81a3      	strh	r3, [r4, #12]
 8011954:	2208      	movs	r2, #8
 8011956:	4629      	mov	r1, r5
 8011958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801195c:	f000 fa82 	bl	8011e64 <memset>
 8011960:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8011962:	f016 0601 	ands.w	r6, r6, #1
 8011966:	d120      	bne.n	80119aa <_fseeko_r+0x122>
 8011968:	89a3      	ldrh	r3, [r4, #12]
 801196a:	059b      	lsls	r3, r3, #22
 801196c:	d4ba      	bmi.n	80118e4 <_fseeko_r+0x5c>
 801196e:	e00c      	b.n	801198a <_fseeko_r+0x102>
 8011970:	4621      	mov	r1, r4
 8011972:	4628      	mov	r0, r5
 8011974:	f000 f822 	bl	80119bc <_ftello_r>
 8011978:	1c43      	adds	r3, r0, #1
 801197a:	4606      	mov	r6, r0
 801197c:	d109      	bne.n	8011992 <_fseeko_r+0x10a>
 801197e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011980:	07dd      	lsls	r5, r3, #31
 8011982:	d4ad      	bmi.n	80118e0 <_fseeko_r+0x58>
 8011984:	89a3      	ldrh	r3, [r4, #12]
 8011986:	0598      	lsls	r0, r3, #22
 8011988:	d4aa      	bmi.n	80118e0 <_fseeko_r+0x58>
 801198a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801198c:	f000 f9e7 	bl	8011d5e <__retarget_lock_release_recursive>
 8011990:	e7a8      	b.n	80118e4 <_fseeko_r+0x5c>
 8011992:	4407      	add	r7, r0
 8011994:	2600      	movs	r6, #0
 8011996:	e7b7      	b.n	8011908 <_fseeko_r+0x80>
 8011998:	2316      	movs	r3, #22
 801199a:	e79d      	b.n	80118d8 <_fseeko_r+0x50>
 801199c:	89a3      	ldrh	r3, [r4, #12]
 801199e:	059a      	lsls	r2, r3, #22
 80119a0:	d49e      	bmi.n	80118e0 <_fseeko_r+0x58>
 80119a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119a4:	f000 f9db 	bl	8011d5e <__retarget_lock_release_recursive>
 80119a8:	e79a      	b.n	80118e0 <_fseeko_r+0x58>
 80119aa:	462e      	mov	r6, r5
 80119ac:	e79a      	b.n	80118e4 <_fseeko_r+0x5c>
 80119ae:	bf00      	nop
 80119b0:	08017738 	.word	0x08017738
 80119b4:	08017758 	.word	0x08017758
 80119b8:	08017718 	.word	0x08017718

080119bc <_ftello_r>:
 80119bc:	b570      	push	{r4, r5, r6, lr}
 80119be:	460c      	mov	r4, r1
 80119c0:	4605      	mov	r5, r0
 80119c2:	b118      	cbz	r0, 80119cc <_ftello_r+0x10>
 80119c4:	6983      	ldr	r3, [r0, #24]
 80119c6:	b90b      	cbnz	r3, 80119cc <_ftello_r+0x10>
 80119c8:	f7ff fe14 	bl	80115f4 <__sinit>
 80119cc:	4b32      	ldr	r3, [pc, #200]	; (8011a98 <_ftello_r+0xdc>)
 80119ce:	429c      	cmp	r4, r3
 80119d0:	d114      	bne.n	80119fc <_ftello_r+0x40>
 80119d2:	686c      	ldr	r4, [r5, #4]
 80119d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80119d6:	07da      	lsls	r2, r3, #31
 80119d8:	d405      	bmi.n	80119e6 <_ftello_r+0x2a>
 80119da:	89a3      	ldrh	r3, [r4, #12]
 80119dc:	059b      	lsls	r3, r3, #22
 80119de:	d402      	bmi.n	80119e6 <_ftello_r+0x2a>
 80119e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119e2:	f000 f9ba 	bl	8011d5a <__retarget_lock_acquire_recursive>
 80119e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119e8:	b9ce      	cbnz	r6, 8011a1e <_ftello_r+0x62>
 80119ea:	231d      	movs	r3, #29
 80119ec:	602b      	str	r3, [r5, #0]
 80119ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80119f0:	07de      	lsls	r6, r3, #31
 80119f2:	d50d      	bpl.n	8011a10 <_ftello_r+0x54>
 80119f4:	f04f 35ff 	mov.w	r5, #4294967295
 80119f8:	4628      	mov	r0, r5
 80119fa:	bd70      	pop	{r4, r5, r6, pc}
 80119fc:	4b27      	ldr	r3, [pc, #156]	; (8011a9c <_ftello_r+0xe0>)
 80119fe:	429c      	cmp	r4, r3
 8011a00:	d101      	bne.n	8011a06 <_ftello_r+0x4a>
 8011a02:	68ac      	ldr	r4, [r5, #8]
 8011a04:	e7e6      	b.n	80119d4 <_ftello_r+0x18>
 8011a06:	4b26      	ldr	r3, [pc, #152]	; (8011aa0 <_ftello_r+0xe4>)
 8011a08:	429c      	cmp	r4, r3
 8011a0a:	bf08      	it	eq
 8011a0c:	68ec      	ldreq	r4, [r5, #12]
 8011a0e:	e7e1      	b.n	80119d4 <_ftello_r+0x18>
 8011a10:	89a3      	ldrh	r3, [r4, #12]
 8011a12:	059d      	lsls	r5, r3, #22
 8011a14:	d4ee      	bmi.n	80119f4 <_ftello_r+0x38>
 8011a16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a18:	f000 f9a1 	bl	8011d5e <__retarget_lock_release_recursive>
 8011a1c:	e7ea      	b.n	80119f4 <_ftello_r+0x38>
 8011a1e:	89a2      	ldrh	r2, [r4, #12]
 8011a20:	f002 030c 	and.w	r3, r2, #12
 8011a24:	2b08      	cmp	r3, #8
 8011a26:	d119      	bne.n	8011a5c <_ftello_r+0xa0>
 8011a28:	6823      	ldr	r3, [r4, #0]
 8011a2a:	b1bb      	cbz	r3, 8011a5c <_ftello_r+0xa0>
 8011a2c:	6921      	ldr	r1, [r4, #16]
 8011a2e:	1a5b      	subs	r3, r3, r1
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	dd13      	ble.n	8011a5c <_ftello_r+0xa0>
 8011a34:	05d0      	lsls	r0, r2, #23
 8011a36:	d511      	bpl.n	8011a5c <_ftello_r+0xa0>
 8011a38:	2302      	movs	r3, #2
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	6a21      	ldr	r1, [r4, #32]
 8011a3e:	4628      	mov	r0, r5
 8011a40:	47b0      	blx	r6
 8011a42:	1c41      	adds	r1, r0, #1
 8011a44:	4605      	mov	r5, r0
 8011a46:	d10d      	bne.n	8011a64 <_ftello_r+0xa8>
 8011a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a4a:	07da      	lsls	r2, r3, #31
 8011a4c:	d4d2      	bmi.n	80119f4 <_ftello_r+0x38>
 8011a4e:	89a3      	ldrh	r3, [r4, #12]
 8011a50:	059b      	lsls	r3, r3, #22
 8011a52:	d4cf      	bmi.n	80119f4 <_ftello_r+0x38>
 8011a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a56:	f000 f982 	bl	8011d5e <__retarget_lock_release_recursive>
 8011a5a:	e7cd      	b.n	80119f8 <_ftello_r+0x3c>
 8011a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a60:	d00f      	beq.n	8011a82 <_ftello_r+0xc6>
 8011a62:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8011a64:	89a2      	ldrh	r2, [r4, #12]
 8011a66:	0756      	lsls	r6, r2, #29
 8011a68:	d50d      	bpl.n	8011a86 <_ftello_r+0xca>
 8011a6a:	6863      	ldr	r3, [r4, #4]
 8011a6c:	1aed      	subs	r5, r5, r3
 8011a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a70:	b10b      	cbz	r3, 8011a76 <_ftello_r+0xba>
 8011a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a74:	1aed      	subs	r5, r5, r3
 8011a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a78:	07d9      	lsls	r1, r3, #31
 8011a7a:	d4bd      	bmi.n	80119f8 <_ftello_r+0x3c>
 8011a7c:	0593      	lsls	r3, r2, #22
 8011a7e:	d4bb      	bmi.n	80119f8 <_ftello_r+0x3c>
 8011a80:	e7e8      	b.n	8011a54 <_ftello_r+0x98>
 8011a82:	2301      	movs	r3, #1
 8011a84:	e7da      	b.n	8011a3c <_ftello_r+0x80>
 8011a86:	0710      	lsls	r0, r2, #28
 8011a88:	d5f5      	bpl.n	8011a76 <_ftello_r+0xba>
 8011a8a:	6823      	ldr	r3, [r4, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d0f2      	beq.n	8011a76 <_ftello_r+0xba>
 8011a90:	6921      	ldr	r1, [r4, #16]
 8011a92:	1a5b      	subs	r3, r3, r1
 8011a94:	441d      	add	r5, r3
 8011a96:	e7ee      	b.n	8011a76 <_ftello_r+0xba>
 8011a98:	08017738 	.word	0x08017738
 8011a9c:	08017758 	.word	0x08017758
 8011aa0:	08017718 	.word	0x08017718

08011aa4 <_fwalk_reent>:
 8011aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011aa8:	4606      	mov	r6, r0
 8011aaa:	4688      	mov	r8, r1
 8011aac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ab0:	2700      	movs	r7, #0
 8011ab2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ab6:	f1b9 0901 	subs.w	r9, r9, #1
 8011aba:	d505      	bpl.n	8011ac8 <_fwalk_reent+0x24>
 8011abc:	6824      	ldr	r4, [r4, #0]
 8011abe:	2c00      	cmp	r4, #0
 8011ac0:	d1f7      	bne.n	8011ab2 <_fwalk_reent+0xe>
 8011ac2:	4638      	mov	r0, r7
 8011ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ac8:	89ab      	ldrh	r3, [r5, #12]
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d907      	bls.n	8011ade <_fwalk_reent+0x3a>
 8011ace:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	d003      	beq.n	8011ade <_fwalk_reent+0x3a>
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	4630      	mov	r0, r6
 8011ada:	47c0      	blx	r8
 8011adc:	4307      	orrs	r7, r0
 8011ade:	3568      	adds	r5, #104	; 0x68
 8011ae0:	e7e9      	b.n	8011ab6 <_fwalk_reent+0x12>
	...

08011ae4 <__libc_init_array>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	4d0d      	ldr	r5, [pc, #52]	; (8011b1c <__libc_init_array+0x38>)
 8011ae8:	4c0d      	ldr	r4, [pc, #52]	; (8011b20 <__libc_init_array+0x3c>)
 8011aea:	1b64      	subs	r4, r4, r5
 8011aec:	10a4      	asrs	r4, r4, #2
 8011aee:	2600      	movs	r6, #0
 8011af0:	42a6      	cmp	r6, r4
 8011af2:	d109      	bne.n	8011b08 <__libc_init_array+0x24>
 8011af4:	4d0b      	ldr	r5, [pc, #44]	; (8011b24 <__libc_init_array+0x40>)
 8011af6:	4c0c      	ldr	r4, [pc, #48]	; (8011b28 <__libc_init_array+0x44>)
 8011af8:	f003 f8b8 	bl	8014c6c <_init>
 8011afc:	1b64      	subs	r4, r4, r5
 8011afe:	10a4      	asrs	r4, r4, #2
 8011b00:	2600      	movs	r6, #0
 8011b02:	42a6      	cmp	r6, r4
 8011b04:	d105      	bne.n	8011b12 <__libc_init_array+0x2e>
 8011b06:	bd70      	pop	{r4, r5, r6, pc}
 8011b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b0c:	4798      	blx	r3
 8011b0e:	3601      	adds	r6, #1
 8011b10:	e7ee      	b.n	8011af0 <__libc_init_array+0xc>
 8011b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b16:	4798      	blx	r3
 8011b18:	3601      	adds	r6, #1
 8011b1a:	e7f2      	b.n	8011b02 <__libc_init_array+0x1e>
 8011b1c:	08017d10 	.word	0x08017d10
 8011b20:	08017d10 	.word	0x08017d10
 8011b24:	08017d10 	.word	0x08017d10
 8011b28:	08017d1c 	.word	0x08017d1c

08011b2c <localtime>:
 8011b2c:	b538      	push	{r3, r4, r5, lr}
 8011b2e:	4b0b      	ldr	r3, [pc, #44]	; (8011b5c <localtime+0x30>)
 8011b30:	681d      	ldr	r5, [r3, #0]
 8011b32:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8011b34:	4604      	mov	r4, r0
 8011b36:	b953      	cbnz	r3, 8011b4e <localtime+0x22>
 8011b38:	2024      	movs	r0, #36	; 0x24
 8011b3a:	f000 f975 	bl	8011e28 <malloc>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	63e8      	str	r0, [r5, #60]	; 0x3c
 8011b42:	b920      	cbnz	r0, 8011b4e <localtime+0x22>
 8011b44:	4b06      	ldr	r3, [pc, #24]	; (8011b60 <localtime+0x34>)
 8011b46:	4807      	ldr	r0, [pc, #28]	; (8011b64 <localtime+0x38>)
 8011b48:	2132      	movs	r1, #50	; 0x32
 8011b4a:	f001 fd1b 	bl	8013584 <__assert_func>
 8011b4e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8011b50:	4620      	mov	r0, r4
 8011b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b56:	f000 b807 	b.w	8011b68 <localtime_r>
 8011b5a:	bf00      	nop
 8011b5c:	20000100 	.word	0x20000100
 8011b60:	0801777c 	.word	0x0801777c
 8011b64:	08017793 	.word	0x08017793

08011b68 <localtime_r>:
 8011b68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011b6c:	4607      	mov	r7, r0
 8011b6e:	9101      	str	r1, [sp, #4]
 8011b70:	f001 fde4 	bl	801373c <__gettzinfo>
 8011b74:	9901      	ldr	r1, [sp, #4]
 8011b76:	4680      	mov	r8, r0
 8011b78:	4638      	mov	r0, r7
 8011b7a:	f001 fde3 	bl	8013744 <gmtime_r>
 8011b7e:	6943      	ldr	r3, [r0, #20]
 8011b80:	079a      	lsls	r2, r3, #30
 8011b82:	4604      	mov	r4, r0
 8011b84:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8011b88:	d105      	bne.n	8011b96 <localtime_r+0x2e>
 8011b8a:	2264      	movs	r2, #100	; 0x64
 8011b8c:	fb96 f3f2 	sdiv	r3, r6, r2
 8011b90:	fb02 6313 	mls	r3, r2, r3, r6
 8011b94:	bb7b      	cbnz	r3, 8011bf6 <localtime_r+0x8e>
 8011b96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011b9a:	fb96 f5f3 	sdiv	r5, r6, r3
 8011b9e:	fb03 6515 	mls	r5, r3, r5, r6
 8011ba2:	fab5 f585 	clz	r5, r5
 8011ba6:	096d      	lsrs	r5, r5, #5
 8011ba8:	4b68      	ldr	r3, [pc, #416]	; (8011d4c <localtime_r+0x1e4>)
 8011baa:	2230      	movs	r2, #48	; 0x30
 8011bac:	fb02 3505 	mla	r5, r2, r5, r3
 8011bb0:	f001 f9e8 	bl	8012f84 <__tz_lock>
 8011bb4:	f001 f9f2 	bl	8012f9c <_tzset_unlocked>
 8011bb8:	4b65      	ldr	r3, [pc, #404]	; (8011d50 <localtime_r+0x1e8>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	b353      	cbz	r3, 8011c14 <localtime_r+0xac>
 8011bbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011bc2:	42b3      	cmp	r3, r6
 8011bc4:	d119      	bne.n	8011bfa <localtime_r+0x92>
 8011bc6:	f8d8 1000 	ldr.w	r1, [r8]
 8011bca:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011bce:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8011bd2:	b9d1      	cbnz	r1, 8011c0a <localtime_r+0xa2>
 8011bd4:	4296      	cmp	r6, r2
 8011bd6:	eb77 0303 	sbcs.w	r3, r7, r3
 8011bda:	da23      	bge.n	8011c24 <localtime_r+0xbc>
 8011bdc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8011be0:	4296      	cmp	r6, r2
 8011be2:	eb77 0303 	sbcs.w	r3, r7, r3
 8011be6:	bfb4      	ite	lt
 8011be8:	2301      	movlt	r3, #1
 8011bea:	2300      	movge	r3, #0
 8011bec:	6223      	str	r3, [r4, #32]
 8011bee:	db1b      	blt.n	8011c28 <localtime_r+0xc0>
 8011bf0:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8011bf4:	e01a      	b.n	8011c2c <localtime_r+0xc4>
 8011bf6:	2501      	movs	r5, #1
 8011bf8:	e7d6      	b.n	8011ba8 <localtime_r+0x40>
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f001 f91a 	bl	8012e34 <__tzcalc_limits>
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d1e0      	bne.n	8011bc6 <localtime_r+0x5e>
 8011c04:	f04f 33ff 	mov.w	r3, #4294967295
 8011c08:	e004      	b.n	8011c14 <localtime_r+0xac>
 8011c0a:	4296      	cmp	r6, r2
 8011c0c:	eb77 0303 	sbcs.w	r3, r7, r3
 8011c10:	da02      	bge.n	8011c18 <localtime_r+0xb0>
 8011c12:	2300      	movs	r3, #0
 8011c14:	6223      	str	r3, [r4, #32]
 8011c16:	e7eb      	b.n	8011bf0 <localtime_r+0x88>
 8011c18:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8011c1c:	4296      	cmp	r6, r2
 8011c1e:	eb77 0303 	sbcs.w	r3, r7, r3
 8011c22:	daf6      	bge.n	8011c12 <localtime_r+0xaa>
 8011c24:	2301      	movs	r3, #1
 8011c26:	6223      	str	r3, [r4, #32]
 8011c28:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8011c2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8011c30:	203c      	movs	r0, #60	; 0x3c
 8011c32:	fb91 f6f3 	sdiv	r6, r1, r3
 8011c36:	fb03 1316 	mls	r3, r3, r6, r1
 8011c3a:	6861      	ldr	r1, [r4, #4]
 8011c3c:	fb93 f2f0 	sdiv	r2, r3, r0
 8011c40:	fb00 3012 	mls	r0, r0, r2, r3
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	1a89      	subs	r1, r1, r2
 8011c48:	68a2      	ldr	r2, [r4, #8]
 8011c4a:	6061      	str	r1, [r4, #4]
 8011c4c:	1a1b      	subs	r3, r3, r0
 8011c4e:	1b92      	subs	r2, r2, r6
 8011c50:	2b3b      	cmp	r3, #59	; 0x3b
 8011c52:	6023      	str	r3, [r4, #0]
 8011c54:	60a2      	str	r2, [r4, #8]
 8011c56:	dd35      	ble.n	8011cc4 <localtime_r+0x15c>
 8011c58:	3101      	adds	r1, #1
 8011c5a:	6061      	str	r1, [r4, #4]
 8011c5c:	3b3c      	subs	r3, #60	; 0x3c
 8011c5e:	6023      	str	r3, [r4, #0]
 8011c60:	6863      	ldr	r3, [r4, #4]
 8011c62:	2b3b      	cmp	r3, #59	; 0x3b
 8011c64:	dd34      	ble.n	8011cd0 <localtime_r+0x168>
 8011c66:	3201      	adds	r2, #1
 8011c68:	60a2      	str	r2, [r4, #8]
 8011c6a:	3b3c      	subs	r3, #60	; 0x3c
 8011c6c:	6063      	str	r3, [r4, #4]
 8011c6e:	68a3      	ldr	r3, [r4, #8]
 8011c70:	2b17      	cmp	r3, #23
 8011c72:	dd33      	ble.n	8011cdc <localtime_r+0x174>
 8011c74:	69e2      	ldr	r2, [r4, #28]
 8011c76:	3201      	adds	r2, #1
 8011c78:	61e2      	str	r2, [r4, #28]
 8011c7a:	69a2      	ldr	r2, [r4, #24]
 8011c7c:	3201      	adds	r2, #1
 8011c7e:	2a06      	cmp	r2, #6
 8011c80:	bfc8      	it	gt
 8011c82:	2200      	movgt	r2, #0
 8011c84:	61a2      	str	r2, [r4, #24]
 8011c86:	68e2      	ldr	r2, [r4, #12]
 8011c88:	3b18      	subs	r3, #24
 8011c8a:	3201      	adds	r2, #1
 8011c8c:	60a3      	str	r3, [r4, #8]
 8011c8e:	6923      	ldr	r3, [r4, #16]
 8011c90:	60e2      	str	r2, [r4, #12]
 8011c92:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8011c96:	428a      	cmp	r2, r1
 8011c98:	dd0e      	ble.n	8011cb8 <localtime_r+0x150>
 8011c9a:	2b0b      	cmp	r3, #11
 8011c9c:	eba2 0201 	sub.w	r2, r2, r1
 8011ca0:	60e2      	str	r2, [r4, #12]
 8011ca2:	f103 0201 	add.w	r2, r3, #1
 8011ca6:	bf09      	itett	eq
 8011ca8:	6963      	ldreq	r3, [r4, #20]
 8011caa:	6122      	strne	r2, [r4, #16]
 8011cac:	2200      	moveq	r2, #0
 8011cae:	3301      	addeq	r3, #1
 8011cb0:	bf02      	ittt	eq
 8011cb2:	6122      	streq	r2, [r4, #16]
 8011cb4:	6163      	streq	r3, [r4, #20]
 8011cb6:	61e2      	streq	r2, [r4, #28]
 8011cb8:	f001 f96a 	bl	8012f90 <__tz_unlock>
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	b002      	add	sp, #8
 8011cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	dacb      	bge.n	8011c60 <localtime_r+0xf8>
 8011cc8:	3901      	subs	r1, #1
 8011cca:	6061      	str	r1, [r4, #4]
 8011ccc:	333c      	adds	r3, #60	; 0x3c
 8011cce:	e7c6      	b.n	8011c5e <localtime_r+0xf6>
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	dacc      	bge.n	8011c6e <localtime_r+0x106>
 8011cd4:	3a01      	subs	r2, #1
 8011cd6:	60a2      	str	r2, [r4, #8]
 8011cd8:	333c      	adds	r3, #60	; 0x3c
 8011cda:	e7c7      	b.n	8011c6c <localtime_r+0x104>
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	daeb      	bge.n	8011cb8 <localtime_r+0x150>
 8011ce0:	69e2      	ldr	r2, [r4, #28]
 8011ce2:	3a01      	subs	r2, #1
 8011ce4:	61e2      	str	r2, [r4, #28]
 8011ce6:	69a2      	ldr	r2, [r4, #24]
 8011ce8:	3a01      	subs	r2, #1
 8011cea:	bf48      	it	mi
 8011cec:	2206      	movmi	r2, #6
 8011cee:	61a2      	str	r2, [r4, #24]
 8011cf0:	68e2      	ldr	r2, [r4, #12]
 8011cf2:	3318      	adds	r3, #24
 8011cf4:	3a01      	subs	r2, #1
 8011cf6:	60e2      	str	r2, [r4, #12]
 8011cf8:	60a3      	str	r3, [r4, #8]
 8011cfa:	2a00      	cmp	r2, #0
 8011cfc:	d1dc      	bne.n	8011cb8 <localtime_r+0x150>
 8011cfe:	6923      	ldr	r3, [r4, #16]
 8011d00:	3b01      	subs	r3, #1
 8011d02:	d405      	bmi.n	8011d10 <localtime_r+0x1a8>
 8011d04:	6123      	str	r3, [r4, #16]
 8011d06:	6923      	ldr	r3, [r4, #16]
 8011d08:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8011d0c:	60e3      	str	r3, [r4, #12]
 8011d0e:	e7d3      	b.n	8011cb8 <localtime_r+0x150>
 8011d10:	230b      	movs	r3, #11
 8011d12:	6123      	str	r3, [r4, #16]
 8011d14:	6963      	ldr	r3, [r4, #20]
 8011d16:	1e5a      	subs	r2, r3, #1
 8011d18:	6162      	str	r2, [r4, #20]
 8011d1a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8011d1e:	0793      	lsls	r3, r2, #30
 8011d20:	d105      	bne.n	8011d2e <localtime_r+0x1c6>
 8011d22:	2164      	movs	r1, #100	; 0x64
 8011d24:	fb92 f3f1 	sdiv	r3, r2, r1
 8011d28:	fb01 2313 	mls	r3, r1, r3, r2
 8011d2c:	b963      	cbnz	r3, 8011d48 <localtime_r+0x1e0>
 8011d2e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011d32:	fb92 f3f1 	sdiv	r3, r2, r1
 8011d36:	fb01 2313 	mls	r3, r1, r3, r2
 8011d3a:	fab3 f383 	clz	r3, r3
 8011d3e:	095b      	lsrs	r3, r3, #5
 8011d40:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8011d44:	61e3      	str	r3, [r4, #28]
 8011d46:	e7de      	b.n	8011d06 <localtime_r+0x19e>
 8011d48:	2301      	movs	r3, #1
 8011d4a:	e7f9      	b.n	8011d40 <localtime_r+0x1d8>
 8011d4c:	080177f4 	.word	0x080177f4
 8011d50:	20000afc 	.word	0x20000afc

08011d54 <__retarget_lock_init_recursive>:
 8011d54:	4770      	bx	lr

08011d56 <__retarget_lock_close_recursive>:
 8011d56:	4770      	bx	lr

08011d58 <__retarget_lock_acquire>:
 8011d58:	4770      	bx	lr

08011d5a <__retarget_lock_acquire_recursive>:
 8011d5a:	4770      	bx	lr

08011d5c <__retarget_lock_release>:
 8011d5c:	4770      	bx	lr

08011d5e <__retarget_lock_release_recursive>:
 8011d5e:	4770      	bx	lr

08011d60 <__swhatbuf_r>:
 8011d60:	b570      	push	{r4, r5, r6, lr}
 8011d62:	460e      	mov	r6, r1
 8011d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d68:	2900      	cmp	r1, #0
 8011d6a:	b096      	sub	sp, #88	; 0x58
 8011d6c:	4614      	mov	r4, r2
 8011d6e:	461d      	mov	r5, r3
 8011d70:	da07      	bge.n	8011d82 <__swhatbuf_r+0x22>
 8011d72:	2300      	movs	r3, #0
 8011d74:	602b      	str	r3, [r5, #0]
 8011d76:	89b3      	ldrh	r3, [r6, #12]
 8011d78:	061a      	lsls	r2, r3, #24
 8011d7a:	d410      	bmi.n	8011d9e <__swhatbuf_r+0x3e>
 8011d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d80:	e00e      	b.n	8011da0 <__swhatbuf_r+0x40>
 8011d82:	466a      	mov	r2, sp
 8011d84:	f001 fc74 	bl	8013670 <_fstat_r>
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	dbf2      	blt.n	8011d72 <__swhatbuf_r+0x12>
 8011d8c:	9a01      	ldr	r2, [sp, #4]
 8011d8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d96:	425a      	negs	r2, r3
 8011d98:	415a      	adcs	r2, r3
 8011d9a:	602a      	str	r2, [r5, #0]
 8011d9c:	e7ee      	b.n	8011d7c <__swhatbuf_r+0x1c>
 8011d9e:	2340      	movs	r3, #64	; 0x40
 8011da0:	2000      	movs	r0, #0
 8011da2:	6023      	str	r3, [r4, #0]
 8011da4:	b016      	add	sp, #88	; 0x58
 8011da6:	bd70      	pop	{r4, r5, r6, pc}

08011da8 <__smakebuf_r>:
 8011da8:	898b      	ldrh	r3, [r1, #12]
 8011daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dac:	079d      	lsls	r5, r3, #30
 8011dae:	4606      	mov	r6, r0
 8011db0:	460c      	mov	r4, r1
 8011db2:	d507      	bpl.n	8011dc4 <__smakebuf_r+0x1c>
 8011db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011db8:	6023      	str	r3, [r4, #0]
 8011dba:	6123      	str	r3, [r4, #16]
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	6163      	str	r3, [r4, #20]
 8011dc0:	b002      	add	sp, #8
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}
 8011dc4:	ab01      	add	r3, sp, #4
 8011dc6:	466a      	mov	r2, sp
 8011dc8:	f7ff ffca 	bl	8011d60 <__swhatbuf_r>
 8011dcc:	9900      	ldr	r1, [sp, #0]
 8011dce:	4605      	mov	r5, r0
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	f000 f89f 	bl	8011f14 <_malloc_r>
 8011dd6:	b948      	cbnz	r0, 8011dec <__smakebuf_r+0x44>
 8011dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ddc:	059a      	lsls	r2, r3, #22
 8011dde:	d4ef      	bmi.n	8011dc0 <__smakebuf_r+0x18>
 8011de0:	f023 0303 	bic.w	r3, r3, #3
 8011de4:	f043 0302 	orr.w	r3, r3, #2
 8011de8:	81a3      	strh	r3, [r4, #12]
 8011dea:	e7e3      	b.n	8011db4 <__smakebuf_r+0xc>
 8011dec:	4b0d      	ldr	r3, [pc, #52]	; (8011e24 <__smakebuf_r+0x7c>)
 8011dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8011df0:	89a3      	ldrh	r3, [r4, #12]
 8011df2:	6020      	str	r0, [r4, #0]
 8011df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011df8:	81a3      	strh	r3, [r4, #12]
 8011dfa:	9b00      	ldr	r3, [sp, #0]
 8011dfc:	6163      	str	r3, [r4, #20]
 8011dfe:	9b01      	ldr	r3, [sp, #4]
 8011e00:	6120      	str	r0, [r4, #16]
 8011e02:	b15b      	cbz	r3, 8011e1c <__smakebuf_r+0x74>
 8011e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e08:	4630      	mov	r0, r6
 8011e0a:	f001 fd4b 	bl	80138a4 <_isatty_r>
 8011e0e:	b128      	cbz	r0, 8011e1c <__smakebuf_r+0x74>
 8011e10:	89a3      	ldrh	r3, [r4, #12]
 8011e12:	f023 0303 	bic.w	r3, r3, #3
 8011e16:	f043 0301 	orr.w	r3, r3, #1
 8011e1a:	81a3      	strh	r3, [r4, #12]
 8011e1c:	89a0      	ldrh	r0, [r4, #12]
 8011e1e:	4305      	orrs	r5, r0
 8011e20:	81a5      	strh	r5, [r4, #12]
 8011e22:	e7cd      	b.n	8011dc0 <__smakebuf_r+0x18>
 8011e24:	0801158d 	.word	0x0801158d

08011e28 <malloc>:
 8011e28:	4b02      	ldr	r3, [pc, #8]	; (8011e34 <malloc+0xc>)
 8011e2a:	4601      	mov	r1, r0
 8011e2c:	6818      	ldr	r0, [r3, #0]
 8011e2e:	f000 b871 	b.w	8011f14 <_malloc_r>
 8011e32:	bf00      	nop
 8011e34:	20000100 	.word	0x20000100

08011e38 <free>:
 8011e38:	4b02      	ldr	r3, [pc, #8]	; (8011e44 <free+0xc>)
 8011e3a:	4601      	mov	r1, r0
 8011e3c:	6818      	ldr	r0, [r3, #0]
 8011e3e:	f000 b819 	b.w	8011e74 <_free_r>
 8011e42:	bf00      	nop
 8011e44:	20000100 	.word	0x20000100

08011e48 <memcpy>:
 8011e48:	440a      	add	r2, r1
 8011e4a:	4291      	cmp	r1, r2
 8011e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e50:	d100      	bne.n	8011e54 <memcpy+0xc>
 8011e52:	4770      	bx	lr
 8011e54:	b510      	push	{r4, lr}
 8011e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e5e:	4291      	cmp	r1, r2
 8011e60:	d1f9      	bne.n	8011e56 <memcpy+0xe>
 8011e62:	bd10      	pop	{r4, pc}

08011e64 <memset>:
 8011e64:	4402      	add	r2, r0
 8011e66:	4603      	mov	r3, r0
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	d100      	bne.n	8011e6e <memset+0xa>
 8011e6c:	4770      	bx	lr
 8011e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8011e72:	e7f9      	b.n	8011e68 <memset+0x4>

08011e74 <_free_r>:
 8011e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e76:	2900      	cmp	r1, #0
 8011e78:	d048      	beq.n	8011f0c <_free_r+0x98>
 8011e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e7e:	9001      	str	r0, [sp, #4]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	f1a1 0404 	sub.w	r4, r1, #4
 8011e86:	bfb8      	it	lt
 8011e88:	18e4      	addlt	r4, r4, r3
 8011e8a:	f001 fd43 	bl	8013914 <__malloc_lock>
 8011e8e:	4a20      	ldr	r2, [pc, #128]	; (8011f10 <_free_r+0x9c>)
 8011e90:	9801      	ldr	r0, [sp, #4]
 8011e92:	6813      	ldr	r3, [r2, #0]
 8011e94:	4615      	mov	r5, r2
 8011e96:	b933      	cbnz	r3, 8011ea6 <_free_r+0x32>
 8011e98:	6063      	str	r3, [r4, #4]
 8011e9a:	6014      	str	r4, [r2, #0]
 8011e9c:	b003      	add	sp, #12
 8011e9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ea2:	f001 bd3d 	b.w	8013920 <__malloc_unlock>
 8011ea6:	42a3      	cmp	r3, r4
 8011ea8:	d90b      	bls.n	8011ec2 <_free_r+0x4e>
 8011eaa:	6821      	ldr	r1, [r4, #0]
 8011eac:	1862      	adds	r2, r4, r1
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	bf04      	itt	eq
 8011eb2:	681a      	ldreq	r2, [r3, #0]
 8011eb4:	685b      	ldreq	r3, [r3, #4]
 8011eb6:	6063      	str	r3, [r4, #4]
 8011eb8:	bf04      	itt	eq
 8011eba:	1852      	addeq	r2, r2, r1
 8011ebc:	6022      	streq	r2, [r4, #0]
 8011ebe:	602c      	str	r4, [r5, #0]
 8011ec0:	e7ec      	b.n	8011e9c <_free_r+0x28>
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	b10b      	cbz	r3, 8011ecc <_free_r+0x58>
 8011ec8:	42a3      	cmp	r3, r4
 8011eca:	d9fa      	bls.n	8011ec2 <_free_r+0x4e>
 8011ecc:	6811      	ldr	r1, [r2, #0]
 8011ece:	1855      	adds	r5, r2, r1
 8011ed0:	42a5      	cmp	r5, r4
 8011ed2:	d10b      	bne.n	8011eec <_free_r+0x78>
 8011ed4:	6824      	ldr	r4, [r4, #0]
 8011ed6:	4421      	add	r1, r4
 8011ed8:	1854      	adds	r4, r2, r1
 8011eda:	42a3      	cmp	r3, r4
 8011edc:	6011      	str	r1, [r2, #0]
 8011ede:	d1dd      	bne.n	8011e9c <_free_r+0x28>
 8011ee0:	681c      	ldr	r4, [r3, #0]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	6053      	str	r3, [r2, #4]
 8011ee6:	4421      	add	r1, r4
 8011ee8:	6011      	str	r1, [r2, #0]
 8011eea:	e7d7      	b.n	8011e9c <_free_r+0x28>
 8011eec:	d902      	bls.n	8011ef4 <_free_r+0x80>
 8011eee:	230c      	movs	r3, #12
 8011ef0:	6003      	str	r3, [r0, #0]
 8011ef2:	e7d3      	b.n	8011e9c <_free_r+0x28>
 8011ef4:	6825      	ldr	r5, [r4, #0]
 8011ef6:	1961      	adds	r1, r4, r5
 8011ef8:	428b      	cmp	r3, r1
 8011efa:	bf04      	itt	eq
 8011efc:	6819      	ldreq	r1, [r3, #0]
 8011efe:	685b      	ldreq	r3, [r3, #4]
 8011f00:	6063      	str	r3, [r4, #4]
 8011f02:	bf04      	itt	eq
 8011f04:	1949      	addeq	r1, r1, r5
 8011f06:	6021      	streq	r1, [r4, #0]
 8011f08:	6054      	str	r4, [r2, #4]
 8011f0a:	e7c7      	b.n	8011e9c <_free_r+0x28>
 8011f0c:	b003      	add	sp, #12
 8011f0e:	bd30      	pop	{r4, r5, pc}
 8011f10:	20000ad8 	.word	0x20000ad8

08011f14 <_malloc_r>:
 8011f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f16:	1ccd      	adds	r5, r1, #3
 8011f18:	f025 0503 	bic.w	r5, r5, #3
 8011f1c:	3508      	adds	r5, #8
 8011f1e:	2d0c      	cmp	r5, #12
 8011f20:	bf38      	it	cc
 8011f22:	250c      	movcc	r5, #12
 8011f24:	2d00      	cmp	r5, #0
 8011f26:	4606      	mov	r6, r0
 8011f28:	db01      	blt.n	8011f2e <_malloc_r+0x1a>
 8011f2a:	42a9      	cmp	r1, r5
 8011f2c:	d903      	bls.n	8011f36 <_malloc_r+0x22>
 8011f2e:	230c      	movs	r3, #12
 8011f30:	6033      	str	r3, [r6, #0]
 8011f32:	2000      	movs	r0, #0
 8011f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f36:	f001 fced 	bl	8013914 <__malloc_lock>
 8011f3a:	4921      	ldr	r1, [pc, #132]	; (8011fc0 <_malloc_r+0xac>)
 8011f3c:	680a      	ldr	r2, [r1, #0]
 8011f3e:	4614      	mov	r4, r2
 8011f40:	b99c      	cbnz	r4, 8011f6a <_malloc_r+0x56>
 8011f42:	4f20      	ldr	r7, [pc, #128]	; (8011fc4 <_malloc_r+0xb0>)
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	b923      	cbnz	r3, 8011f52 <_malloc_r+0x3e>
 8011f48:	4621      	mov	r1, r4
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f000 f8da 	bl	8012104 <_sbrk_r>
 8011f50:	6038      	str	r0, [r7, #0]
 8011f52:	4629      	mov	r1, r5
 8011f54:	4630      	mov	r0, r6
 8011f56:	f000 f8d5 	bl	8012104 <_sbrk_r>
 8011f5a:	1c43      	adds	r3, r0, #1
 8011f5c:	d123      	bne.n	8011fa6 <_malloc_r+0x92>
 8011f5e:	230c      	movs	r3, #12
 8011f60:	6033      	str	r3, [r6, #0]
 8011f62:	4630      	mov	r0, r6
 8011f64:	f001 fcdc 	bl	8013920 <__malloc_unlock>
 8011f68:	e7e3      	b.n	8011f32 <_malloc_r+0x1e>
 8011f6a:	6823      	ldr	r3, [r4, #0]
 8011f6c:	1b5b      	subs	r3, r3, r5
 8011f6e:	d417      	bmi.n	8011fa0 <_malloc_r+0x8c>
 8011f70:	2b0b      	cmp	r3, #11
 8011f72:	d903      	bls.n	8011f7c <_malloc_r+0x68>
 8011f74:	6023      	str	r3, [r4, #0]
 8011f76:	441c      	add	r4, r3
 8011f78:	6025      	str	r5, [r4, #0]
 8011f7a:	e004      	b.n	8011f86 <_malloc_r+0x72>
 8011f7c:	6863      	ldr	r3, [r4, #4]
 8011f7e:	42a2      	cmp	r2, r4
 8011f80:	bf0c      	ite	eq
 8011f82:	600b      	streq	r3, [r1, #0]
 8011f84:	6053      	strne	r3, [r2, #4]
 8011f86:	4630      	mov	r0, r6
 8011f88:	f001 fcca 	bl	8013920 <__malloc_unlock>
 8011f8c:	f104 000b 	add.w	r0, r4, #11
 8011f90:	1d23      	adds	r3, r4, #4
 8011f92:	f020 0007 	bic.w	r0, r0, #7
 8011f96:	1ac2      	subs	r2, r0, r3
 8011f98:	d0cc      	beq.n	8011f34 <_malloc_r+0x20>
 8011f9a:	1a1b      	subs	r3, r3, r0
 8011f9c:	50a3      	str	r3, [r4, r2]
 8011f9e:	e7c9      	b.n	8011f34 <_malloc_r+0x20>
 8011fa0:	4622      	mov	r2, r4
 8011fa2:	6864      	ldr	r4, [r4, #4]
 8011fa4:	e7cc      	b.n	8011f40 <_malloc_r+0x2c>
 8011fa6:	1cc4      	adds	r4, r0, #3
 8011fa8:	f024 0403 	bic.w	r4, r4, #3
 8011fac:	42a0      	cmp	r0, r4
 8011fae:	d0e3      	beq.n	8011f78 <_malloc_r+0x64>
 8011fb0:	1a21      	subs	r1, r4, r0
 8011fb2:	4630      	mov	r0, r6
 8011fb4:	f000 f8a6 	bl	8012104 <_sbrk_r>
 8011fb8:	3001      	adds	r0, #1
 8011fba:	d1dd      	bne.n	8011f78 <_malloc_r+0x64>
 8011fbc:	e7cf      	b.n	8011f5e <_malloc_r+0x4a>
 8011fbe:	bf00      	nop
 8011fc0:	20000ad8 	.word	0x20000ad8
 8011fc4:	20000adc 	.word	0x20000adc

08011fc8 <_open_r>:
 8011fc8:	b538      	push	{r3, r4, r5, lr}
 8011fca:	4d07      	ldr	r5, [pc, #28]	; (8011fe8 <_open_r+0x20>)
 8011fcc:	4604      	mov	r4, r0
 8011fce:	4608      	mov	r0, r1
 8011fd0:	4611      	mov	r1, r2
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	602a      	str	r2, [r5, #0]
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	f7ee ff28 	bl	8000e2c <_open>
 8011fdc:	1c43      	adds	r3, r0, #1
 8011fde:	d102      	bne.n	8011fe6 <_open_r+0x1e>
 8011fe0:	682b      	ldr	r3, [r5, #0]
 8011fe2:	b103      	cbz	r3, 8011fe6 <_open_r+0x1e>
 8011fe4:	6023      	str	r3, [r4, #0]
 8011fe6:	bd38      	pop	{r3, r4, r5, pc}
 8011fe8:	20000ba4 	.word	0x20000ba4

08011fec <putchar>:
 8011fec:	4b09      	ldr	r3, [pc, #36]	; (8012014 <putchar+0x28>)
 8011fee:	b513      	push	{r0, r1, r4, lr}
 8011ff0:	681c      	ldr	r4, [r3, #0]
 8011ff2:	4601      	mov	r1, r0
 8011ff4:	b134      	cbz	r4, 8012004 <putchar+0x18>
 8011ff6:	69a3      	ldr	r3, [r4, #24]
 8011ff8:	b923      	cbnz	r3, 8012004 <putchar+0x18>
 8011ffa:	9001      	str	r0, [sp, #4]
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	f7ff faf9 	bl	80115f4 <__sinit>
 8012002:	9901      	ldr	r1, [sp, #4]
 8012004:	68a2      	ldr	r2, [r4, #8]
 8012006:	4620      	mov	r0, r4
 8012008:	b002      	add	sp, #8
 801200a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801200e:	f002 b8fd 	b.w	801420c <_putc_r>
 8012012:	bf00      	nop
 8012014:	20000100 	.word	0x20000100

08012018 <srand>:
 8012018:	b538      	push	{r3, r4, r5, lr}
 801201a:	4b10      	ldr	r3, [pc, #64]	; (801205c <srand+0x44>)
 801201c:	681d      	ldr	r5, [r3, #0]
 801201e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012020:	4604      	mov	r4, r0
 8012022:	b9b3      	cbnz	r3, 8012052 <srand+0x3a>
 8012024:	2018      	movs	r0, #24
 8012026:	f7ff feff 	bl	8011e28 <malloc>
 801202a:	4602      	mov	r2, r0
 801202c:	63a8      	str	r0, [r5, #56]	; 0x38
 801202e:	b920      	cbnz	r0, 801203a <srand+0x22>
 8012030:	4b0b      	ldr	r3, [pc, #44]	; (8012060 <srand+0x48>)
 8012032:	480c      	ldr	r0, [pc, #48]	; (8012064 <srand+0x4c>)
 8012034:	2142      	movs	r1, #66	; 0x42
 8012036:	f001 faa5 	bl	8013584 <__assert_func>
 801203a:	490b      	ldr	r1, [pc, #44]	; (8012068 <srand+0x50>)
 801203c:	4b0b      	ldr	r3, [pc, #44]	; (801206c <srand+0x54>)
 801203e:	e9c0 1300 	strd	r1, r3, [r0]
 8012042:	4b0b      	ldr	r3, [pc, #44]	; (8012070 <srand+0x58>)
 8012044:	6083      	str	r3, [r0, #8]
 8012046:	230b      	movs	r3, #11
 8012048:	8183      	strh	r3, [r0, #12]
 801204a:	2100      	movs	r1, #0
 801204c:	2001      	movs	r0, #1
 801204e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012052:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012054:	2200      	movs	r2, #0
 8012056:	611c      	str	r4, [r3, #16]
 8012058:	615a      	str	r2, [r3, #20]
 801205a:	bd38      	pop	{r3, r4, r5, pc}
 801205c:	20000100 	.word	0x20000100
 8012060:	0801777c 	.word	0x0801777c
 8012064:	08017854 	.word	0x08017854
 8012068:	abcd330e 	.word	0xabcd330e
 801206c:	e66d1234 	.word	0xe66d1234
 8012070:	0005deec 	.word	0x0005deec

08012074 <rand>:
 8012074:	4b17      	ldr	r3, [pc, #92]	; (80120d4 <rand+0x60>)
 8012076:	b510      	push	{r4, lr}
 8012078:	681c      	ldr	r4, [r3, #0]
 801207a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801207c:	b9b3      	cbnz	r3, 80120ac <rand+0x38>
 801207e:	2018      	movs	r0, #24
 8012080:	f7ff fed2 	bl	8011e28 <malloc>
 8012084:	63a0      	str	r0, [r4, #56]	; 0x38
 8012086:	b928      	cbnz	r0, 8012094 <rand+0x20>
 8012088:	4602      	mov	r2, r0
 801208a:	4b13      	ldr	r3, [pc, #76]	; (80120d8 <rand+0x64>)
 801208c:	4813      	ldr	r0, [pc, #76]	; (80120dc <rand+0x68>)
 801208e:	214e      	movs	r1, #78	; 0x4e
 8012090:	f001 fa78 	bl	8013584 <__assert_func>
 8012094:	4a12      	ldr	r2, [pc, #72]	; (80120e0 <rand+0x6c>)
 8012096:	4b13      	ldr	r3, [pc, #76]	; (80120e4 <rand+0x70>)
 8012098:	e9c0 2300 	strd	r2, r3, [r0]
 801209c:	4b12      	ldr	r3, [pc, #72]	; (80120e8 <rand+0x74>)
 801209e:	6083      	str	r3, [r0, #8]
 80120a0:	230b      	movs	r3, #11
 80120a2:	8183      	strh	r3, [r0, #12]
 80120a4:	2201      	movs	r2, #1
 80120a6:	2300      	movs	r3, #0
 80120a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80120ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80120ae:	480f      	ldr	r0, [pc, #60]	; (80120ec <rand+0x78>)
 80120b0:	690a      	ldr	r2, [r1, #16]
 80120b2:	694b      	ldr	r3, [r1, #20]
 80120b4:	4c0e      	ldr	r4, [pc, #56]	; (80120f0 <rand+0x7c>)
 80120b6:	4350      	muls	r0, r2
 80120b8:	fb04 0003 	mla	r0, r4, r3, r0
 80120bc:	fba2 3404 	umull	r3, r4, r2, r4
 80120c0:	1c5a      	adds	r2, r3, #1
 80120c2:	4404      	add	r4, r0
 80120c4:	f144 0000 	adc.w	r0, r4, #0
 80120c8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80120cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80120d0:	bd10      	pop	{r4, pc}
 80120d2:	bf00      	nop
 80120d4:	20000100 	.word	0x20000100
 80120d8:	0801777c 	.word	0x0801777c
 80120dc:	08017854 	.word	0x08017854
 80120e0:	abcd330e 	.word	0xabcd330e
 80120e4:	e66d1234 	.word	0xe66d1234
 80120e8:	0005deec 	.word	0x0005deec
 80120ec:	5851f42d 	.word	0x5851f42d
 80120f0:	4c957f2d 	.word	0x4c957f2d

080120f4 <realloc>:
 80120f4:	4b02      	ldr	r3, [pc, #8]	; (8012100 <realloc+0xc>)
 80120f6:	460a      	mov	r2, r1
 80120f8:	4601      	mov	r1, r0
 80120fa:	6818      	ldr	r0, [r3, #0]
 80120fc:	f001 bc16 	b.w	801392c <_realloc_r>
 8012100:	20000100 	.word	0x20000100

08012104 <_sbrk_r>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	4d06      	ldr	r5, [pc, #24]	; (8012120 <_sbrk_r+0x1c>)
 8012108:	2300      	movs	r3, #0
 801210a:	4604      	mov	r4, r0
 801210c:	4608      	mov	r0, r1
 801210e:	602b      	str	r3, [r5, #0]
 8012110:	f7ee fe9a 	bl	8000e48 <_sbrk>
 8012114:	1c43      	adds	r3, r0, #1
 8012116:	d102      	bne.n	801211e <_sbrk_r+0x1a>
 8012118:	682b      	ldr	r3, [r5, #0]
 801211a:	b103      	cbz	r3, 801211e <_sbrk_r+0x1a>
 801211c:	6023      	str	r3, [r4, #0]
 801211e:	bd38      	pop	{r3, r4, r5, pc}
 8012120:	20000ba4 	.word	0x20000ba4

08012124 <_raise_r>:
 8012124:	291f      	cmp	r1, #31
 8012126:	b538      	push	{r3, r4, r5, lr}
 8012128:	4604      	mov	r4, r0
 801212a:	460d      	mov	r5, r1
 801212c:	d904      	bls.n	8012138 <_raise_r+0x14>
 801212e:	2316      	movs	r3, #22
 8012130:	6003      	str	r3, [r0, #0]
 8012132:	f04f 30ff 	mov.w	r0, #4294967295
 8012136:	bd38      	pop	{r3, r4, r5, pc}
 8012138:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801213a:	b112      	cbz	r2, 8012142 <_raise_r+0x1e>
 801213c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012140:	b94b      	cbnz	r3, 8012156 <_raise_r+0x32>
 8012142:	4620      	mov	r0, r4
 8012144:	f000 f830 	bl	80121a8 <_getpid_r>
 8012148:	462a      	mov	r2, r5
 801214a:	4601      	mov	r1, r0
 801214c:	4620      	mov	r0, r4
 801214e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012152:	f000 b817 	b.w	8012184 <_kill_r>
 8012156:	2b01      	cmp	r3, #1
 8012158:	d00a      	beq.n	8012170 <_raise_r+0x4c>
 801215a:	1c59      	adds	r1, r3, #1
 801215c:	d103      	bne.n	8012166 <_raise_r+0x42>
 801215e:	2316      	movs	r3, #22
 8012160:	6003      	str	r3, [r0, #0]
 8012162:	2001      	movs	r0, #1
 8012164:	e7e7      	b.n	8012136 <_raise_r+0x12>
 8012166:	2400      	movs	r4, #0
 8012168:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801216c:	4628      	mov	r0, r5
 801216e:	4798      	blx	r3
 8012170:	2000      	movs	r0, #0
 8012172:	e7e0      	b.n	8012136 <_raise_r+0x12>

08012174 <raise>:
 8012174:	4b02      	ldr	r3, [pc, #8]	; (8012180 <raise+0xc>)
 8012176:	4601      	mov	r1, r0
 8012178:	6818      	ldr	r0, [r3, #0]
 801217a:	f7ff bfd3 	b.w	8012124 <_raise_r>
 801217e:	bf00      	nop
 8012180:	20000100 	.word	0x20000100

08012184 <_kill_r>:
 8012184:	b538      	push	{r3, r4, r5, lr}
 8012186:	4d07      	ldr	r5, [pc, #28]	; (80121a4 <_kill_r+0x20>)
 8012188:	2300      	movs	r3, #0
 801218a:	4604      	mov	r4, r0
 801218c:	4608      	mov	r0, r1
 801218e:	4611      	mov	r1, r2
 8012190:	602b      	str	r3, [r5, #0]
 8012192:	f7ee fdbf 	bl	8000d14 <_kill>
 8012196:	1c43      	adds	r3, r0, #1
 8012198:	d102      	bne.n	80121a0 <_kill_r+0x1c>
 801219a:	682b      	ldr	r3, [r5, #0]
 801219c:	b103      	cbz	r3, 80121a0 <_kill_r+0x1c>
 801219e:	6023      	str	r3, [r4, #0]
 80121a0:	bd38      	pop	{r3, r4, r5, pc}
 80121a2:	bf00      	nop
 80121a4:	20000ba4 	.word	0x20000ba4

080121a8 <_getpid_r>:
 80121a8:	f7ee bdac 	b.w	8000d04 <_getpid>

080121ac <__sread>:
 80121ac:	b510      	push	{r4, lr}
 80121ae:	460c      	mov	r4, r1
 80121b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121b4:	f002 f872 	bl	801429c <_read_r>
 80121b8:	2800      	cmp	r0, #0
 80121ba:	bfab      	itete	ge
 80121bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80121be:	89a3      	ldrhlt	r3, [r4, #12]
 80121c0:	181b      	addge	r3, r3, r0
 80121c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80121c6:	bfac      	ite	ge
 80121c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80121ca:	81a3      	strhlt	r3, [r4, #12]
 80121cc:	bd10      	pop	{r4, pc}

080121ce <__seofread>:
 80121ce:	2000      	movs	r0, #0
 80121d0:	4770      	bx	lr

080121d2 <__swrite>:
 80121d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121d6:	461f      	mov	r7, r3
 80121d8:	898b      	ldrh	r3, [r1, #12]
 80121da:	05db      	lsls	r3, r3, #23
 80121dc:	4605      	mov	r5, r0
 80121de:	460c      	mov	r4, r1
 80121e0:	4616      	mov	r6, r2
 80121e2:	d505      	bpl.n	80121f0 <__swrite+0x1e>
 80121e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121e8:	2302      	movs	r3, #2
 80121ea:	2200      	movs	r2, #0
 80121ec:	f001 fb6e 	bl	80138cc <_lseek_r>
 80121f0:	89a3      	ldrh	r3, [r4, #12]
 80121f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80121fa:	81a3      	strh	r3, [r4, #12]
 80121fc:	4632      	mov	r2, r6
 80121fe:	463b      	mov	r3, r7
 8012200:	4628      	mov	r0, r5
 8012202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012206:	f001 b8d7 	b.w	80133b8 <_write_r>

0801220a <__sseek>:
 801220a:	b510      	push	{r4, lr}
 801220c:	460c      	mov	r4, r1
 801220e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012212:	f001 fb5b 	bl	80138cc <_lseek_r>
 8012216:	1c43      	adds	r3, r0, #1
 8012218:	89a3      	ldrh	r3, [r4, #12]
 801221a:	bf15      	itete	ne
 801221c:	6560      	strne	r0, [r4, #84]	; 0x54
 801221e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012226:	81a3      	strheq	r3, [r4, #12]
 8012228:	bf18      	it	ne
 801222a:	81a3      	strhne	r3, [r4, #12]
 801222c:	bd10      	pop	{r4, pc}

0801222e <__sclose>:
 801222e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012232:	f001 b9c5 	b.w	80135c0 <_close_r>
	...

08012238 <iso_year_adjust>:
 8012238:	6941      	ldr	r1, [r0, #20]
 801223a:	2900      	cmp	r1, #0
 801223c:	f240 736c 	movw	r3, #1900	; 0x76c
 8012240:	bfa8      	it	ge
 8012242:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8012246:	18ca      	adds	r2, r1, r3
 8012248:	078b      	lsls	r3, r1, #30
 801224a:	d105      	bne.n	8012258 <iso_year_adjust+0x20>
 801224c:	2164      	movs	r1, #100	; 0x64
 801224e:	fb92 f3f1 	sdiv	r3, r2, r1
 8012252:	fb01 2313 	mls	r3, r1, r3, r2
 8012256:	b9db      	cbnz	r3, 8012290 <iso_year_adjust+0x58>
 8012258:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801225c:	fb92 f3f1 	sdiv	r3, r2, r1
 8012260:	fb01 2313 	mls	r3, r1, r3, r2
 8012264:	fab3 f383 	clz	r3, r3
 8012268:	095b      	lsrs	r3, r3, #5
 801226a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801226e:	0040      	lsls	r0, r0, #1
 8012270:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8012274:	4418      	add	r0, r3
 8012276:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801227a:	4298      	cmp	r0, r3
 801227c:	d03a      	beq.n	80122f4 <iso_year_adjust+0xbc>
 801227e:	dc21      	bgt.n	80122c4 <iso_year_adjust+0x8c>
 8012280:	2801      	cmp	r0, #1
 8012282:	dc1a      	bgt.n	80122ba <iso_year_adjust+0x82>
 8012284:	2800      	cmp	r0, #0
 8012286:	bfb4      	ite	lt
 8012288:	2000      	movlt	r0, #0
 801228a:	f04f 30ff 	movge.w	r0, #4294967295
 801228e:	4770      	bx	lr
 8012290:	2301      	movs	r3, #1
 8012292:	e7ea      	b.n	801226a <iso_year_adjust+0x32>
 8012294:	2817      	cmp	r0, #23
 8012296:	d813      	bhi.n	80122c0 <iso_year_adjust+0x88>
 8012298:	e8df f000 	tbb	[pc, r0]
 801229c:	0c0c0c0c 	.word	0x0c0c0c0c
 80122a0:	0c0c1212 	.word	0x0c0c1212
 80122a4:	12121212 	.word	0x12121212
 80122a8:	12121212 	.word	0x12121212
 80122ac:	0c0c1212 	.word	0x0c0c1212
 80122b0:	0c0c1212 	.word	0x0c0c1212
 80122b4:	f04f 30ff 	mov.w	r0, #4294967295
 80122b8:	4770      	bx	lr
 80122ba:	380a      	subs	r0, #10
 80122bc:	2817      	cmp	r0, #23
 80122be:	d9e9      	bls.n	8012294 <iso_year_adjust+0x5c>
 80122c0:	2000      	movs	r0, #0
 80122c2:	4770      	bx	lr
 80122c4:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80122c8:	4298      	cmp	r0, r3
 80122ca:	dc06      	bgt.n	80122da <iso_year_adjust+0xa2>
 80122cc:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80122d0:	4298      	cmp	r0, r3
 80122d2:	bfd4      	ite	le
 80122d4:	2000      	movle	r0, #0
 80122d6:	2001      	movgt	r0, #1
 80122d8:	4770      	bx	lr
 80122da:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80122de:	3802      	subs	r0, #2
 80122e0:	2815      	cmp	r0, #21
 80122e2:	d8ed      	bhi.n	80122c0 <iso_year_adjust+0x88>
 80122e4:	2301      	movs	r3, #1
 80122e6:	4083      	lsls	r3, r0
 80122e8:	4803      	ldr	r0, [pc, #12]	; (80122f8 <iso_year_adjust+0xc0>)
 80122ea:	4018      	ands	r0, r3
 80122ec:	3800      	subs	r0, #0
 80122ee:	bf18      	it	ne
 80122f0:	2001      	movne	r0, #1
 80122f2:	4770      	bx	lr
 80122f4:	2001      	movs	r0, #1
 80122f6:	4770      	bx	lr
 80122f8:	002a001f 	.word	0x002a001f

080122fc <__strftime>:
 80122fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012300:	b091      	sub	sp, #68	; 0x44
 8012302:	461d      	mov	r5, r3
 8012304:	2300      	movs	r3, #0
 8012306:	4681      	mov	r9, r0
 8012308:	4688      	mov	r8, r1
 801230a:	9304      	str	r3, [sp, #16]
 801230c:	461c      	mov	r4, r3
 801230e:	7813      	ldrb	r3, [r2, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	f000 84d1 	beq.w	8012cb8 <__strftime+0x9bc>
 8012316:	2b25      	cmp	r3, #37	; 0x25
 8012318:	d11b      	bne.n	8012352 <__strftime+0x56>
 801231a:	7857      	ldrb	r7, [r2, #1]
 801231c:	2f30      	cmp	r7, #48	; 0x30
 801231e:	d024      	beq.n	801236a <__strftime+0x6e>
 8012320:	2f2b      	cmp	r7, #43	; 0x2b
 8012322:	d022      	beq.n	801236a <__strftime+0x6e>
 8012324:	f102 0b01 	add.w	fp, r2, #1
 8012328:	2700      	movs	r7, #0
 801232a:	f89b 3000 	ldrb.w	r3, [fp]
 801232e:	3b31      	subs	r3, #49	; 0x31
 8012330:	2b08      	cmp	r3, #8
 8012332:	d81d      	bhi.n	8012370 <__strftime+0x74>
 8012334:	4658      	mov	r0, fp
 8012336:	220a      	movs	r2, #10
 8012338:	a908      	add	r1, sp, #32
 801233a:	f000 fd57 	bl	8012dec <strtoul>
 801233e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8012342:	4606      	mov	r6, r0
 8012344:	f89b 3000 	ldrb.w	r3, [fp]
 8012348:	2b45      	cmp	r3, #69	; 0x45
 801234a:	d113      	bne.n	8012374 <__strftime+0x78>
 801234c:	f10b 0b01 	add.w	fp, fp, #1
 8012350:	e012      	b.n	8012378 <__strftime+0x7c>
 8012352:	f108 31ff 	add.w	r1, r8, #4294967295
 8012356:	42a1      	cmp	r1, r4
 8012358:	d802      	bhi.n	8012360 <__strftime+0x64>
 801235a:	2400      	movs	r4, #0
 801235c:	f000 bcb2 	b.w	8012cc4 <__strftime+0x9c8>
 8012360:	f809 3004 	strb.w	r3, [r9, r4]
 8012364:	3201      	adds	r2, #1
 8012366:	3401      	adds	r4, #1
 8012368:	e7d1      	b.n	801230e <__strftime+0x12>
 801236a:	f102 0b02 	add.w	fp, r2, #2
 801236e:	e7dc      	b.n	801232a <__strftime+0x2e>
 8012370:	2600      	movs	r6, #0
 8012372:	e7e7      	b.n	8012344 <__strftime+0x48>
 8012374:	2b4f      	cmp	r3, #79	; 0x4f
 8012376:	d0e9      	beq.n	801234c <__strftime+0x50>
 8012378:	f89b 0000 	ldrb.w	r0, [fp]
 801237c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8012380:	2b55      	cmp	r3, #85	; 0x55
 8012382:	d8ea      	bhi.n	801235a <__strftime+0x5e>
 8012384:	a201      	add	r2, pc, #4	; (adr r2, 801238c <__strftime+0x90>)
 8012386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801238a:	bf00      	nop
 801238c:	08012cab 	.word	0x08012cab
 8012390:	0801235b 	.word	0x0801235b
 8012394:	0801235b 	.word	0x0801235b
 8012398:	0801235b 	.word	0x0801235b
 801239c:	0801235b 	.word	0x0801235b
 80123a0:	0801235b 	.word	0x0801235b
 80123a4:	0801235b 	.word	0x0801235b
 80123a8:	0801235b 	.word	0x0801235b
 80123ac:	0801235b 	.word	0x0801235b
 80123b0:	0801235b 	.word	0x0801235b
 80123b4:	0801235b 	.word	0x0801235b
 80123b8:	0801235b 	.word	0x0801235b
 80123bc:	0801235b 	.word	0x0801235b
 80123c0:	0801235b 	.word	0x0801235b
 80123c4:	0801235b 	.word	0x0801235b
 80123c8:	0801235b 	.word	0x0801235b
 80123cc:	0801235b 	.word	0x0801235b
 80123d0:	0801235b 	.word	0x0801235b
 80123d4:	0801235b 	.word	0x0801235b
 80123d8:	0801235b 	.word	0x0801235b
 80123dc:	0801235b 	.word	0x0801235b
 80123e0:	0801235b 	.word	0x0801235b
 80123e4:	0801235b 	.word	0x0801235b
 80123e8:	0801235b 	.word	0x0801235b
 80123ec:	0801235b 	.word	0x0801235b
 80123f0:	0801235b 	.word	0x0801235b
 80123f4:	0801235b 	.word	0x0801235b
 80123f8:	0801235b 	.word	0x0801235b
 80123fc:	08012523 	.word	0x08012523
 8012400:	0801257d 	.word	0x0801257d
 8012404:	080125f3 	.word	0x080125f3
 8012408:	0801268d 	.word	0x0801268d
 801240c:	0801235b 	.word	0x0801235b
 8012410:	080126d9 	.word	0x080126d9
 8012414:	080127b9 	.word	0x080127b9
 8012418:	080128bb 	.word	0x080128bb
 801241c:	080128c9 	.word	0x080128c9
 8012420:	0801235b 	.word	0x0801235b
 8012424:	0801235b 	.word	0x0801235b
 8012428:	0801235b 	.word	0x0801235b
 801242c:	080128f9 	.word	0x080128f9
 8012430:	0801235b 	.word	0x0801235b
 8012434:	0801235b 	.word	0x0801235b
 8012438:	08012911 	.word	0x08012911
 801243c:	0801235b 	.word	0x0801235b
 8012440:	0801295f 	.word	0x0801295f
 8012444:	08012a75 	.word	0x08012a75
 8012448:	08012a87 	.word	0x08012a87
 801244c:	08012adf 	.word	0x08012adf
 8012450:	08012aef 	.word	0x08012aef
 8012454:	08012b65 	.word	0x08012b65
 8012458:	080125eb 	.word	0x080125eb
 801245c:	08012b99 	.word	0x08012b99
 8012460:	08012c57 	.word	0x08012c57
 8012464:	0801235b 	.word	0x0801235b
 8012468:	0801235b 	.word	0x0801235b
 801246c:	0801235b 	.word	0x0801235b
 8012470:	0801235b 	.word	0x0801235b
 8012474:	0801235b 	.word	0x0801235b
 8012478:	0801235b 	.word	0x0801235b
 801247c:	080124e5 	.word	0x080124e5
 8012480:	08012551 	.word	0x08012551
 8012484:	080125ab 	.word	0x080125ab
 8012488:	08012665 	.word	0x08012665
 801248c:	08012665 	.word	0x08012665
 8012490:	0801235b 	.word	0x0801235b
 8012494:	08012721 	.word	0x08012721
 8012498:	08012551 	.word	0x08012551
 801249c:	0801235b 	.word	0x0801235b
 80124a0:	080128eb 	.word	0x080128eb
 80124a4:	080128bb 	.word	0x080128bb
 80124a8:	080128c9 	.word	0x080128c9
 80124ac:	080128f3 	.word	0x080128f3
 80124b0:	080128fd 	.word	0x080128fd
 80124b4:	0801235b 	.word	0x0801235b
 80124b8:	08012911 	.word	0x08012911
 80124bc:	0801235b 	.word	0x0801235b
 80124c0:	080125db 	.word	0x080125db
 80124c4:	08012975 	.word	0x08012975
 80124c8:	08012a79 	.word	0x08012a79
 80124cc:	08012ac1 	.word	0x08012ac1
 80124d0:	0801235b 	.word	0x0801235b
 80124d4:	08012b55 	.word	0x08012b55
 80124d8:	080125e3 	.word	0x080125e3
 80124dc:	08012b7d 	.word	0x08012b7d
 80124e0:	08012be9 	.word	0x08012be9
 80124e4:	69ab      	ldr	r3, [r5, #24]
 80124e6:	4aa7      	ldr	r2, [pc, #668]	; (8012784 <__strftime+0x488>)
 80124e8:	3318      	adds	r3, #24
 80124ea:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80124ee:	4630      	mov	r0, r6
 80124f0:	f7ed fea4 	bl	800023c <strlen>
 80124f4:	3e01      	subs	r6, #1
 80124f6:	4420      	add	r0, r4
 80124f8:	f108 33ff 	add.w	r3, r8, #4294967295
 80124fc:	42a0      	cmp	r0, r4
 80124fe:	d107      	bne.n	8012510 <__strftime+0x214>
 8012500:	f89b 3000 	ldrb.w	r3, [fp]
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 83d7 	beq.w	8012cb8 <__strftime+0x9bc>
 801250a:	f10b 0201 	add.w	r2, fp, #1
 801250e:	e6fe      	b.n	801230e <__strftime+0x12>
 8012510:	42a3      	cmp	r3, r4
 8012512:	f67f af22 	bls.w	801235a <__strftime+0x5e>
 8012516:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801251a:	f809 2004 	strb.w	r2, [r9, r4]
 801251e:	3401      	adds	r4, #1
 8012520:	e7ec      	b.n	80124fc <__strftime+0x200>
 8012522:	69aa      	ldr	r2, [r5, #24]
 8012524:	4b97      	ldr	r3, [pc, #604]	; (8012784 <__strftime+0x488>)
 8012526:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801252a:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801252c:	4630      	mov	r0, r6
 801252e:	f7ed fe85 	bl	800023c <strlen>
 8012532:	3e01      	subs	r6, #1
 8012534:	4420      	add	r0, r4
 8012536:	f108 33ff 	add.w	r3, r8, #4294967295
 801253a:	42a0      	cmp	r0, r4
 801253c:	d0e0      	beq.n	8012500 <__strftime+0x204>
 801253e:	42a3      	cmp	r3, r4
 8012540:	f67f af0b 	bls.w	801235a <__strftime+0x5e>
 8012544:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012548:	f809 2004 	strb.w	r2, [r9, r4]
 801254c:	3401      	adds	r4, #1
 801254e:	e7f4      	b.n	801253a <__strftime+0x23e>
 8012550:	4b8c      	ldr	r3, [pc, #560]	; (8012784 <__strftime+0x488>)
 8012552:	692a      	ldr	r2, [r5, #16]
 8012554:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012558:	4630      	mov	r0, r6
 801255a:	f7ed fe6f 	bl	800023c <strlen>
 801255e:	3e01      	subs	r6, #1
 8012560:	4420      	add	r0, r4
 8012562:	f108 33ff 	add.w	r3, r8, #4294967295
 8012566:	42a0      	cmp	r0, r4
 8012568:	d0ca      	beq.n	8012500 <__strftime+0x204>
 801256a:	42a3      	cmp	r3, r4
 801256c:	f67f aef5 	bls.w	801235a <__strftime+0x5e>
 8012570:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012574:	f809 2004 	strb.w	r2, [r9, r4]
 8012578:	3401      	adds	r4, #1
 801257a:	e7f4      	b.n	8012566 <__strftime+0x26a>
 801257c:	692b      	ldr	r3, [r5, #16]
 801257e:	4a81      	ldr	r2, [pc, #516]	; (8012784 <__strftime+0x488>)
 8012580:	330c      	adds	r3, #12
 8012582:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8012586:	4630      	mov	r0, r6
 8012588:	f7ed fe58 	bl	800023c <strlen>
 801258c:	3e01      	subs	r6, #1
 801258e:	4420      	add	r0, r4
 8012590:	f108 33ff 	add.w	r3, r8, #4294967295
 8012594:	42a0      	cmp	r0, r4
 8012596:	d0b3      	beq.n	8012500 <__strftime+0x204>
 8012598:	42a3      	cmp	r3, r4
 801259a:	f67f aede 	bls.w	801235a <__strftime+0x5e>
 801259e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80125a2:	f809 2004 	strb.w	r2, [r9, r4]
 80125a6:	3401      	adds	r4, #1
 80125a8:	e7f4      	b.n	8012594 <__strftime+0x298>
 80125aa:	4b76      	ldr	r3, [pc, #472]	; (8012784 <__strftime+0x488>)
 80125ac:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80125b0:	4630      	mov	r0, r6
 80125b2:	f7ed fe43 	bl	800023c <strlen>
 80125b6:	7833      	ldrb	r3, [r6, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d0a1      	beq.n	8012500 <__strftime+0x204>
 80125bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80125be:	9300      	str	r3, [sp, #0]
 80125c0:	4632      	mov	r2, r6
 80125c2:	462b      	mov	r3, r5
 80125c4:	eba8 0104 	sub.w	r1, r8, r4
 80125c8:	eb09 0004 	add.w	r0, r9, r4
 80125cc:	f7ff fe96 	bl	80122fc <__strftime>
 80125d0:	2800      	cmp	r0, #0
 80125d2:	f77f aec2 	ble.w	801235a <__strftime+0x5e>
 80125d6:	4404      	add	r4, r0
 80125d8:	e792      	b.n	8012500 <__strftime+0x204>
 80125da:	4b6a      	ldr	r3, [pc, #424]	; (8012784 <__strftime+0x488>)
 80125dc:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 80125e0:	e7e6      	b.n	80125b0 <__strftime+0x2b4>
 80125e2:	4b68      	ldr	r3, [pc, #416]	; (8012784 <__strftime+0x488>)
 80125e4:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 80125e8:	e7e2      	b.n	80125b0 <__strftime+0x2b4>
 80125ea:	4b66      	ldr	r3, [pc, #408]	; (8012784 <__strftime+0x488>)
 80125ec:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80125f0:	e7de      	b.n	80125b0 <__strftime+0x2b4>
 80125f2:	4965      	ldr	r1, [pc, #404]	; (8012788 <__strftime+0x48c>)
 80125f4:	f8d5 a014 	ldr.w	sl, [r5, #20]
 80125f8:	458a      	cmp	sl, r1
 80125fa:	bfac      	ite	ge
 80125fc:	2100      	movge	r1, #0
 80125fe:	2101      	movlt	r1, #1
 8012600:	f1ba 0f00 	cmp.w	sl, #0
 8012604:	db0e      	blt.n	8012624 <__strftime+0x328>
 8012606:	2064      	movs	r0, #100	; 0x64
 8012608:	fb9a f0f0 	sdiv	r0, sl, r0
 801260c:	3013      	adds	r0, #19
 801260e:	b19f      	cbz	r7, 8012638 <__strftime+0x33c>
 8012610:	2863      	cmp	r0, #99	; 0x63
 8012612:	dd25      	ble.n	8012660 <__strftime+0x364>
 8012614:	4a5d      	ldr	r2, [pc, #372]	; (801278c <__strftime+0x490>)
 8012616:	4b5e      	ldr	r3, [pc, #376]	; (8012790 <__strftime+0x494>)
 8012618:	2f2b      	cmp	r7, #43	; 0x2b
 801261a:	bf14      	ite	ne
 801261c:	4617      	movne	r7, r2
 801261e:	461f      	moveq	r7, r3
 8012620:	4a5c      	ldr	r2, [pc, #368]	; (8012794 <__strftime+0x498>)
 8012622:	e00b      	b.n	801263c <__strftime+0x340>
 8012624:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8012628:	9105      	str	r1, [sp, #20]
 801262a:	f000 ffa7 	bl	801357c <abs>
 801262e:	2364      	movs	r3, #100	; 0x64
 8012630:	9905      	ldr	r1, [sp, #20]
 8012632:	fb90 f0f3 	sdiv	r0, r0, r3
 8012636:	e7ea      	b.n	801260e <__strftime+0x312>
 8012638:	4f54      	ldr	r7, [pc, #336]	; (801278c <__strftime+0x490>)
 801263a:	4a57      	ldr	r2, [pc, #348]	; (8012798 <__strftime+0x49c>)
 801263c:	4b57      	ldr	r3, [pc, #348]	; (801279c <__strftime+0x4a0>)
 801263e:	9001      	str	r0, [sp, #4]
 8012640:	2e02      	cmp	r6, #2
 8012642:	bf2c      	ite	cs
 8012644:	ebc1 0606 	rsbcs	r6, r1, r6
 8012648:	f1c1 0602 	rsbcc	r6, r1, #2
 801264c:	494e      	ldr	r1, [pc, #312]	; (8012788 <__strftime+0x48c>)
 801264e:	9600      	str	r6, [sp, #0]
 8012650:	458a      	cmp	sl, r1
 8012652:	bfa8      	it	ge
 8012654:	463b      	movge	r3, r7
 8012656:	eba8 0104 	sub.w	r1, r8, r4
 801265a:	eb09 0004 	add.w	r0, r9, r4
 801265e:	e02a      	b.n	80126b6 <__strftime+0x3ba>
 8012660:	4f4a      	ldr	r7, [pc, #296]	; (801278c <__strftime+0x490>)
 8012662:	e7dd      	b.n	8012620 <__strftime+0x324>
 8012664:	494e      	ldr	r1, [pc, #312]	; (80127a0 <__strftime+0x4a4>)
 8012666:	4a4f      	ldr	r2, [pc, #316]	; (80127a4 <__strftime+0x4a8>)
 8012668:	68eb      	ldr	r3, [r5, #12]
 801266a:	2864      	cmp	r0, #100	; 0x64
 801266c:	bf08      	it	eq
 801266e:	460a      	moveq	r2, r1
 8012670:	eba8 0104 	sub.w	r1, r8, r4
 8012674:	eb09 0004 	add.w	r0, r9, r4
 8012678:	f001 fe22 	bl	80142c0 <sniprintf>
 801267c:	2800      	cmp	r0, #0
 801267e:	f6ff ae6c 	blt.w	801235a <__strftime+0x5e>
 8012682:	4404      	add	r4, r0
 8012684:	45a0      	cmp	r8, r4
 8012686:	f63f af3b 	bhi.w	8012500 <__strftime+0x204>
 801268a:	e666      	b.n	801235a <__strftime+0x5e>
 801268c:	6968      	ldr	r0, [r5, #20]
 801268e:	692b      	ldr	r3, [r5, #16]
 8012690:	68ef      	ldr	r7, [r5, #12]
 8012692:	2800      	cmp	r0, #0
 8012694:	eb09 0604 	add.w	r6, r9, r4
 8012698:	eba8 0104 	sub.w	r1, r8, r4
 801269c:	f103 0301 	add.w	r3, r3, #1
 80126a0:	db0c      	blt.n	80126bc <__strftime+0x3c0>
 80126a2:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80126a6:	fb90 f2fc 	sdiv	r2, r0, ip
 80126aa:	fb0c 0212 	mls	r2, ip, r2, r0
 80126ae:	e9cd 7200 	strd	r7, r2, [sp]
 80126b2:	4a3d      	ldr	r2, [pc, #244]	; (80127a8 <__strftime+0x4ac>)
 80126b4:	4630      	mov	r0, r6
 80126b6:	f001 fe03 	bl	80142c0 <sniprintf>
 80126ba:	e7df      	b.n	801267c <__strftime+0x380>
 80126bc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80126c0:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80126c4:	f000 ff5a 	bl	801357c <abs>
 80126c8:	2264      	movs	r2, #100	; 0x64
 80126ca:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 80126ce:	fb90 fcf2 	sdiv	ip, r0, r2
 80126d2:	fb0c 0212 	mls	r2, ip, r2, r0
 80126d6:	e7ea      	b.n	80126ae <__strftime+0x3b2>
 80126d8:	2325      	movs	r3, #37	; 0x25
 80126da:	f88d 3020 	strb.w	r3, [sp, #32]
 80126de:	b187      	cbz	r7, 8012702 <__strftime+0x406>
 80126e0:	2e06      	cmp	r6, #6
 80126e2:	bf38      	it	cc
 80126e4:	2606      	movcc	r6, #6
 80126e6:	1fb3      	subs	r3, r6, #6
 80126e8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80126ec:	d10c      	bne.n	8012708 <__strftime+0x40c>
 80126ee:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80126f2:	492e      	ldr	r1, [pc, #184]	; (80127ac <__strftime+0x4b0>)
 80126f4:	f001 fe44 	bl	8014380 <strcpy>
 80126f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80126fa:	9300      	str	r3, [sp, #0]
 80126fc:	aa08      	add	r2, sp, #32
 80126fe:	462b      	mov	r3, r5
 8012700:	e760      	b.n	80125c4 <__strftime+0x2c8>
 8012702:	272b      	movs	r7, #43	; 0x2b
 8012704:	260a      	movs	r6, #10
 8012706:	e7ee      	b.n	80126e6 <__strftime+0x3ea>
 8012708:	4a29      	ldr	r2, [pc, #164]	; (80127b0 <__strftime+0x4b4>)
 801270a:	211e      	movs	r1, #30
 801270c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8012710:	f001 fdd6 	bl	80142c0 <sniprintf>
 8012714:	2800      	cmp	r0, #0
 8012716:	ddea      	ble.n	80126ee <__strftime+0x3f2>
 8012718:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801271c:	4418      	add	r0, r3
 801271e:	e7e8      	b.n	80126f2 <__strftime+0x3f6>
 8012720:	4628      	mov	r0, r5
 8012722:	f7ff fd89 	bl	8012238 <iso_year_adjust>
 8012726:	4606      	mov	r6, r0
 8012728:	6968      	ldr	r0, [r5, #20]
 801272a:	2800      	cmp	r0, #0
 801272c:	db11      	blt.n	8012752 <__strftime+0x456>
 801272e:	2264      	movs	r2, #100	; 0x64
 8012730:	fb90 f3f2 	sdiv	r3, r0, r2
 8012734:	fb02 0313 	mls	r3, r2, r3, r0
 8012738:	441e      	add	r6, r3
 801273a:	2364      	movs	r3, #100	; 0x64
 801273c:	fb96 f0f3 	sdiv	r0, r6, r3
 8012740:	fb03 6610 	mls	r6, r3, r0, r6
 8012744:	441e      	add	r6, r3
 8012746:	fbb6 f2f3 	udiv	r2, r6, r3
 801274a:	fb03 6312 	mls	r3, r3, r2, r6
 801274e:	4a14      	ldr	r2, [pc, #80]	; (80127a0 <__strftime+0x4a4>)
 8012750:	e78e      	b.n	8012670 <__strftime+0x374>
 8012752:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012756:	f000 ff11 	bl	801357c <abs>
 801275a:	2364      	movs	r3, #100	; 0x64
 801275c:	2e00      	cmp	r6, #0
 801275e:	fb90 f2f3 	sdiv	r2, r0, r3
 8012762:	fb02 0313 	mls	r3, r2, r3, r0
 8012766:	da05      	bge.n	8012774 <__strftime+0x478>
 8012768:	6969      	ldr	r1, [r5, #20]
 801276a:	4a12      	ldr	r2, [pc, #72]	; (80127b4 <__strftime+0x4b8>)
 801276c:	4291      	cmp	r1, r2
 801276e:	bfb8      	it	lt
 8012770:	2601      	movlt	r6, #1
 8012772:	e7e1      	b.n	8012738 <__strftime+0x43c>
 8012774:	d0e0      	beq.n	8012738 <__strftime+0x43c>
 8012776:	6969      	ldr	r1, [r5, #20]
 8012778:	4a03      	ldr	r2, [pc, #12]	; (8012788 <__strftime+0x48c>)
 801277a:	4291      	cmp	r1, r2
 801277c:	bfb8      	it	lt
 801277e:	f04f 36ff 	movlt.w	r6, #4294967295
 8012782:	e7d9      	b.n	8012738 <__strftime+0x43c>
 8012784:	08017a38 	.word	0x08017a38
 8012788:	fffff894 	.word	0xfffff894
 801278c:	08017bab 	.word	0x08017bab
 8012790:	080178c2 	.word	0x080178c2
 8012794:	080178ba 	.word	0x080178ba
 8012798:	080178b3 	.word	0x080178b3
 801279c:	08017ceb 	.word	0x08017ceb
 80127a0:	080178d2 	.word	0x080178d2
 80127a4:	080178c4 	.word	0x080178c4
 80127a8:	080178c8 	.word	0x080178c8
 80127ac:	080178db 	.word	0x080178db
 80127b0:	080178d7 	.word	0x080178d7
 80127b4:	fffff895 	.word	0xfffff895
 80127b8:	4bb6      	ldr	r3, [pc, #728]	; (8012a94 <__strftime+0x798>)
 80127ba:	6969      	ldr	r1, [r5, #20]
 80127bc:	4299      	cmp	r1, r3
 80127be:	bfac      	ite	ge
 80127c0:	2300      	movge	r3, #0
 80127c2:	2301      	movlt	r3, #1
 80127c4:	4628      	mov	r0, r5
 80127c6:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80127ca:	f7ff fd35 	bl	8012238 <iso_year_adjust>
 80127ce:	9906      	ldr	r1, [sp, #24]
 80127d0:	2900      	cmp	r1, #0
 80127d2:	4682      	mov	sl, r0
 80127d4:	db27      	blt.n	8012826 <__strftime+0x52a>
 80127d6:	2264      	movs	r2, #100	; 0x64
 80127d8:	fb91 f2f2 	sdiv	r2, r1, r2
 80127dc:	3213      	adds	r2, #19
 80127de:	6968      	ldr	r0, [r5, #20]
 80127e0:	2800      	cmp	r0, #0
 80127e2:	db2b      	blt.n	801283c <__strftime+0x540>
 80127e4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80127e8:	fb90 fefc 	sdiv	lr, r0, ip
 80127ec:	fb0c 001e 	mls	r0, ip, lr, r0
 80127f0:	f1ba 0f00 	cmp.w	sl, #0
 80127f4:	da31      	bge.n	801285a <__strftime+0x55e>
 80127f6:	6969      	ldr	r1, [r5, #20]
 80127f8:	4ba7      	ldr	r3, [pc, #668]	; (8012a98 <__strftime+0x79c>)
 80127fa:	4299      	cmp	r1, r3
 80127fc:	db38      	blt.n	8012870 <__strftime+0x574>
 80127fe:	eb0a 0300 	add.w	r3, sl, r0
 8012802:	1c59      	adds	r1, r3, #1
 8012804:	d139      	bne.n	801287a <__strftime+0x57e>
 8012806:	3a01      	subs	r2, #1
 8012808:	2363      	movs	r3, #99	; 0x63
 801280a:	2064      	movs	r0, #100	; 0x64
 801280c:	fb00 3202 	mla	r2, r0, r2, r3
 8012810:	9b05      	ldr	r3, [sp, #20]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d036      	beq.n	8012884 <__strftime+0x588>
 8012816:	232d      	movs	r3, #45	; 0x2d
 8012818:	f88d 3020 	strb.w	r3, [sp, #32]
 801281c:	b106      	cbz	r6, 8012820 <__strftime+0x524>
 801281e:	3e01      	subs	r6, #1
 8012820:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8012824:	e038      	b.n	8012898 <__strftime+0x59c>
 8012826:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801282a:	9106      	str	r1, [sp, #24]
 801282c:	f000 fea6 	bl	801357c <abs>
 8012830:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8012834:	9906      	ldr	r1, [sp, #24]
 8012836:	fb90 f2fc 	sdiv	r2, r0, ip
 801283a:	e7d0      	b.n	80127de <__strftime+0x4e2>
 801283c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012840:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8012844:	f000 fe9a 	bl	801357c <abs>
 8012848:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801284c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012850:	fb90 fefc 	sdiv	lr, r0, ip
 8012854:	fb0e 001c 	mls	r0, lr, ip, r0
 8012858:	e7ca      	b.n	80127f0 <__strftime+0x4f4>
 801285a:	d0d0      	beq.n	80127fe <__strftime+0x502>
 801285c:	4b8d      	ldr	r3, [pc, #564]	; (8012a94 <__strftime+0x798>)
 801285e:	4299      	cmp	r1, r3
 8012860:	bfb4      	ite	lt
 8012862:	2301      	movlt	r3, #1
 8012864:	2300      	movge	r3, #0
 8012866:	9305      	str	r3, [sp, #20]
 8012868:	bfb8      	it	lt
 801286a:	f04f 3aff 	movlt.w	sl, #4294967295
 801286e:	e7c6      	b.n	80127fe <__strftime+0x502>
 8012870:	f04f 0a01 	mov.w	sl, #1
 8012874:	f8cd a014 	str.w	sl, [sp, #20]
 8012878:	e7c1      	b.n	80127fe <__strftime+0x502>
 801287a:	2b64      	cmp	r3, #100	; 0x64
 801287c:	bf04      	itt	eq
 801287e:	3201      	addeq	r2, #1
 8012880:	2300      	moveq	r3, #0
 8012882:	e7c2      	b.n	801280a <__strftime+0x50e>
 8012884:	2f2b      	cmp	r7, #43	; 0x2b
 8012886:	d106      	bne.n	8012896 <__strftime+0x59a>
 8012888:	f242 730f 	movw	r3, #9999	; 0x270f
 801288c:	429a      	cmp	r2, r3
 801288e:	d902      	bls.n	8012896 <__strftime+0x59a>
 8012890:	f88d 7020 	strb.w	r7, [sp, #32]
 8012894:	e7c2      	b.n	801281c <__strftime+0x520>
 8012896:	ab08      	add	r3, sp, #32
 8012898:	2125      	movs	r1, #37	; 0x25
 801289a:	7019      	strb	r1, [r3, #0]
 801289c:	b94f      	cbnz	r7, 80128b2 <__strftime+0x5b6>
 801289e:	1c58      	adds	r0, r3, #1
 80128a0:	497e      	ldr	r1, [pc, #504]	; (8012a9c <__strftime+0x7a0>)
 80128a2:	9205      	str	r2, [sp, #20]
 80128a4:	f001 fd6c 	bl	8014380 <strcpy>
 80128a8:	9a05      	ldr	r2, [sp, #20]
 80128aa:	9200      	str	r2, [sp, #0]
 80128ac:	4633      	mov	r3, r6
 80128ae:	aa08      	add	r2, sp, #32
 80128b0:	e059      	b.n	8012966 <__strftime+0x66a>
 80128b2:	2130      	movs	r1, #48	; 0x30
 80128b4:	1c98      	adds	r0, r3, #2
 80128b6:	7059      	strb	r1, [r3, #1]
 80128b8:	e7f2      	b.n	80128a0 <__strftime+0x5a4>
 80128ba:	4979      	ldr	r1, [pc, #484]	; (8012aa0 <__strftime+0x7a4>)
 80128bc:	4a79      	ldr	r2, [pc, #484]	; (8012aa4 <__strftime+0x7a8>)
 80128be:	68ab      	ldr	r3, [r5, #8]
 80128c0:	286b      	cmp	r0, #107	; 0x6b
 80128c2:	bf08      	it	eq
 80128c4:	460a      	moveq	r2, r1
 80128c6:	e6d3      	b.n	8012670 <__strftime+0x374>
 80128c8:	68ab      	ldr	r3, [r5, #8]
 80128ca:	b163      	cbz	r3, 80128e6 <__strftime+0x5ea>
 80128cc:	2b0c      	cmp	r3, #12
 80128ce:	d004      	beq.n	80128da <__strftime+0x5de>
 80128d0:	210c      	movs	r1, #12
 80128d2:	fb93 f2f1 	sdiv	r2, r3, r1
 80128d6:	fb01 3312 	mls	r3, r1, r2, r3
 80128da:	4972      	ldr	r1, [pc, #456]	; (8012aa4 <__strftime+0x7a8>)
 80128dc:	4a70      	ldr	r2, [pc, #448]	; (8012aa0 <__strftime+0x7a4>)
 80128de:	2849      	cmp	r0, #73	; 0x49
 80128e0:	bf08      	it	eq
 80128e2:	460a      	moveq	r2, r1
 80128e4:	e6c4      	b.n	8012670 <__strftime+0x374>
 80128e6:	230c      	movs	r3, #12
 80128e8:	e7f7      	b.n	80128da <__strftime+0x5de>
 80128ea:	69eb      	ldr	r3, [r5, #28]
 80128ec:	4a6e      	ldr	r2, [pc, #440]	; (8012aa8 <__strftime+0x7ac>)
 80128ee:	3301      	adds	r3, #1
 80128f0:	e6be      	b.n	8012670 <__strftime+0x374>
 80128f2:	692b      	ldr	r3, [r5, #16]
 80128f4:	3301      	adds	r3, #1
 80128f6:	e72a      	b.n	801274e <__strftime+0x452>
 80128f8:	686b      	ldr	r3, [r5, #4]
 80128fa:	e728      	b.n	801274e <__strftime+0x452>
 80128fc:	f108 33ff 	add.w	r3, r8, #4294967295
 8012900:	42a3      	cmp	r3, r4
 8012902:	f67f ad2a 	bls.w	801235a <__strftime+0x5e>
 8012906:	230a      	movs	r3, #10
 8012908:	f809 3004 	strb.w	r3, [r9, r4]
 801290c:	3401      	adds	r4, #1
 801290e:	e5f7      	b.n	8012500 <__strftime+0x204>
 8012910:	68ab      	ldr	r3, [r5, #8]
 8012912:	2b0b      	cmp	r3, #11
 8012914:	bfcc      	ite	gt
 8012916:	22a4      	movgt	r2, #164	; 0xa4
 8012918:	22a0      	movle	r2, #160	; 0xa0
 801291a:	4b64      	ldr	r3, [pc, #400]	; (8012aac <__strftime+0x7b0>)
 801291c:	4413      	add	r3, r2
 801291e:	685e      	ldr	r6, [r3, #4]
 8012920:	4630      	mov	r0, r6
 8012922:	f7ed fc8b 	bl	800023c <strlen>
 8012926:	1e72      	subs	r2, r6, #1
 8012928:	4420      	add	r0, r4
 801292a:	f108 36ff 	add.w	r6, r8, #4294967295
 801292e:	42a0      	cmp	r0, r4
 8012930:	f43f ade6 	beq.w	8012500 <__strftime+0x204>
 8012934:	42a6      	cmp	r6, r4
 8012936:	f67f ad10 	bls.w	801235a <__strftime+0x5e>
 801293a:	f89b 1000 	ldrb.w	r1, [fp]
 801293e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012942:	2950      	cmp	r1, #80	; 0x50
 8012944:	d107      	bne.n	8012956 <__strftime+0x65a>
 8012946:	495a      	ldr	r1, [pc, #360]	; (8012ab0 <__strftime+0x7b4>)
 8012948:	5cc9      	ldrb	r1, [r1, r3]
 801294a:	f001 0103 	and.w	r1, r1, #3
 801294e:	2901      	cmp	r1, #1
 8012950:	bf08      	it	eq
 8012952:	3320      	addeq	r3, #32
 8012954:	b2db      	uxtb	r3, r3
 8012956:	f809 3004 	strb.w	r3, [r9, r4]
 801295a:	3401      	adds	r4, #1
 801295c:	e7e7      	b.n	801292e <__strftime+0x632>
 801295e:	686b      	ldr	r3, [r5, #4]
 8012960:	9300      	str	r3, [sp, #0]
 8012962:	4a54      	ldr	r2, [pc, #336]	; (8012ab4 <__strftime+0x7b8>)
 8012964:	68ab      	ldr	r3, [r5, #8]
 8012966:	eba8 0104 	sub.w	r1, r8, r4
 801296a:	eb09 0004 	add.w	r0, r9, r4
 801296e:	f001 fca7 	bl	80142c0 <sniprintf>
 8012972:	e683      	b.n	801267c <__strftime+0x380>
 8012974:	6a2b      	ldr	r3, [r5, #32]
 8012976:	2b00      	cmp	r3, #0
 8012978:	db79      	blt.n	8012a6e <__strftime+0x772>
 801297a:	f000 fb03 	bl	8012f84 <__tz_lock>
 801297e:	9b04      	ldr	r3, [sp, #16]
 8012980:	b90b      	cbnz	r3, 8012986 <__strftime+0x68a>
 8012982:	f000 fb0b 	bl	8012f9c <_tzset_unlocked>
 8012986:	f000 fed9 	bl	801373c <__gettzinfo>
 801298a:	6a2b      	ldr	r3, [r5, #32]
 801298c:	2b00      	cmp	r3, #0
 801298e:	bfcc      	ite	gt
 8012990:	2350      	movgt	r3, #80	; 0x50
 8012992:	2328      	movle	r3, #40	; 0x28
 8012994:	58c3      	ldr	r3, [r0, r3]
 8012996:	f1c3 0a00 	rsb	sl, r3, #0
 801299a:	f000 faf9 	bl	8012f90 <__tz_unlock>
 801299e:	2301      	movs	r3, #1
 80129a0:	9304      	str	r3, [sp, #16]
 80129a2:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80129a6:	4662      	mov	r2, ip
 80129a8:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 80129ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80129b0:	9602      	str	r6, [sp, #8]
 80129b2:	f143 36ff 	adc.w	r6, r3, #4294967295
 80129b6:	9603      	str	r6, [sp, #12]
 80129b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80129bc:	2e00      	cmp	r6, #0
 80129be:	f177 0600 	sbcs.w	r6, r7, #0
 80129c2:	eba8 0104 	sub.w	r1, r8, r4
 80129c6:	eb09 0004 	add.w	r0, r9, r4
 80129ca:	da05      	bge.n	80129d8 <__strftime+0x6dc>
 80129cc:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 80129d0:	f143 33ff 	adc.w	r3, r3, #4294967295
 80129d4:	9602      	str	r6, [sp, #8]
 80129d6:	9303      	str	r3, [sp, #12]
 80129d8:	9b02      	ldr	r3, [sp, #8]
 80129da:	089e      	lsrs	r6, r3, #2
 80129dc:	9b03      	ldr	r3, [sp, #12]
 80129de:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 80129e2:	f10c 32ff 	add.w	r2, ip, #4294967295
 80129e6:	109f      	asrs	r7, r3, #2
 80129e8:	2364      	movs	r3, #100	; 0x64
 80129ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80129ee:	1af6      	subs	r6, r6, r3
 80129f0:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 80129f4:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80129f8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80129fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8012a00:	18f6      	adds	r6, r6, r3
 8012a02:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012a06:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8012a0a:	f240 136d 	movw	r3, #365	; 0x16d
 8012a0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8012a12:	69eb      	ldr	r3, [r5, #28]
 8012a14:	eb16 060c 	adds.w	r6, r6, ip
 8012a18:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8012a1c:	18f6      	adds	r6, r6, r3
 8012a1e:	f04f 0c18 	mov.w	ip, #24
 8012a22:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012a26:	fba6 230c 	umull	r2, r3, r6, ip
 8012a2a:	68ae      	ldr	r6, [r5, #8]
 8012a2c:	fb0c 3307 	mla	r3, ip, r7, r3
 8012a30:	1992      	adds	r2, r2, r6
 8012a32:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8012a36:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8012a3a:	fba2 670c 	umull	r6, r7, r2, ip
 8012a3e:	fb0c 7703 	mla	r7, ip, r3, r7
 8012a42:	686b      	ldr	r3, [r5, #4]
 8012a44:	18f6      	adds	r6, r6, r3
 8012a46:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012a4a:	fba6 230c 	umull	r2, r3, r6, ip
 8012a4e:	682e      	ldr	r6, [r5, #0]
 8012a50:	fb0c 3307 	mla	r3, ip, r7, r3
 8012a54:	1992      	adds	r2, r2, r6
 8012a56:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8012a5a:	ebb2 020a 	subs.w	r2, r2, sl
 8012a5e:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8012a62:	e9cd 2300 	strd	r2, r3, [sp]
 8012a66:	4a14      	ldr	r2, [pc, #80]	; (8012ab8 <__strftime+0x7bc>)
 8012a68:	f001 fc2a 	bl	80142c0 <sniprintf>
 8012a6c:	e606      	b.n	801267c <__strftime+0x380>
 8012a6e:	f04f 0a00 	mov.w	sl, #0
 8012a72:	e796      	b.n	80129a2 <__strftime+0x6a6>
 8012a74:	682b      	ldr	r3, [r5, #0]
 8012a76:	e66a      	b.n	801274e <__strftime+0x452>
 8012a78:	f108 33ff 	add.w	r3, r8, #4294967295
 8012a7c:	42a3      	cmp	r3, r4
 8012a7e:	f67f ac6c 	bls.w	801235a <__strftime+0x5e>
 8012a82:	2309      	movs	r3, #9
 8012a84:	e740      	b.n	8012908 <__strftime+0x60c>
 8012a86:	682b      	ldr	r3, [r5, #0]
 8012a88:	9301      	str	r3, [sp, #4]
 8012a8a:	686b      	ldr	r3, [r5, #4]
 8012a8c:	9300      	str	r3, [sp, #0]
 8012a8e:	4a0b      	ldr	r2, [pc, #44]	; (8012abc <__strftime+0x7c0>)
 8012a90:	68ab      	ldr	r3, [r5, #8]
 8012a92:	e5e0      	b.n	8012656 <__strftime+0x35a>
 8012a94:	fffff894 	.word	0xfffff894
 8012a98:	fffff895 	.word	0xfffff895
 8012a9c:	080178e3 	.word	0x080178e3
 8012aa0:	080178c4 	.word	0x080178c4
 8012aa4:	080178d2 	.word	0x080178d2
 8012aa8:	080178e7 	.word	0x080178e7
 8012aac:	08017a38 	.word	0x08017a38
 8012ab0:	08017bad 	.word	0x08017bad
 8012ab4:	080178f6 	.word	0x080178f6
 8012ab8:	080178ec 	.word	0x080178ec
 8012abc:	080178f1 	.word	0x080178f1
 8012ac0:	f108 33ff 	add.w	r3, r8, #4294967295
 8012ac4:	42a3      	cmp	r3, r4
 8012ac6:	f67f ac48 	bls.w	801235a <__strftime+0x5e>
 8012aca:	69ab      	ldr	r3, [r5, #24]
 8012acc:	eb09 0204 	add.w	r2, r9, r4
 8012ad0:	3401      	adds	r4, #1
 8012ad2:	b913      	cbnz	r3, 8012ada <__strftime+0x7de>
 8012ad4:	2337      	movs	r3, #55	; 0x37
 8012ad6:	7013      	strb	r3, [r2, #0]
 8012ad8:	e512      	b.n	8012500 <__strftime+0x204>
 8012ada:	3330      	adds	r3, #48	; 0x30
 8012adc:	e7fb      	b.n	8012ad6 <__strftime+0x7da>
 8012ade:	69eb      	ldr	r3, [r5, #28]
 8012ae0:	69aa      	ldr	r2, [r5, #24]
 8012ae2:	3307      	adds	r3, #7
 8012ae4:	1a9b      	subs	r3, r3, r2
 8012ae6:	2207      	movs	r2, #7
 8012ae8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012aec:	e62f      	b.n	801274e <__strftime+0x452>
 8012aee:	4628      	mov	r0, r5
 8012af0:	f7ff fba2 	bl	8012238 <iso_year_adjust>
 8012af4:	69aa      	ldr	r2, [r5, #24]
 8012af6:	b132      	cbz	r2, 8012b06 <__strftime+0x80a>
 8012af8:	3a01      	subs	r2, #1
 8012afa:	2800      	cmp	r0, #0
 8012afc:	dc28      	bgt.n	8012b50 <__strftime+0x854>
 8012afe:	69eb      	ldr	r3, [r5, #28]
 8012b00:	d103      	bne.n	8012b0a <__strftime+0x80e>
 8012b02:	330a      	adds	r3, #10
 8012b04:	e7ee      	b.n	8012ae4 <__strftime+0x7e8>
 8012b06:	2206      	movs	r2, #6
 8012b08:	e7f7      	b.n	8012afa <__strftime+0x7fe>
 8012b0a:	6968      	ldr	r0, [r5, #20]
 8012b0c:	2800      	cmp	r0, #0
 8012b0e:	eba2 0303 	sub.w	r3, r2, r3
 8012b12:	f240 726b 	movw	r2, #1899	; 0x76b
 8012b16:	bfa8      	it	ge
 8012b18:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8012b1c:	4410      	add	r0, r2
 8012b1e:	0782      	lsls	r2, r0, #30
 8012b20:	d105      	bne.n	8012b2e <__strftime+0x832>
 8012b22:	2264      	movs	r2, #100	; 0x64
 8012b24:	fb90 f1f2 	sdiv	r1, r0, r2
 8012b28:	fb02 0111 	mls	r1, r2, r1, r0
 8012b2c:	b971      	cbnz	r1, 8012b4c <__strftime+0x850>
 8012b2e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012b32:	fb90 f2f1 	sdiv	r2, r0, r1
 8012b36:	fb01 0212 	mls	r2, r1, r2, r0
 8012b3a:	fab2 f282 	clz	r2, r2
 8012b3e:	0952      	lsrs	r2, r2, #5
 8012b40:	1a9a      	subs	r2, r3, r2
 8012b42:	2a05      	cmp	r2, #5
 8012b44:	bfb4      	ite	lt
 8012b46:	2335      	movlt	r3, #53	; 0x35
 8012b48:	2334      	movge	r3, #52	; 0x34
 8012b4a:	e600      	b.n	801274e <__strftime+0x452>
 8012b4c:	2201      	movs	r2, #1
 8012b4e:	e7f7      	b.n	8012b40 <__strftime+0x844>
 8012b50:	2301      	movs	r3, #1
 8012b52:	e5fc      	b.n	801274e <__strftime+0x452>
 8012b54:	f108 33ff 	add.w	r3, r8, #4294967295
 8012b58:	42a3      	cmp	r3, r4
 8012b5a:	f67f abfe 	bls.w	801235a <__strftime+0x5e>
 8012b5e:	69ab      	ldr	r3, [r5, #24]
 8012b60:	3330      	adds	r3, #48	; 0x30
 8012b62:	e6d1      	b.n	8012908 <__strftime+0x60c>
 8012b64:	69ab      	ldr	r3, [r5, #24]
 8012b66:	b13b      	cbz	r3, 8012b78 <__strftime+0x87c>
 8012b68:	3b01      	subs	r3, #1
 8012b6a:	69ea      	ldr	r2, [r5, #28]
 8012b6c:	3207      	adds	r2, #7
 8012b6e:	1ad2      	subs	r2, r2, r3
 8012b70:	2307      	movs	r3, #7
 8012b72:	fb92 f3f3 	sdiv	r3, r2, r3
 8012b76:	e5ea      	b.n	801274e <__strftime+0x452>
 8012b78:	2306      	movs	r3, #6
 8012b7a:	e7f6      	b.n	8012b6a <__strftime+0x86e>
 8012b7c:	6968      	ldr	r0, [r5, #20]
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	db05      	blt.n	8012b8e <__strftime+0x892>
 8012b82:	2264      	movs	r2, #100	; 0x64
 8012b84:	fb90 f3f2 	sdiv	r3, r0, r2
 8012b88:	fb03 0312 	mls	r3, r3, r2, r0
 8012b8c:	e5df      	b.n	801274e <__strftime+0x452>
 8012b8e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012b92:	f000 fcf3 	bl	801357c <abs>
 8012b96:	e7f4      	b.n	8012b82 <__strftime+0x886>
 8012b98:	696b      	ldr	r3, [r5, #20]
 8012b9a:	4a4c      	ldr	r2, [pc, #304]	; (8012ccc <__strftime+0x9d0>)
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	da09      	bge.n	8012bb4 <__strftime+0x8b8>
 8012ba0:	212d      	movs	r1, #45	; 0x2d
 8012ba2:	f88d 1020 	strb.w	r1, [sp, #32]
 8012ba6:	eba2 0a03 	sub.w	sl, r2, r3
 8012baa:	b106      	cbz	r6, 8012bae <__strftime+0x8b2>
 8012bac:	3e01      	subs	r6, #1
 8012bae:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8012bb2:	e00b      	b.n	8012bcc <__strftime+0x8d0>
 8012bb4:	2f2b      	cmp	r7, #43	; 0x2b
 8012bb6:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8012bba:	d106      	bne.n	8012bca <__strftime+0x8ce>
 8012bbc:	f242 730f 	movw	r3, #9999	; 0x270f
 8012bc0:	459a      	cmp	sl, r3
 8012bc2:	d902      	bls.n	8012bca <__strftime+0x8ce>
 8012bc4:	f88d 7020 	strb.w	r7, [sp, #32]
 8012bc8:	e7ef      	b.n	8012baa <__strftime+0x8ae>
 8012bca:	ab08      	add	r3, sp, #32
 8012bcc:	2225      	movs	r2, #37	; 0x25
 8012bce:	701a      	strb	r2, [r3, #0]
 8012bd0:	b937      	cbnz	r7, 8012be0 <__strftime+0x8e4>
 8012bd2:	1c58      	adds	r0, r3, #1
 8012bd4:	493e      	ldr	r1, [pc, #248]	; (8012cd0 <__strftime+0x9d4>)
 8012bd6:	f001 fbd3 	bl	8014380 <strcpy>
 8012bda:	f8cd a000 	str.w	sl, [sp]
 8012bde:	e665      	b.n	80128ac <__strftime+0x5b0>
 8012be0:	2230      	movs	r2, #48	; 0x30
 8012be2:	1c98      	adds	r0, r3, #2
 8012be4:	705a      	strb	r2, [r3, #1]
 8012be6:	e7f5      	b.n	8012bd4 <__strftime+0x8d8>
 8012be8:	6a2b      	ldr	r3, [r5, #32]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	f6ff ac88 	blt.w	8012500 <__strftime+0x204>
 8012bf0:	f000 f9c8 	bl	8012f84 <__tz_lock>
 8012bf4:	9b04      	ldr	r3, [sp, #16]
 8012bf6:	b90b      	cbnz	r3, 8012bfc <__strftime+0x900>
 8012bf8:	f000 f9d0 	bl	8012f9c <_tzset_unlocked>
 8012bfc:	f000 fd9e 	bl	801373c <__gettzinfo>
 8012c00:	6a2b      	ldr	r3, [r5, #32]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	bfcc      	ite	gt
 8012c06:	2350      	movgt	r3, #80	; 0x50
 8012c08:	2328      	movle	r3, #40	; 0x28
 8012c0a:	eb09 0704 	add.w	r7, r9, r4
 8012c0e:	58c6      	ldr	r6, [r0, r3]
 8012c10:	f000 f9be 	bl	8012f90 <__tz_unlock>
 8012c14:	4276      	negs	r6, r6
 8012c16:	233c      	movs	r3, #60	; 0x3c
 8012c18:	fb96 f0f3 	sdiv	r0, r6, r3
 8012c1c:	f000 fe52 	bl	80138c4 <labs>
 8012c20:	233c      	movs	r3, #60	; 0x3c
 8012c22:	eba8 0a04 	sub.w	sl, r8, r4
 8012c26:	fb90 f2f3 	sdiv	r2, r0, r3
 8012c2a:	fb02 0013 	mls	r0, r2, r3, r0
 8012c2e:	9000      	str	r0, [sp, #0]
 8012c30:	4a28      	ldr	r2, [pc, #160]	; (8012cd4 <__strftime+0x9d8>)
 8012c32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012c36:	4651      	mov	r1, sl
 8012c38:	4638      	mov	r0, r7
 8012c3a:	fb96 f3f3 	sdiv	r3, r6, r3
 8012c3e:	f001 fb3f 	bl	80142c0 <sniprintf>
 8012c42:	2800      	cmp	r0, #0
 8012c44:	f6ff ab89 	blt.w	801235a <__strftime+0x5e>
 8012c48:	4404      	add	r4, r0
 8012c4a:	45a0      	cmp	r8, r4
 8012c4c:	f67f ab85 	bls.w	801235a <__strftime+0x5e>
 8012c50:	2301      	movs	r3, #1
 8012c52:	9304      	str	r3, [sp, #16]
 8012c54:	e454      	b.n	8012500 <__strftime+0x204>
 8012c56:	6a2b      	ldr	r3, [r5, #32]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	f6ff ac51 	blt.w	8012500 <__strftime+0x204>
 8012c5e:	f000 f991 	bl	8012f84 <__tz_lock>
 8012c62:	9b04      	ldr	r3, [sp, #16]
 8012c64:	b90b      	cbnz	r3, 8012c6a <__strftime+0x96e>
 8012c66:	f000 f999 	bl	8012f9c <_tzset_unlocked>
 8012c6a:	6a2b      	ldr	r3, [r5, #32]
 8012c6c:	4a1a      	ldr	r2, [pc, #104]	; (8012cd8 <__strftime+0x9dc>)
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	bfd4      	ite	le
 8012c72:	2300      	movle	r3, #0
 8012c74:	2301      	movgt	r3, #1
 8012c76:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	f7ed fade 	bl	800023c <strlen>
 8012c80:	3e01      	subs	r6, #1
 8012c82:	4420      	add	r0, r4
 8012c84:	f108 33ff 	add.w	r3, r8, #4294967295
 8012c88:	42a0      	cmp	r0, r4
 8012c8a:	d102      	bne.n	8012c92 <__strftime+0x996>
 8012c8c:	f000 f980 	bl	8012f90 <__tz_unlock>
 8012c90:	e7de      	b.n	8012c50 <__strftime+0x954>
 8012c92:	42a3      	cmp	r3, r4
 8012c94:	d905      	bls.n	8012ca2 <__strftime+0x9a6>
 8012c96:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012c9a:	f809 2004 	strb.w	r2, [r9, r4]
 8012c9e:	3401      	adds	r4, #1
 8012ca0:	e7f2      	b.n	8012c88 <__strftime+0x98c>
 8012ca2:	f000 f975 	bl	8012f90 <__tz_unlock>
 8012ca6:	f7ff bb58 	b.w	801235a <__strftime+0x5e>
 8012caa:	f108 33ff 	add.w	r3, r8, #4294967295
 8012cae:	42a3      	cmp	r3, r4
 8012cb0:	f67f ab53 	bls.w	801235a <__strftime+0x5e>
 8012cb4:	2325      	movs	r3, #37	; 0x25
 8012cb6:	e627      	b.n	8012908 <__strftime+0x60c>
 8012cb8:	f1b8 0f00 	cmp.w	r8, #0
 8012cbc:	d002      	beq.n	8012cc4 <__strftime+0x9c8>
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	f809 3004 	strb.w	r3, [r9, r4]
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	b011      	add	sp, #68	; 0x44
 8012cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ccc:	fffff894 	.word	0xfffff894
 8012cd0:	080178e3 	.word	0x080178e3
 8012cd4:	08017900 	.word	0x08017900
 8012cd8:	20000164 	.word	0x20000164

08012cdc <strftime>:
 8012cdc:	b513      	push	{r0, r1, r4, lr}
 8012cde:	4c03      	ldr	r4, [pc, #12]	; (8012cec <strftime+0x10>)
 8012ce0:	9400      	str	r4, [sp, #0]
 8012ce2:	f7ff fb0b 	bl	80122fc <__strftime>
 8012ce6:	b002      	add	sp, #8
 8012ce8:	bd10      	pop	{r4, pc}
 8012cea:	bf00      	nop
 8012cec:	200001c8 	.word	0x200001c8

08012cf0 <_strtoul_l.isra.0>:
 8012cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cf4:	4e3b      	ldr	r6, [pc, #236]	; (8012de4 <_strtoul_l.isra.0+0xf4>)
 8012cf6:	4686      	mov	lr, r0
 8012cf8:	468c      	mov	ip, r1
 8012cfa:	4660      	mov	r0, ip
 8012cfc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012d00:	5da5      	ldrb	r5, [r4, r6]
 8012d02:	f015 0508 	ands.w	r5, r5, #8
 8012d06:	d1f8      	bne.n	8012cfa <_strtoul_l.isra.0+0xa>
 8012d08:	2c2d      	cmp	r4, #45	; 0x2d
 8012d0a:	d134      	bne.n	8012d76 <_strtoul_l.isra.0+0x86>
 8012d0c:	f89c 4000 	ldrb.w	r4, [ip]
 8012d10:	f04f 0801 	mov.w	r8, #1
 8012d14:	f100 0c02 	add.w	ip, r0, #2
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d05e      	beq.n	8012dda <_strtoul_l.isra.0+0xea>
 8012d1c:	2b10      	cmp	r3, #16
 8012d1e:	d10c      	bne.n	8012d3a <_strtoul_l.isra.0+0x4a>
 8012d20:	2c30      	cmp	r4, #48	; 0x30
 8012d22:	d10a      	bne.n	8012d3a <_strtoul_l.isra.0+0x4a>
 8012d24:	f89c 0000 	ldrb.w	r0, [ip]
 8012d28:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012d2c:	2858      	cmp	r0, #88	; 0x58
 8012d2e:	d14f      	bne.n	8012dd0 <_strtoul_l.isra.0+0xe0>
 8012d30:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8012d34:	2310      	movs	r3, #16
 8012d36:	f10c 0c02 	add.w	ip, ip, #2
 8012d3a:	f04f 37ff 	mov.w	r7, #4294967295
 8012d3e:	2500      	movs	r5, #0
 8012d40:	fbb7 f7f3 	udiv	r7, r7, r3
 8012d44:	fb03 f907 	mul.w	r9, r3, r7
 8012d48:	ea6f 0909 	mvn.w	r9, r9
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8012d52:	2e09      	cmp	r6, #9
 8012d54:	d818      	bhi.n	8012d88 <_strtoul_l.isra.0+0x98>
 8012d56:	4634      	mov	r4, r6
 8012d58:	42a3      	cmp	r3, r4
 8012d5a:	dd24      	ble.n	8012da6 <_strtoul_l.isra.0+0xb6>
 8012d5c:	2d00      	cmp	r5, #0
 8012d5e:	db1f      	blt.n	8012da0 <_strtoul_l.isra.0+0xb0>
 8012d60:	4287      	cmp	r7, r0
 8012d62:	d31d      	bcc.n	8012da0 <_strtoul_l.isra.0+0xb0>
 8012d64:	d101      	bne.n	8012d6a <_strtoul_l.isra.0+0x7a>
 8012d66:	45a1      	cmp	r9, r4
 8012d68:	db1a      	blt.n	8012da0 <_strtoul_l.isra.0+0xb0>
 8012d6a:	fb00 4003 	mla	r0, r0, r3, r4
 8012d6e:	2501      	movs	r5, #1
 8012d70:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012d74:	e7eb      	b.n	8012d4e <_strtoul_l.isra.0+0x5e>
 8012d76:	2c2b      	cmp	r4, #43	; 0x2b
 8012d78:	bf08      	it	eq
 8012d7a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8012d7e:	46a8      	mov	r8, r5
 8012d80:	bf08      	it	eq
 8012d82:	f100 0c02 	addeq.w	ip, r0, #2
 8012d86:	e7c7      	b.n	8012d18 <_strtoul_l.isra.0+0x28>
 8012d88:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8012d8c:	2e19      	cmp	r6, #25
 8012d8e:	d801      	bhi.n	8012d94 <_strtoul_l.isra.0+0xa4>
 8012d90:	3c37      	subs	r4, #55	; 0x37
 8012d92:	e7e1      	b.n	8012d58 <_strtoul_l.isra.0+0x68>
 8012d94:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8012d98:	2e19      	cmp	r6, #25
 8012d9a:	d804      	bhi.n	8012da6 <_strtoul_l.isra.0+0xb6>
 8012d9c:	3c57      	subs	r4, #87	; 0x57
 8012d9e:	e7db      	b.n	8012d58 <_strtoul_l.isra.0+0x68>
 8012da0:	f04f 35ff 	mov.w	r5, #4294967295
 8012da4:	e7e4      	b.n	8012d70 <_strtoul_l.isra.0+0x80>
 8012da6:	2d00      	cmp	r5, #0
 8012da8:	da07      	bge.n	8012dba <_strtoul_l.isra.0+0xca>
 8012daa:	2322      	movs	r3, #34	; 0x22
 8012dac:	f8ce 3000 	str.w	r3, [lr]
 8012db0:	f04f 30ff 	mov.w	r0, #4294967295
 8012db4:	b942      	cbnz	r2, 8012dc8 <_strtoul_l.isra.0+0xd8>
 8012db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dba:	f1b8 0f00 	cmp.w	r8, #0
 8012dbe:	d000      	beq.n	8012dc2 <_strtoul_l.isra.0+0xd2>
 8012dc0:	4240      	negs	r0, r0
 8012dc2:	2a00      	cmp	r2, #0
 8012dc4:	d0f7      	beq.n	8012db6 <_strtoul_l.isra.0+0xc6>
 8012dc6:	b10d      	cbz	r5, 8012dcc <_strtoul_l.isra.0+0xdc>
 8012dc8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8012dcc:	6011      	str	r1, [r2, #0]
 8012dce:	e7f2      	b.n	8012db6 <_strtoul_l.isra.0+0xc6>
 8012dd0:	2430      	movs	r4, #48	; 0x30
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d1b1      	bne.n	8012d3a <_strtoul_l.isra.0+0x4a>
 8012dd6:	2308      	movs	r3, #8
 8012dd8:	e7af      	b.n	8012d3a <_strtoul_l.isra.0+0x4a>
 8012dda:	2c30      	cmp	r4, #48	; 0x30
 8012ddc:	d0a2      	beq.n	8012d24 <_strtoul_l.isra.0+0x34>
 8012dde:	230a      	movs	r3, #10
 8012de0:	e7ab      	b.n	8012d3a <_strtoul_l.isra.0+0x4a>
 8012de2:	bf00      	nop
 8012de4:	08017bad 	.word	0x08017bad

08012de8 <_strtoul_r>:
 8012de8:	f7ff bf82 	b.w	8012cf0 <_strtoul_l.isra.0>

08012dec <strtoul>:
 8012dec:	4613      	mov	r3, r2
 8012dee:	460a      	mov	r2, r1
 8012df0:	4601      	mov	r1, r0
 8012df2:	4802      	ldr	r0, [pc, #8]	; (8012dfc <strtoul+0x10>)
 8012df4:	6800      	ldr	r0, [r0, #0]
 8012df6:	f7ff bf7b 	b.w	8012cf0 <_strtoul_l.isra.0>
 8012dfa:	bf00      	nop
 8012dfc:	20000100 	.word	0x20000100

08012e00 <time>:
 8012e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e02:	4b0b      	ldr	r3, [pc, #44]	; (8012e30 <time+0x30>)
 8012e04:	2200      	movs	r2, #0
 8012e06:	4669      	mov	r1, sp
 8012e08:	4604      	mov	r4, r0
 8012e0a:	6818      	ldr	r0, [r3, #0]
 8012e0c:	f000 fc84 	bl	8013718 <_gettimeofday_r>
 8012e10:	2800      	cmp	r0, #0
 8012e12:	bfbe      	ittt	lt
 8012e14:	f04f 32ff 	movlt.w	r2, #4294967295
 8012e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e1c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8012e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e24:	b10c      	cbz	r4, 8012e2a <time+0x2a>
 8012e26:	e9c4 0100 	strd	r0, r1, [r4]
 8012e2a:	b004      	add	sp, #16
 8012e2c:	bd10      	pop	{r4, pc}
 8012e2e:	bf00      	nop
 8012e30:	20000100 	.word	0x20000100

08012e34 <__tzcalc_limits>:
 8012e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e38:	4680      	mov	r8, r0
 8012e3a:	f000 fc7f 	bl	801373c <__gettzinfo>
 8012e3e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8012e42:	4598      	cmp	r8, r3
 8012e44:	f340 8098 	ble.w	8012f78 <__tzcalc_limits+0x144>
 8012e48:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8012e4c:	4443      	add	r3, r8
 8012e4e:	109b      	asrs	r3, r3, #2
 8012e50:	f240 126d 	movw	r2, #365	; 0x16d
 8012e54:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8012e58:	fb02 3505 	mla	r5, r2, r5, r3
 8012e5c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8012e60:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8012e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e68:	441d      	add	r5, r3
 8012e6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012e6e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8012e72:	fb98 f7f3 	sdiv	r7, r8, r3
 8012e76:	fb03 8717 	mls	r7, r3, r7, r8
 8012e7a:	4442      	add	r2, r8
 8012e7c:	fab7 fc87 	clz	ip, r7
 8012e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8012e84:	f008 0303 	and.w	r3, r8, #3
 8012e88:	4415      	add	r5, r2
 8012e8a:	2264      	movs	r2, #100	; 0x64
 8012e8c:	f8c0 8004 	str.w	r8, [r0, #4]
 8012e90:	fb98 f6f2 	sdiv	r6, r8, r2
 8012e94:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8012e98:	fb02 8616 	mls	r6, r2, r6, r8
 8012e9c:	4604      	mov	r4, r0
 8012e9e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8012ea2:	9300      	str	r3, [sp, #0]
 8012ea4:	f04f 0e07 	mov.w	lr, #7
 8012ea8:	7a22      	ldrb	r2, [r4, #8]
 8012eaa:	6963      	ldr	r3, [r4, #20]
 8012eac:	2a4a      	cmp	r2, #74	; 0x4a
 8012eae:	d128      	bne.n	8012f02 <__tzcalc_limits+0xce>
 8012eb0:	9900      	ldr	r1, [sp, #0]
 8012eb2:	18ea      	adds	r2, r5, r3
 8012eb4:	b901      	cbnz	r1, 8012eb8 <__tzcalc_limits+0x84>
 8012eb6:	b906      	cbnz	r6, 8012eba <__tzcalc_limits+0x86>
 8012eb8:	bb0f      	cbnz	r7, 8012efe <__tzcalc_limits+0xca>
 8012eba:	2b3b      	cmp	r3, #59	; 0x3b
 8012ebc:	bfd4      	ite	le
 8012ebe:	2300      	movle	r3, #0
 8012ec0:	2301      	movgt	r3, #1
 8012ec2:	4413      	add	r3, r2
 8012ec4:	1e5a      	subs	r2, r3, #1
 8012ec6:	69a3      	ldr	r3, [r4, #24]
 8012ec8:	492c      	ldr	r1, [pc, #176]	; (8012f7c <__tzcalc_limits+0x148>)
 8012eca:	fb01 3202 	mla	r2, r1, r2, r3
 8012ece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012ed0:	4413      	add	r3, r2
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	17db      	asrs	r3, r3, #31
 8012ed6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8012eda:	3428      	adds	r4, #40	; 0x28
 8012edc:	45a3      	cmp	fp, r4
 8012ede:	d1e3      	bne.n	8012ea8 <__tzcalc_limits+0x74>
 8012ee0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8012ee4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8012ee8:	4294      	cmp	r4, r2
 8012eea:	eb75 0303 	sbcs.w	r3, r5, r3
 8012eee:	bfb4      	ite	lt
 8012ef0:	2301      	movlt	r3, #1
 8012ef2:	2300      	movge	r3, #0
 8012ef4:	6003      	str	r3, [r0, #0]
 8012ef6:	2001      	movs	r0, #1
 8012ef8:	b003      	add	sp, #12
 8012efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012efe:	2300      	movs	r3, #0
 8012f00:	e7df      	b.n	8012ec2 <__tzcalc_limits+0x8e>
 8012f02:	2a44      	cmp	r2, #68	; 0x44
 8012f04:	d101      	bne.n	8012f0a <__tzcalc_limits+0xd6>
 8012f06:	18ea      	adds	r2, r5, r3
 8012f08:	e7dd      	b.n	8012ec6 <__tzcalc_limits+0x92>
 8012f0a:	9a00      	ldr	r2, [sp, #0]
 8012f0c:	bb72      	cbnz	r2, 8012f6c <__tzcalc_limits+0x138>
 8012f0e:	2e00      	cmp	r6, #0
 8012f10:	bf0c      	ite	eq
 8012f12:	46e0      	moveq	r8, ip
 8012f14:	f04f 0801 	movne.w	r8, #1
 8012f18:	4919      	ldr	r1, [pc, #100]	; (8012f80 <__tzcalc_limits+0x14c>)
 8012f1a:	68e2      	ldr	r2, [r4, #12]
 8012f1c:	9201      	str	r2, [sp, #4]
 8012f1e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8012f22:	fb0a 1808 	mla	r8, sl, r8, r1
 8012f26:	462a      	mov	r2, r5
 8012f28:	f04f 0900 	mov.w	r9, #0
 8012f2c:	f1a8 0804 	sub.w	r8, r8, #4
 8012f30:	9901      	ldr	r1, [sp, #4]
 8012f32:	f109 0901 	add.w	r9, r9, #1
 8012f36:	4549      	cmp	r1, r9
 8012f38:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8012f3c:	dc18      	bgt.n	8012f70 <__tzcalc_limits+0x13c>
 8012f3e:	f102 0804 	add.w	r8, r2, #4
 8012f42:	fb98 f9fe 	sdiv	r9, r8, lr
 8012f46:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8012f4a:	eba8 0909 	sub.w	r9, r8, r9
 8012f4e:	ebb3 0909 	subs.w	r9, r3, r9
 8012f52:	6923      	ldr	r3, [r4, #16]
 8012f54:	f103 33ff 	add.w	r3, r3, #4294967295
 8012f58:	bf48      	it	mi
 8012f5a:	f109 0907 	addmi.w	r9, r9, #7
 8012f5e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8012f62:	444b      	add	r3, r9
 8012f64:	4553      	cmp	r3, sl
 8012f66:	da05      	bge.n	8012f74 <__tzcalc_limits+0x140>
 8012f68:	441a      	add	r2, r3
 8012f6a:	e7ac      	b.n	8012ec6 <__tzcalc_limits+0x92>
 8012f6c:	46e0      	mov	r8, ip
 8012f6e:	e7d3      	b.n	8012f18 <__tzcalc_limits+0xe4>
 8012f70:	4452      	add	r2, sl
 8012f72:	e7dd      	b.n	8012f30 <__tzcalc_limits+0xfc>
 8012f74:	3b07      	subs	r3, #7
 8012f76:	e7f5      	b.n	8012f64 <__tzcalc_limits+0x130>
 8012f78:	2000      	movs	r0, #0
 8012f7a:	e7bd      	b.n	8012ef8 <__tzcalc_limits+0xc4>
 8012f7c:	00015180 	.word	0x00015180
 8012f80:	080177f4 	.word	0x080177f4

08012f84 <__tz_lock>:
 8012f84:	4801      	ldr	r0, [pc, #4]	; (8012f8c <__tz_lock+0x8>)
 8012f86:	f7fe bee7 	b.w	8011d58 <__retarget_lock_acquire>
 8012f8a:	bf00      	nop
 8012f8c:	20000b9f 	.word	0x20000b9f

08012f90 <__tz_unlock>:
 8012f90:	4801      	ldr	r0, [pc, #4]	; (8012f98 <__tz_unlock+0x8>)
 8012f92:	f7fe bee3 	b.w	8011d5c <__retarget_lock_release>
 8012f96:	bf00      	nop
 8012f98:	20000b9f 	.word	0x20000b9f

08012f9c <_tzset_unlocked>:
 8012f9c:	4b01      	ldr	r3, [pc, #4]	; (8012fa4 <_tzset_unlocked+0x8>)
 8012f9e:	6818      	ldr	r0, [r3, #0]
 8012fa0:	f000 b802 	b.w	8012fa8 <_tzset_unlocked_r>
 8012fa4:	20000100 	.word	0x20000100

08012fa8 <_tzset_unlocked_r>:
 8012fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fac:	b08d      	sub	sp, #52	; 0x34
 8012fae:	4607      	mov	r7, r0
 8012fb0:	f000 fbc4 	bl	801373c <__gettzinfo>
 8012fb4:	49ae      	ldr	r1, [pc, #696]	; (8013270 <_tzset_unlocked_r+0x2c8>)
 8012fb6:	4eaf      	ldr	r6, [pc, #700]	; (8013274 <_tzset_unlocked_r+0x2cc>)
 8012fb8:	4605      	mov	r5, r0
 8012fba:	4638      	mov	r0, r7
 8012fbc:	f000 fba4 	bl	8013708 <_getenv_r>
 8012fc0:	4604      	mov	r4, r0
 8012fc2:	b970      	cbnz	r0, 8012fe2 <_tzset_unlocked_r+0x3a>
 8012fc4:	4bac      	ldr	r3, [pc, #688]	; (8013278 <_tzset_unlocked_r+0x2d0>)
 8012fc6:	4aad      	ldr	r2, [pc, #692]	; (801327c <_tzset_unlocked_r+0x2d4>)
 8012fc8:	6018      	str	r0, [r3, #0]
 8012fca:	4bad      	ldr	r3, [pc, #692]	; (8013280 <_tzset_unlocked_r+0x2d8>)
 8012fcc:	6018      	str	r0, [r3, #0]
 8012fce:	4bad      	ldr	r3, [pc, #692]	; (8013284 <_tzset_unlocked_r+0x2dc>)
 8012fd0:	6830      	ldr	r0, [r6, #0]
 8012fd2:	e9c3 2200 	strd	r2, r2, [r3]
 8012fd6:	f7fe ff2f 	bl	8011e38 <free>
 8012fda:	6034      	str	r4, [r6, #0]
 8012fdc:	b00d      	add	sp, #52	; 0x34
 8012fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe2:	6831      	ldr	r1, [r6, #0]
 8012fe4:	2900      	cmp	r1, #0
 8012fe6:	d15f      	bne.n	80130a8 <_tzset_unlocked_r+0x100>
 8012fe8:	6830      	ldr	r0, [r6, #0]
 8012fea:	f7fe ff25 	bl	8011e38 <free>
 8012fee:	4620      	mov	r0, r4
 8012ff0:	f7ed f924 	bl	800023c <strlen>
 8012ff4:	1c41      	adds	r1, r0, #1
 8012ff6:	4638      	mov	r0, r7
 8012ff8:	f7fe ff8c 	bl	8011f14 <_malloc_r>
 8012ffc:	6030      	str	r0, [r6, #0]
 8012ffe:	2800      	cmp	r0, #0
 8013000:	d157      	bne.n	80130b2 <_tzset_unlocked_r+0x10a>
 8013002:	7823      	ldrb	r3, [r4, #0]
 8013004:	4aa0      	ldr	r2, [pc, #640]	; (8013288 <_tzset_unlocked_r+0x2e0>)
 8013006:	49a1      	ldr	r1, [pc, #644]	; (801328c <_tzset_unlocked_r+0x2e4>)
 8013008:	2b3a      	cmp	r3, #58	; 0x3a
 801300a:	bf08      	it	eq
 801300c:	3401      	addeq	r4, #1
 801300e:	ae0a      	add	r6, sp, #40	; 0x28
 8013010:	4633      	mov	r3, r6
 8013012:	4620      	mov	r0, r4
 8013014:	f001 f988 	bl	8014328 <siscanf>
 8013018:	2800      	cmp	r0, #0
 801301a:	dddf      	ble.n	8012fdc <_tzset_unlocked_r+0x34>
 801301c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801301e:	18e7      	adds	r7, r4, r3
 8013020:	5ce3      	ldrb	r3, [r4, r3]
 8013022:	2b2d      	cmp	r3, #45	; 0x2d
 8013024:	d149      	bne.n	80130ba <_tzset_unlocked_r+0x112>
 8013026:	3701      	adds	r7, #1
 8013028:	f04f 34ff 	mov.w	r4, #4294967295
 801302c:	f10d 0a20 	add.w	sl, sp, #32
 8013030:	f10d 0b1e 	add.w	fp, sp, #30
 8013034:	f04f 0800 	mov.w	r8, #0
 8013038:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801303c:	4994      	ldr	r1, [pc, #592]	; (8013290 <_tzset_unlocked_r+0x2e8>)
 801303e:	9603      	str	r6, [sp, #12]
 8013040:	f8cd b000 	str.w	fp, [sp]
 8013044:	4633      	mov	r3, r6
 8013046:	aa07      	add	r2, sp, #28
 8013048:	4638      	mov	r0, r7
 801304a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801304e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8013052:	f001 f969 	bl	8014328 <siscanf>
 8013056:	4540      	cmp	r0, r8
 8013058:	ddc0      	ble.n	8012fdc <_tzset_unlocked_r+0x34>
 801305a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801305e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013062:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801329c <_tzset_unlocked_r+0x2f4>
 8013066:	213c      	movs	r1, #60	; 0x3c
 8013068:	fb01 2203 	mla	r2, r1, r3, r2
 801306c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013070:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013074:	fb01 2303 	mla	r3, r1, r3, r2
 8013078:	435c      	muls	r4, r3
 801307a:	62ac      	str	r4, [r5, #40]	; 0x28
 801307c:	4c81      	ldr	r4, [pc, #516]	; (8013284 <_tzset_unlocked_r+0x2dc>)
 801307e:	4b82      	ldr	r3, [pc, #520]	; (8013288 <_tzset_unlocked_r+0x2e0>)
 8013080:	6023      	str	r3, [r4, #0]
 8013082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013084:	4981      	ldr	r1, [pc, #516]	; (801328c <_tzset_unlocked_r+0x2e4>)
 8013086:	441f      	add	r7, r3
 8013088:	464a      	mov	r2, r9
 801308a:	4633      	mov	r3, r6
 801308c:	4638      	mov	r0, r7
 801308e:	f001 f94b 	bl	8014328 <siscanf>
 8013092:	4540      	cmp	r0, r8
 8013094:	dc16      	bgt.n	80130c4 <_tzset_unlocked_r+0x11c>
 8013096:	6823      	ldr	r3, [r4, #0]
 8013098:	6063      	str	r3, [r4, #4]
 801309a:	4b77      	ldr	r3, [pc, #476]	; (8013278 <_tzset_unlocked_r+0x2d0>)
 801309c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801309e:	601a      	str	r2, [r3, #0]
 80130a0:	4b77      	ldr	r3, [pc, #476]	; (8013280 <_tzset_unlocked_r+0x2d8>)
 80130a2:	f8c3 8000 	str.w	r8, [r3]
 80130a6:	e799      	b.n	8012fdc <_tzset_unlocked_r+0x34>
 80130a8:	f7ed f8d0 	bl	800024c <strcmp>
 80130ac:	2800      	cmp	r0, #0
 80130ae:	d19b      	bne.n	8012fe8 <_tzset_unlocked_r+0x40>
 80130b0:	e794      	b.n	8012fdc <_tzset_unlocked_r+0x34>
 80130b2:	4621      	mov	r1, r4
 80130b4:	f001 f964 	bl	8014380 <strcpy>
 80130b8:	e7a3      	b.n	8013002 <_tzset_unlocked_r+0x5a>
 80130ba:	2b2b      	cmp	r3, #43	; 0x2b
 80130bc:	bf08      	it	eq
 80130be:	3701      	addeq	r7, #1
 80130c0:	2401      	movs	r4, #1
 80130c2:	e7b3      	b.n	801302c <_tzset_unlocked_r+0x84>
 80130c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130c6:	f8c4 9004 	str.w	r9, [r4, #4]
 80130ca:	18fc      	adds	r4, r7, r3
 80130cc:	5cfb      	ldrb	r3, [r7, r3]
 80130ce:	2b2d      	cmp	r3, #45	; 0x2d
 80130d0:	f040 808b 	bne.w	80131ea <_tzset_unlocked_r+0x242>
 80130d4:	3401      	adds	r4, #1
 80130d6:	f04f 37ff 	mov.w	r7, #4294967295
 80130da:	2300      	movs	r3, #0
 80130dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80130e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80130e4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80130e8:	930a      	str	r3, [sp, #40]	; 0x28
 80130ea:	e9cd a602 	strd	sl, r6, [sp, #8]
 80130ee:	e9cd b600 	strd	fp, r6, [sp]
 80130f2:	4967      	ldr	r1, [pc, #412]	; (8013290 <_tzset_unlocked_r+0x2e8>)
 80130f4:	4633      	mov	r3, r6
 80130f6:	aa07      	add	r2, sp, #28
 80130f8:	4620      	mov	r0, r4
 80130fa:	f001 f915 	bl	8014328 <siscanf>
 80130fe:	2800      	cmp	r0, #0
 8013100:	dc78      	bgt.n	80131f4 <_tzset_unlocked_r+0x24c>
 8013102:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8013104:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8013108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801310a:	652f      	str	r7, [r5, #80]	; 0x50
 801310c:	441c      	add	r4, r3
 801310e:	462f      	mov	r7, r5
 8013110:	f04f 0900 	mov.w	r9, #0
 8013114:	7823      	ldrb	r3, [r4, #0]
 8013116:	2b2c      	cmp	r3, #44	; 0x2c
 8013118:	bf08      	it	eq
 801311a:	3401      	addeq	r4, #1
 801311c:	f894 8000 	ldrb.w	r8, [r4]
 8013120:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8013124:	d178      	bne.n	8013218 <_tzset_unlocked_r+0x270>
 8013126:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801312a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801312e:	ab09      	add	r3, sp, #36	; 0x24
 8013130:	9300      	str	r3, [sp, #0]
 8013132:	4958      	ldr	r1, [pc, #352]	; (8013294 <_tzset_unlocked_r+0x2ec>)
 8013134:	9603      	str	r6, [sp, #12]
 8013136:	4633      	mov	r3, r6
 8013138:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801313c:	4620      	mov	r0, r4
 801313e:	f001 f8f3 	bl	8014328 <siscanf>
 8013142:	2803      	cmp	r0, #3
 8013144:	f47f af4a 	bne.w	8012fdc <_tzset_unlocked_r+0x34>
 8013148:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801314c:	1e4b      	subs	r3, r1, #1
 801314e:	2b0b      	cmp	r3, #11
 8013150:	f63f af44 	bhi.w	8012fdc <_tzset_unlocked_r+0x34>
 8013154:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8013158:	1e53      	subs	r3, r2, #1
 801315a:	2b04      	cmp	r3, #4
 801315c:	f63f af3e 	bhi.w	8012fdc <_tzset_unlocked_r+0x34>
 8013160:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013164:	2b06      	cmp	r3, #6
 8013166:	f63f af39 	bhi.w	8012fdc <_tzset_unlocked_r+0x34>
 801316a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801316e:	f887 8008 	strb.w	r8, [r7, #8]
 8013172:	617b      	str	r3, [r7, #20]
 8013174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013176:	eb04 0803 	add.w	r8, r4, r3
 801317a:	2302      	movs	r3, #2
 801317c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013180:	2300      	movs	r3, #0
 8013182:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013186:	f8ad 3020 	strh.w	r3, [sp, #32]
 801318a:	930a      	str	r3, [sp, #40]	; 0x28
 801318c:	f898 3000 	ldrb.w	r3, [r8]
 8013190:	2b2f      	cmp	r3, #47	; 0x2f
 8013192:	d109      	bne.n	80131a8 <_tzset_unlocked_r+0x200>
 8013194:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013198:	e9cd b600 	strd	fp, r6, [sp]
 801319c:	493e      	ldr	r1, [pc, #248]	; (8013298 <_tzset_unlocked_r+0x2f0>)
 801319e:	4633      	mov	r3, r6
 80131a0:	aa07      	add	r2, sp, #28
 80131a2:	4640      	mov	r0, r8
 80131a4:	f001 f8c0 	bl	8014328 <siscanf>
 80131a8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80131ac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80131b0:	213c      	movs	r1, #60	; 0x3c
 80131b2:	fb01 2203 	mla	r2, r1, r3, r2
 80131b6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80131ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80131be:	fb01 2303 	mla	r3, r1, r3, r2
 80131c2:	61bb      	str	r3, [r7, #24]
 80131c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80131c6:	3728      	adds	r7, #40	; 0x28
 80131c8:	4444      	add	r4, r8
 80131ca:	f1b9 0f00 	cmp.w	r9, #0
 80131ce:	d020      	beq.n	8013212 <_tzset_unlocked_r+0x26a>
 80131d0:	6868      	ldr	r0, [r5, #4]
 80131d2:	f7ff fe2f 	bl	8012e34 <__tzcalc_limits>
 80131d6:	4b28      	ldr	r3, [pc, #160]	; (8013278 <_tzset_unlocked_r+0x2d0>)
 80131d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80131da:	601a      	str	r2, [r3, #0]
 80131dc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80131de:	1a9b      	subs	r3, r3, r2
 80131e0:	4a27      	ldr	r2, [pc, #156]	; (8013280 <_tzset_unlocked_r+0x2d8>)
 80131e2:	bf18      	it	ne
 80131e4:	2301      	movne	r3, #1
 80131e6:	6013      	str	r3, [r2, #0]
 80131e8:	e6f8      	b.n	8012fdc <_tzset_unlocked_r+0x34>
 80131ea:	2b2b      	cmp	r3, #43	; 0x2b
 80131ec:	bf08      	it	eq
 80131ee:	3401      	addeq	r4, #1
 80131f0:	2701      	movs	r7, #1
 80131f2:	e772      	b.n	80130da <_tzset_unlocked_r+0x132>
 80131f4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80131f8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80131fc:	213c      	movs	r1, #60	; 0x3c
 80131fe:	fb01 2203 	mla	r2, r1, r3, r2
 8013202:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013206:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801320a:	fb01 2303 	mla	r3, r1, r3, r2
 801320e:	435f      	muls	r7, r3
 8013210:	e77a      	b.n	8013108 <_tzset_unlocked_r+0x160>
 8013212:	f04f 0901 	mov.w	r9, #1
 8013216:	e77d      	b.n	8013114 <_tzset_unlocked_r+0x16c>
 8013218:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801321c:	bf06      	itte	eq
 801321e:	3401      	addeq	r4, #1
 8013220:	4643      	moveq	r3, r8
 8013222:	2344      	movne	r3, #68	; 0x44
 8013224:	220a      	movs	r2, #10
 8013226:	a90b      	add	r1, sp, #44	; 0x2c
 8013228:	4620      	mov	r0, r4
 801322a:	9305      	str	r3, [sp, #20]
 801322c:	f7ff fdde 	bl	8012dec <strtoul>
 8013230:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8013234:	9b05      	ldr	r3, [sp, #20]
 8013236:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801323a:	45a0      	cmp	r8, r4
 801323c:	d114      	bne.n	8013268 <_tzset_unlocked_r+0x2c0>
 801323e:	234d      	movs	r3, #77	; 0x4d
 8013240:	f1b9 0f00 	cmp.w	r9, #0
 8013244:	d107      	bne.n	8013256 <_tzset_unlocked_r+0x2ae>
 8013246:	722b      	strb	r3, [r5, #8]
 8013248:	2103      	movs	r1, #3
 801324a:	2302      	movs	r3, #2
 801324c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8013250:	f8c5 9014 	str.w	r9, [r5, #20]
 8013254:	e791      	b.n	801317a <_tzset_unlocked_r+0x1d2>
 8013256:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801325a:	220b      	movs	r2, #11
 801325c:	2301      	movs	r3, #1
 801325e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8013262:	2300      	movs	r3, #0
 8013264:	63eb      	str	r3, [r5, #60]	; 0x3c
 8013266:	e788      	b.n	801317a <_tzset_unlocked_r+0x1d2>
 8013268:	b280      	uxth	r0, r0
 801326a:	723b      	strb	r3, [r7, #8]
 801326c:	6178      	str	r0, [r7, #20]
 801326e:	e784      	b.n	801317a <_tzset_unlocked_r+0x1d2>
 8013270:	08017b34 	.word	0x08017b34
 8013274:	20000af8 	.word	0x20000af8
 8013278:	20000b00 	.word	0x20000b00
 801327c:	08017b37 	.word	0x08017b37
 8013280:	20000afc 	.word	0x20000afc
 8013284:	20000164 	.word	0x20000164
 8013288:	20000aeb 	.word	0x20000aeb
 801328c:	08017b3b 	.word	0x08017b3b
 8013290:	08017b5e 	.word	0x08017b5e
 8013294:	08017b4a 	.word	0x08017b4a
 8013298:	08017b5d 	.word	0x08017b5d
 801329c:	20000ae0 	.word	0x20000ae0

080132a0 <_vsniprintf_r>:
 80132a0:	b530      	push	{r4, r5, lr}
 80132a2:	1e14      	subs	r4, r2, #0
 80132a4:	4605      	mov	r5, r0
 80132a6:	b09b      	sub	sp, #108	; 0x6c
 80132a8:	4618      	mov	r0, r3
 80132aa:	da05      	bge.n	80132b8 <_vsniprintf_r+0x18>
 80132ac:	238b      	movs	r3, #139	; 0x8b
 80132ae:	602b      	str	r3, [r5, #0]
 80132b0:	f04f 30ff 	mov.w	r0, #4294967295
 80132b4:	b01b      	add	sp, #108	; 0x6c
 80132b6:	bd30      	pop	{r4, r5, pc}
 80132b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80132bc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80132c0:	bf14      	ite	ne
 80132c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80132c6:	4623      	moveq	r3, r4
 80132c8:	9302      	str	r3, [sp, #8]
 80132ca:	9305      	str	r3, [sp, #20]
 80132cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132d0:	9100      	str	r1, [sp, #0]
 80132d2:	9104      	str	r1, [sp, #16]
 80132d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80132d8:	4602      	mov	r2, r0
 80132da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80132dc:	4669      	mov	r1, sp
 80132de:	4628      	mov	r0, r5
 80132e0:	f000 fba6 	bl	8013a30 <_svfiprintf_r>
 80132e4:	1c43      	adds	r3, r0, #1
 80132e6:	bfbc      	itt	lt
 80132e8:	238b      	movlt	r3, #139	; 0x8b
 80132ea:	602b      	strlt	r3, [r5, #0]
 80132ec:	2c00      	cmp	r4, #0
 80132ee:	d0e1      	beq.n	80132b4 <_vsniprintf_r+0x14>
 80132f0:	9b00      	ldr	r3, [sp, #0]
 80132f2:	2200      	movs	r2, #0
 80132f4:	701a      	strb	r2, [r3, #0]
 80132f6:	e7dd      	b.n	80132b4 <_vsniprintf_r+0x14>

080132f8 <vsniprintf>:
 80132f8:	b507      	push	{r0, r1, r2, lr}
 80132fa:	9300      	str	r3, [sp, #0]
 80132fc:	4613      	mov	r3, r2
 80132fe:	460a      	mov	r2, r1
 8013300:	4601      	mov	r1, r0
 8013302:	4803      	ldr	r0, [pc, #12]	; (8013310 <vsniprintf+0x18>)
 8013304:	6800      	ldr	r0, [r0, #0]
 8013306:	f7ff ffcb 	bl	80132a0 <_vsniprintf_r>
 801330a:	b003      	add	sp, #12
 801330c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013310:	20000100 	.word	0x20000100

08013314 <__swbuf_r>:
 8013314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013316:	460e      	mov	r6, r1
 8013318:	4614      	mov	r4, r2
 801331a:	4605      	mov	r5, r0
 801331c:	b118      	cbz	r0, 8013326 <__swbuf_r+0x12>
 801331e:	6983      	ldr	r3, [r0, #24]
 8013320:	b90b      	cbnz	r3, 8013326 <__swbuf_r+0x12>
 8013322:	f7fe f967 	bl	80115f4 <__sinit>
 8013326:	4b21      	ldr	r3, [pc, #132]	; (80133ac <__swbuf_r+0x98>)
 8013328:	429c      	cmp	r4, r3
 801332a:	d12b      	bne.n	8013384 <__swbuf_r+0x70>
 801332c:	686c      	ldr	r4, [r5, #4]
 801332e:	69a3      	ldr	r3, [r4, #24]
 8013330:	60a3      	str	r3, [r4, #8]
 8013332:	89a3      	ldrh	r3, [r4, #12]
 8013334:	071a      	lsls	r2, r3, #28
 8013336:	d52f      	bpl.n	8013398 <__swbuf_r+0x84>
 8013338:	6923      	ldr	r3, [r4, #16]
 801333a:	b36b      	cbz	r3, 8013398 <__swbuf_r+0x84>
 801333c:	6923      	ldr	r3, [r4, #16]
 801333e:	6820      	ldr	r0, [r4, #0]
 8013340:	1ac0      	subs	r0, r0, r3
 8013342:	6963      	ldr	r3, [r4, #20]
 8013344:	b2f6      	uxtb	r6, r6
 8013346:	4283      	cmp	r3, r0
 8013348:	4637      	mov	r7, r6
 801334a:	dc04      	bgt.n	8013356 <__swbuf_r+0x42>
 801334c:	4621      	mov	r1, r4
 801334e:	4628      	mov	r0, r5
 8013350:	f7fe f8aa 	bl	80114a8 <_fflush_r>
 8013354:	bb30      	cbnz	r0, 80133a4 <__swbuf_r+0x90>
 8013356:	68a3      	ldr	r3, [r4, #8]
 8013358:	3b01      	subs	r3, #1
 801335a:	60a3      	str	r3, [r4, #8]
 801335c:	6823      	ldr	r3, [r4, #0]
 801335e:	1c5a      	adds	r2, r3, #1
 8013360:	6022      	str	r2, [r4, #0]
 8013362:	701e      	strb	r6, [r3, #0]
 8013364:	6963      	ldr	r3, [r4, #20]
 8013366:	3001      	adds	r0, #1
 8013368:	4283      	cmp	r3, r0
 801336a:	d004      	beq.n	8013376 <__swbuf_r+0x62>
 801336c:	89a3      	ldrh	r3, [r4, #12]
 801336e:	07db      	lsls	r3, r3, #31
 8013370:	d506      	bpl.n	8013380 <__swbuf_r+0x6c>
 8013372:	2e0a      	cmp	r6, #10
 8013374:	d104      	bne.n	8013380 <__swbuf_r+0x6c>
 8013376:	4621      	mov	r1, r4
 8013378:	4628      	mov	r0, r5
 801337a:	f7fe f895 	bl	80114a8 <_fflush_r>
 801337e:	b988      	cbnz	r0, 80133a4 <__swbuf_r+0x90>
 8013380:	4638      	mov	r0, r7
 8013382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013384:	4b0a      	ldr	r3, [pc, #40]	; (80133b0 <__swbuf_r+0x9c>)
 8013386:	429c      	cmp	r4, r3
 8013388:	d101      	bne.n	801338e <__swbuf_r+0x7a>
 801338a:	68ac      	ldr	r4, [r5, #8]
 801338c:	e7cf      	b.n	801332e <__swbuf_r+0x1a>
 801338e:	4b09      	ldr	r3, [pc, #36]	; (80133b4 <__swbuf_r+0xa0>)
 8013390:	429c      	cmp	r4, r3
 8013392:	bf08      	it	eq
 8013394:	68ec      	ldreq	r4, [r5, #12]
 8013396:	e7ca      	b.n	801332e <__swbuf_r+0x1a>
 8013398:	4621      	mov	r1, r4
 801339a:	4628      	mov	r0, r5
 801339c:	f000 f81e 	bl	80133dc <__swsetup_r>
 80133a0:	2800      	cmp	r0, #0
 80133a2:	d0cb      	beq.n	801333c <__swbuf_r+0x28>
 80133a4:	f04f 37ff 	mov.w	r7, #4294967295
 80133a8:	e7ea      	b.n	8013380 <__swbuf_r+0x6c>
 80133aa:	bf00      	nop
 80133ac:	08017738 	.word	0x08017738
 80133b0:	08017758 	.word	0x08017758
 80133b4:	08017718 	.word	0x08017718

080133b8 <_write_r>:
 80133b8:	b538      	push	{r3, r4, r5, lr}
 80133ba:	4d07      	ldr	r5, [pc, #28]	; (80133d8 <_write_r+0x20>)
 80133bc:	4604      	mov	r4, r0
 80133be:	4608      	mov	r0, r1
 80133c0:	4611      	mov	r1, r2
 80133c2:	2200      	movs	r2, #0
 80133c4:	602a      	str	r2, [r5, #0]
 80133c6:	461a      	mov	r2, r3
 80133c8:	f7ed fcdc 	bl	8000d84 <_write>
 80133cc:	1c43      	adds	r3, r0, #1
 80133ce:	d102      	bne.n	80133d6 <_write_r+0x1e>
 80133d0:	682b      	ldr	r3, [r5, #0]
 80133d2:	b103      	cbz	r3, 80133d6 <_write_r+0x1e>
 80133d4:	6023      	str	r3, [r4, #0]
 80133d6:	bd38      	pop	{r3, r4, r5, pc}
 80133d8:	20000ba4 	.word	0x20000ba4

080133dc <__swsetup_r>:
 80133dc:	4b32      	ldr	r3, [pc, #200]	; (80134a8 <__swsetup_r+0xcc>)
 80133de:	b570      	push	{r4, r5, r6, lr}
 80133e0:	681d      	ldr	r5, [r3, #0]
 80133e2:	4606      	mov	r6, r0
 80133e4:	460c      	mov	r4, r1
 80133e6:	b125      	cbz	r5, 80133f2 <__swsetup_r+0x16>
 80133e8:	69ab      	ldr	r3, [r5, #24]
 80133ea:	b913      	cbnz	r3, 80133f2 <__swsetup_r+0x16>
 80133ec:	4628      	mov	r0, r5
 80133ee:	f7fe f901 	bl	80115f4 <__sinit>
 80133f2:	4b2e      	ldr	r3, [pc, #184]	; (80134ac <__swsetup_r+0xd0>)
 80133f4:	429c      	cmp	r4, r3
 80133f6:	d10f      	bne.n	8013418 <__swsetup_r+0x3c>
 80133f8:	686c      	ldr	r4, [r5, #4]
 80133fa:	89a3      	ldrh	r3, [r4, #12]
 80133fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013400:	0719      	lsls	r1, r3, #28
 8013402:	d42c      	bmi.n	801345e <__swsetup_r+0x82>
 8013404:	06dd      	lsls	r5, r3, #27
 8013406:	d411      	bmi.n	801342c <__swsetup_r+0x50>
 8013408:	2309      	movs	r3, #9
 801340a:	6033      	str	r3, [r6, #0]
 801340c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013410:	81a3      	strh	r3, [r4, #12]
 8013412:	f04f 30ff 	mov.w	r0, #4294967295
 8013416:	e03e      	b.n	8013496 <__swsetup_r+0xba>
 8013418:	4b25      	ldr	r3, [pc, #148]	; (80134b0 <__swsetup_r+0xd4>)
 801341a:	429c      	cmp	r4, r3
 801341c:	d101      	bne.n	8013422 <__swsetup_r+0x46>
 801341e:	68ac      	ldr	r4, [r5, #8]
 8013420:	e7eb      	b.n	80133fa <__swsetup_r+0x1e>
 8013422:	4b24      	ldr	r3, [pc, #144]	; (80134b4 <__swsetup_r+0xd8>)
 8013424:	429c      	cmp	r4, r3
 8013426:	bf08      	it	eq
 8013428:	68ec      	ldreq	r4, [r5, #12]
 801342a:	e7e6      	b.n	80133fa <__swsetup_r+0x1e>
 801342c:	0758      	lsls	r0, r3, #29
 801342e:	d512      	bpl.n	8013456 <__swsetup_r+0x7a>
 8013430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013432:	b141      	cbz	r1, 8013446 <__swsetup_r+0x6a>
 8013434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013438:	4299      	cmp	r1, r3
 801343a:	d002      	beq.n	8013442 <__swsetup_r+0x66>
 801343c:	4630      	mov	r0, r6
 801343e:	f7fe fd19 	bl	8011e74 <_free_r>
 8013442:	2300      	movs	r3, #0
 8013444:	6363      	str	r3, [r4, #52]	; 0x34
 8013446:	89a3      	ldrh	r3, [r4, #12]
 8013448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801344c:	81a3      	strh	r3, [r4, #12]
 801344e:	2300      	movs	r3, #0
 8013450:	6063      	str	r3, [r4, #4]
 8013452:	6923      	ldr	r3, [r4, #16]
 8013454:	6023      	str	r3, [r4, #0]
 8013456:	89a3      	ldrh	r3, [r4, #12]
 8013458:	f043 0308 	orr.w	r3, r3, #8
 801345c:	81a3      	strh	r3, [r4, #12]
 801345e:	6923      	ldr	r3, [r4, #16]
 8013460:	b94b      	cbnz	r3, 8013476 <__swsetup_r+0x9a>
 8013462:	89a3      	ldrh	r3, [r4, #12]
 8013464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801346c:	d003      	beq.n	8013476 <__swsetup_r+0x9a>
 801346e:	4621      	mov	r1, r4
 8013470:	4630      	mov	r0, r6
 8013472:	f7fe fc99 	bl	8011da8 <__smakebuf_r>
 8013476:	89a0      	ldrh	r0, [r4, #12]
 8013478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801347c:	f010 0301 	ands.w	r3, r0, #1
 8013480:	d00a      	beq.n	8013498 <__swsetup_r+0xbc>
 8013482:	2300      	movs	r3, #0
 8013484:	60a3      	str	r3, [r4, #8]
 8013486:	6963      	ldr	r3, [r4, #20]
 8013488:	425b      	negs	r3, r3
 801348a:	61a3      	str	r3, [r4, #24]
 801348c:	6923      	ldr	r3, [r4, #16]
 801348e:	b943      	cbnz	r3, 80134a2 <__swsetup_r+0xc6>
 8013490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013494:	d1ba      	bne.n	801340c <__swsetup_r+0x30>
 8013496:	bd70      	pop	{r4, r5, r6, pc}
 8013498:	0781      	lsls	r1, r0, #30
 801349a:	bf58      	it	pl
 801349c:	6963      	ldrpl	r3, [r4, #20]
 801349e:	60a3      	str	r3, [r4, #8]
 80134a0:	e7f4      	b.n	801348c <__swsetup_r+0xb0>
 80134a2:	2000      	movs	r0, #0
 80134a4:	e7f7      	b.n	8013496 <__swsetup_r+0xba>
 80134a6:	bf00      	nop
 80134a8:	20000100 	.word	0x20000100
 80134ac:	08017738 	.word	0x08017738
 80134b0:	08017758 	.word	0x08017758
 80134b4:	08017718 	.word	0x08017718

080134b8 <__register_exitproc>:
 80134b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134bc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8013578 <__register_exitproc+0xc0>
 80134c0:	4606      	mov	r6, r0
 80134c2:	f8d8 0000 	ldr.w	r0, [r8]
 80134c6:	461f      	mov	r7, r3
 80134c8:	460d      	mov	r5, r1
 80134ca:	4691      	mov	r9, r2
 80134cc:	f7fe fc45 	bl	8011d5a <__retarget_lock_acquire_recursive>
 80134d0:	4b25      	ldr	r3, [pc, #148]	; (8013568 <__register_exitproc+0xb0>)
 80134d2:	681c      	ldr	r4, [r3, #0]
 80134d4:	b934      	cbnz	r4, 80134e4 <__register_exitproc+0x2c>
 80134d6:	4c25      	ldr	r4, [pc, #148]	; (801356c <__register_exitproc+0xb4>)
 80134d8:	601c      	str	r4, [r3, #0]
 80134da:	4b25      	ldr	r3, [pc, #148]	; (8013570 <__register_exitproc+0xb8>)
 80134dc:	b113      	cbz	r3, 80134e4 <__register_exitproc+0x2c>
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80134e4:	6863      	ldr	r3, [r4, #4]
 80134e6:	2b1f      	cmp	r3, #31
 80134e8:	dd07      	ble.n	80134fa <__register_exitproc+0x42>
 80134ea:	f8d8 0000 	ldr.w	r0, [r8]
 80134ee:	f7fe fc36 	bl	8011d5e <__retarget_lock_release_recursive>
 80134f2:	f04f 30ff 	mov.w	r0, #4294967295
 80134f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134fa:	b34e      	cbz	r6, 8013550 <__register_exitproc+0x98>
 80134fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8013500:	b988      	cbnz	r0, 8013526 <__register_exitproc+0x6e>
 8013502:	4b1c      	ldr	r3, [pc, #112]	; (8013574 <__register_exitproc+0xbc>)
 8013504:	b923      	cbnz	r3, 8013510 <__register_exitproc+0x58>
 8013506:	f8d8 0000 	ldr.w	r0, [r8]
 801350a:	f7fe fc27 	bl	8011d5c <__retarget_lock_release>
 801350e:	e7f0      	b.n	80134f2 <__register_exitproc+0x3a>
 8013510:	f44f 7084 	mov.w	r0, #264	; 0x108
 8013514:	f7fe fc88 	bl	8011e28 <malloc>
 8013518:	2800      	cmp	r0, #0
 801351a:	d0f4      	beq.n	8013506 <__register_exitproc+0x4e>
 801351c:	2300      	movs	r3, #0
 801351e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8013522:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8013526:	6863      	ldr	r3, [r4, #4]
 8013528:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801352c:	2201      	movs	r2, #1
 801352e:	409a      	lsls	r2, r3
 8013530:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8013534:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8013538:	4313      	orrs	r3, r2
 801353a:	2e02      	cmp	r6, #2
 801353c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8013540:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8013544:	bf02      	ittt	eq
 8013546:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801354a:	431a      	orreq	r2, r3
 801354c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8013550:	6863      	ldr	r3, [r4, #4]
 8013552:	f8d8 0000 	ldr.w	r0, [r8]
 8013556:	1c5a      	adds	r2, r3, #1
 8013558:	3302      	adds	r3, #2
 801355a:	6062      	str	r2, [r4, #4]
 801355c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8013560:	f7fe fbfd 	bl	8011d5e <__retarget_lock_release_recursive>
 8013564:	2000      	movs	r0, #0
 8013566:	e7c6      	b.n	80134f6 <__register_exitproc+0x3e>
 8013568:	20000b90 	.word	0x20000b90
 801356c:	20000b04 	.word	0x20000b04
 8013570:	00000000 	.word	0x00000000
 8013574:	08011e29 	.word	0x08011e29
 8013578:	2000016c 	.word	0x2000016c

0801357c <abs>:
 801357c:	2800      	cmp	r0, #0
 801357e:	bfb8      	it	lt
 8013580:	4240      	neglt	r0, r0
 8013582:	4770      	bx	lr

08013584 <__assert_func>:
 8013584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013586:	4614      	mov	r4, r2
 8013588:	461a      	mov	r2, r3
 801358a:	4b09      	ldr	r3, [pc, #36]	; (80135b0 <__assert_func+0x2c>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	4605      	mov	r5, r0
 8013590:	68d8      	ldr	r0, [r3, #12]
 8013592:	b14c      	cbz	r4, 80135a8 <__assert_func+0x24>
 8013594:	4b07      	ldr	r3, [pc, #28]	; (80135b4 <__assert_func+0x30>)
 8013596:	9100      	str	r1, [sp, #0]
 8013598:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801359c:	4906      	ldr	r1, [pc, #24]	; (80135b8 <__assert_func+0x34>)
 801359e:	462b      	mov	r3, r5
 80135a0:	f000 f854 	bl	801364c <fiprintf>
 80135a4:	f7fd fe72 	bl	801128c <abort>
 80135a8:	4b04      	ldr	r3, [pc, #16]	; (80135bc <__assert_func+0x38>)
 80135aa:	461c      	mov	r4, r3
 80135ac:	e7f3      	b.n	8013596 <__assert_func+0x12>
 80135ae:	bf00      	nop
 80135b0:	20000100 	.word	0x20000100
 80135b4:	08017b70 	.word	0x08017b70
 80135b8:	08017b7d 	.word	0x08017b7d
 80135bc:	08017bab 	.word	0x08017bab

080135c0 <_close_r>:
 80135c0:	b538      	push	{r3, r4, r5, lr}
 80135c2:	4d06      	ldr	r5, [pc, #24]	; (80135dc <_close_r+0x1c>)
 80135c4:	2300      	movs	r3, #0
 80135c6:	4604      	mov	r4, r0
 80135c8:	4608      	mov	r0, r1
 80135ca:	602b      	str	r3, [r5, #0]
 80135cc:	f7ed fbfa 	bl	8000dc4 <_close>
 80135d0:	1c43      	adds	r3, r0, #1
 80135d2:	d102      	bne.n	80135da <_close_r+0x1a>
 80135d4:	682b      	ldr	r3, [r5, #0]
 80135d6:	b103      	cbz	r3, 80135da <_close_r+0x1a>
 80135d8:	6023      	str	r3, [r4, #0]
 80135da:	bd38      	pop	{r3, r4, r5, pc}
 80135dc:	20000ba4 	.word	0x20000ba4

080135e0 <__sflags>:
 80135e0:	780b      	ldrb	r3, [r1, #0]
 80135e2:	2b72      	cmp	r3, #114	; 0x72
 80135e4:	b530      	push	{r4, r5, lr}
 80135e6:	d022      	beq.n	801362e <__sflags+0x4e>
 80135e8:	2b77      	cmp	r3, #119	; 0x77
 80135ea:	d024      	beq.n	8013636 <__sflags+0x56>
 80135ec:	2b61      	cmp	r3, #97	; 0x61
 80135ee:	d027      	beq.n	8013640 <__sflags+0x60>
 80135f0:	2316      	movs	r3, #22
 80135f2:	6003      	str	r3, [r0, #0]
 80135f4:	2000      	movs	r0, #0
 80135f6:	bd30      	pop	{r4, r5, pc}
 80135f8:	2d62      	cmp	r5, #98	; 0x62
 80135fa:	d012      	beq.n	8013622 <__sflags+0x42>
 80135fc:	2d78      	cmp	r5, #120	; 0x78
 80135fe:	d013      	beq.n	8013628 <__sflags+0x48>
 8013600:	2d2b      	cmp	r5, #43	; 0x2b
 8013602:	d107      	bne.n	8013614 <__sflags+0x34>
 8013604:	f020 001c 	bic.w	r0, r0, #28
 8013608:	f023 0303 	bic.w	r3, r3, #3
 801360c:	f040 0010 	orr.w	r0, r0, #16
 8013610:	f043 0302 	orr.w	r3, r3, #2
 8013614:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013618:	2d00      	cmp	r5, #0
 801361a:	d1ed      	bne.n	80135f8 <__sflags+0x18>
 801361c:	4323      	orrs	r3, r4
 801361e:	6013      	str	r3, [r2, #0]
 8013620:	e7e9      	b.n	80135f6 <__sflags+0x16>
 8013622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013626:	e7f5      	b.n	8013614 <__sflags+0x34>
 8013628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801362c:	e7f2      	b.n	8013614 <__sflags+0x34>
 801362e:	2400      	movs	r4, #0
 8013630:	4623      	mov	r3, r4
 8013632:	2004      	movs	r0, #4
 8013634:	e7ee      	b.n	8013614 <__sflags+0x34>
 8013636:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801363a:	2301      	movs	r3, #1
 801363c:	2008      	movs	r0, #8
 801363e:	e7e9      	b.n	8013614 <__sflags+0x34>
 8013640:	f44f 7402 	mov.w	r4, #520	; 0x208
 8013644:	2301      	movs	r3, #1
 8013646:	f44f 7084 	mov.w	r0, #264	; 0x108
 801364a:	e7e3      	b.n	8013614 <__sflags+0x34>

0801364c <fiprintf>:
 801364c:	b40e      	push	{r1, r2, r3}
 801364e:	b503      	push	{r0, r1, lr}
 8013650:	4601      	mov	r1, r0
 8013652:	ab03      	add	r3, sp, #12
 8013654:	4805      	ldr	r0, [pc, #20]	; (801366c <fiprintf+0x20>)
 8013656:	f853 2b04 	ldr.w	r2, [r3], #4
 801365a:	6800      	ldr	r0, [r0, #0]
 801365c:	9301      	str	r3, [sp, #4]
 801365e:	f000 fb11 	bl	8013c84 <_vfiprintf_r>
 8013662:	b002      	add	sp, #8
 8013664:	f85d eb04 	ldr.w	lr, [sp], #4
 8013668:	b003      	add	sp, #12
 801366a:	4770      	bx	lr
 801366c:	20000100 	.word	0x20000100

08013670 <_fstat_r>:
 8013670:	b538      	push	{r3, r4, r5, lr}
 8013672:	4d07      	ldr	r5, [pc, #28]	; (8013690 <_fstat_r+0x20>)
 8013674:	2300      	movs	r3, #0
 8013676:	4604      	mov	r4, r0
 8013678:	4608      	mov	r0, r1
 801367a:	4611      	mov	r1, r2
 801367c:	602b      	str	r3, [r5, #0]
 801367e:	f7ed fbad 	bl	8000ddc <_fstat>
 8013682:	1c43      	adds	r3, r0, #1
 8013684:	d102      	bne.n	801368c <_fstat_r+0x1c>
 8013686:	682b      	ldr	r3, [r5, #0]
 8013688:	b103      	cbz	r3, 801368c <_fstat_r+0x1c>
 801368a:	6023      	str	r3, [r4, #0]
 801368c:	bd38      	pop	{r3, r4, r5, pc}
 801368e:	bf00      	nop
 8013690:	20000ba4 	.word	0x20000ba4

08013694 <_findenv_r>:
 8013694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013698:	4607      	mov	r7, r0
 801369a:	4689      	mov	r9, r1
 801369c:	4616      	mov	r6, r2
 801369e:	f000 fe97 	bl	80143d0 <__env_lock>
 80136a2:	4b18      	ldr	r3, [pc, #96]	; (8013704 <_findenv_r+0x70>)
 80136a4:	681c      	ldr	r4, [r3, #0]
 80136a6:	469a      	mov	sl, r3
 80136a8:	b134      	cbz	r4, 80136b8 <_findenv_r+0x24>
 80136aa:	464b      	mov	r3, r9
 80136ac:	4698      	mov	r8, r3
 80136ae:	f813 1b01 	ldrb.w	r1, [r3], #1
 80136b2:	b139      	cbz	r1, 80136c4 <_findenv_r+0x30>
 80136b4:	293d      	cmp	r1, #61	; 0x3d
 80136b6:	d1f9      	bne.n	80136ac <_findenv_r+0x18>
 80136b8:	4638      	mov	r0, r7
 80136ba:	f000 fe8f 	bl	80143dc <__env_unlock>
 80136be:	2000      	movs	r0, #0
 80136c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c4:	eba8 0809 	sub.w	r8, r8, r9
 80136c8:	46a3      	mov	fp, r4
 80136ca:	f854 0b04 	ldr.w	r0, [r4], #4
 80136ce:	2800      	cmp	r0, #0
 80136d0:	d0f2      	beq.n	80136b8 <_findenv_r+0x24>
 80136d2:	4642      	mov	r2, r8
 80136d4:	4649      	mov	r1, r9
 80136d6:	f000 fe5b 	bl	8014390 <strncmp>
 80136da:	2800      	cmp	r0, #0
 80136dc:	d1f4      	bne.n	80136c8 <_findenv_r+0x34>
 80136de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80136e2:	eb03 0508 	add.w	r5, r3, r8
 80136e6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80136ea:	2b3d      	cmp	r3, #61	; 0x3d
 80136ec:	d1ec      	bne.n	80136c8 <_findenv_r+0x34>
 80136ee:	f8da 3000 	ldr.w	r3, [sl]
 80136f2:	ebab 0303 	sub.w	r3, fp, r3
 80136f6:	109b      	asrs	r3, r3, #2
 80136f8:	4638      	mov	r0, r7
 80136fa:	6033      	str	r3, [r6, #0]
 80136fc:	f000 fe6e 	bl	80143dc <__env_unlock>
 8013700:	1c68      	adds	r0, r5, #1
 8013702:	e7dd      	b.n	80136c0 <_findenv_r+0x2c>
 8013704:	20000000 	.word	0x20000000

08013708 <_getenv_r>:
 8013708:	b507      	push	{r0, r1, r2, lr}
 801370a:	aa01      	add	r2, sp, #4
 801370c:	f7ff ffc2 	bl	8013694 <_findenv_r>
 8013710:	b003      	add	sp, #12
 8013712:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013718 <_gettimeofday_r>:
 8013718:	b538      	push	{r3, r4, r5, lr}
 801371a:	4d07      	ldr	r5, [pc, #28]	; (8013738 <_gettimeofday_r+0x20>)
 801371c:	2300      	movs	r3, #0
 801371e:	4604      	mov	r4, r0
 8013720:	4608      	mov	r0, r1
 8013722:	4611      	mov	r1, r2
 8013724:	602b      	str	r3, [r5, #0]
 8013726:	f001 fa99 	bl	8014c5c <_gettimeofday>
 801372a:	1c43      	adds	r3, r0, #1
 801372c:	d102      	bne.n	8013734 <_gettimeofday_r+0x1c>
 801372e:	682b      	ldr	r3, [r5, #0]
 8013730:	b103      	cbz	r3, 8013734 <_gettimeofday_r+0x1c>
 8013732:	6023      	str	r3, [r4, #0]
 8013734:	bd38      	pop	{r3, r4, r5, pc}
 8013736:	bf00      	nop
 8013738:	20000ba4 	.word	0x20000ba4

0801373c <__gettzinfo>:
 801373c:	4800      	ldr	r0, [pc, #0]	; (8013740 <__gettzinfo+0x4>)
 801373e:	4770      	bx	lr
 8013740:	20000170 	.word	0x20000170

08013744 <gmtime_r>:
 8013744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013748:	e9d0 6700 	ldrd	r6, r7, [r0]
 801374c:	460c      	mov	r4, r1
 801374e:	4a51      	ldr	r2, [pc, #324]	; (8013894 <gmtime_r+0x150>)
 8013750:	2300      	movs	r3, #0
 8013752:	4630      	mov	r0, r6
 8013754:	4639      	mov	r1, r7
 8013756:	f7ed f82d 	bl	80007b4 <__aeabi_ldivmod>
 801375a:	4639      	mov	r1, r7
 801375c:	4605      	mov	r5, r0
 801375e:	4a4d      	ldr	r2, [pc, #308]	; (8013894 <gmtime_r+0x150>)
 8013760:	4630      	mov	r0, r6
 8013762:	2300      	movs	r3, #0
 8013764:	f7ed f826 	bl	80007b4 <__aeabi_ldivmod>
 8013768:	2a00      	cmp	r2, #0
 801376a:	bfbc      	itt	lt
 801376c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8013770:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8013774:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013778:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801377c:	fbb2 f3f1 	udiv	r3, r2, r1
 8013780:	fb01 2213 	mls	r2, r1, r3, r2
 8013784:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8013788:	bfac      	ite	ge
 801378a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801378e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8013792:	60a3      	str	r3, [r4, #8]
 8013794:	fbb2 f3f1 	udiv	r3, r2, r1
 8013798:	fb01 2213 	mls	r2, r1, r3, r2
 801379c:	6063      	str	r3, [r4, #4]
 801379e:	6022      	str	r2, [r4, #0]
 80137a0:	1cc3      	adds	r3, r0, #3
 80137a2:	2207      	movs	r2, #7
 80137a4:	fb93 f2f2 	sdiv	r2, r3, r2
 80137a8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80137ac:	1a9b      	subs	r3, r3, r2
 80137ae:	bf48      	it	mi
 80137b0:	3307      	addmi	r3, #7
 80137b2:	2800      	cmp	r0, #0
 80137b4:	61a3      	str	r3, [r4, #24]
 80137b6:	bfb8      	it	lt
 80137b8:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80137bc:	4936      	ldr	r1, [pc, #216]	; (8013898 <gmtime_r+0x154>)
 80137be:	bfae      	itee	ge
 80137c0:	fb90 f1f1 	sdivge	r1, r0, r1
 80137c4:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80137c8:	fb93 f1f1 	sdivlt	r1, r3, r1
 80137cc:	4b33      	ldr	r3, [pc, #204]	; (801389c <gmtime_r+0x158>)
 80137ce:	fb03 0001 	mla	r0, r3, r1, r0
 80137d2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80137d6:	fbb0 f2f2 	udiv	r2, r0, r2
 80137da:	4402      	add	r2, r0
 80137dc:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80137e0:	fbb0 f3fc 	udiv	r3, r0, ip
 80137e4:	1ad2      	subs	r2, r2, r3
 80137e6:	f240 176d 	movw	r7, #365	; 0x16d
 80137ea:	4b2d      	ldr	r3, [pc, #180]	; (80138a0 <gmtime_r+0x15c>)
 80137ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80137f0:	2664      	movs	r6, #100	; 0x64
 80137f2:	1ad3      	subs	r3, r2, r3
 80137f4:	fbb3 f5f7 	udiv	r5, r3, r7
 80137f8:	fbb3 f3fc 	udiv	r3, r3, ip
 80137fc:	fbb5 f2f6 	udiv	r2, r5, r6
 8013800:	1ad3      	subs	r3, r2, r3
 8013802:	4403      	add	r3, r0
 8013804:	fb07 3315 	mls	r3, r7, r5, r3
 8013808:	2099      	movs	r0, #153	; 0x99
 801380a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801380e:	f10c 0c02 	add.w	ip, ip, #2
 8013812:	f103 0e01 	add.w	lr, r3, #1
 8013816:	fbbc f7f0 	udiv	r7, ip, r0
 801381a:	4378      	muls	r0, r7
 801381c:	3002      	adds	r0, #2
 801381e:	f04f 0805 	mov.w	r8, #5
 8013822:	fbb0 f0f8 	udiv	r0, r0, r8
 8013826:	ebae 0000 	sub.w	r0, lr, r0
 801382a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801382e:	45f4      	cmp	ip, lr
 8013830:	bf94      	ite	ls
 8013832:	f04f 0c02 	movls.w	ip, #2
 8013836:	f06f 0c09 	mvnhi.w	ip, #9
 801383a:	4467      	add	r7, ip
 801383c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8013840:	fb0c 5101 	mla	r1, ip, r1, r5
 8013844:	2f01      	cmp	r7, #1
 8013846:	bf98      	it	ls
 8013848:	3101      	addls	r1, #1
 801384a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801384e:	d30c      	bcc.n	801386a <gmtime_r+0x126>
 8013850:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8013854:	61e3      	str	r3, [r4, #28]
 8013856:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801385a:	2300      	movs	r3, #0
 801385c:	60e0      	str	r0, [r4, #12]
 801385e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8013862:	6223      	str	r3, [r4, #32]
 8013864:	4620      	mov	r0, r4
 8013866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801386a:	f015 0f03 	tst.w	r5, #3
 801386e:	d102      	bne.n	8013876 <gmtime_r+0x132>
 8013870:	fb06 5212 	mls	r2, r6, r2, r5
 8013874:	b95a      	cbnz	r2, 801388e <gmtime_r+0x14a>
 8013876:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801387a:	fbb5 f2f6 	udiv	r2, r5, r6
 801387e:	fb06 5212 	mls	r2, r6, r2, r5
 8013882:	fab2 f282 	clz	r2, r2
 8013886:	0952      	lsrs	r2, r2, #5
 8013888:	333b      	adds	r3, #59	; 0x3b
 801388a:	4413      	add	r3, r2
 801388c:	e7e2      	b.n	8013854 <gmtime_r+0x110>
 801388e:	2201      	movs	r2, #1
 8013890:	e7fa      	b.n	8013888 <gmtime_r+0x144>
 8013892:	bf00      	nop
 8013894:	00015180 	.word	0x00015180
 8013898:	00023ab1 	.word	0x00023ab1
 801389c:	fffdc54f 	.word	0xfffdc54f
 80138a0:	00023ab0 	.word	0x00023ab0

080138a4 <_isatty_r>:
 80138a4:	b538      	push	{r3, r4, r5, lr}
 80138a6:	4d06      	ldr	r5, [pc, #24]	; (80138c0 <_isatty_r+0x1c>)
 80138a8:	2300      	movs	r3, #0
 80138aa:	4604      	mov	r4, r0
 80138ac:	4608      	mov	r0, r1
 80138ae:	602b      	str	r3, [r5, #0]
 80138b0:	f7ed faa4 	bl	8000dfc <_isatty>
 80138b4:	1c43      	adds	r3, r0, #1
 80138b6:	d102      	bne.n	80138be <_isatty_r+0x1a>
 80138b8:	682b      	ldr	r3, [r5, #0]
 80138ba:	b103      	cbz	r3, 80138be <_isatty_r+0x1a>
 80138bc:	6023      	str	r3, [r4, #0]
 80138be:	bd38      	pop	{r3, r4, r5, pc}
 80138c0:	20000ba4 	.word	0x20000ba4

080138c4 <labs>:
 80138c4:	2800      	cmp	r0, #0
 80138c6:	bfb8      	it	lt
 80138c8:	4240      	neglt	r0, r0
 80138ca:	4770      	bx	lr

080138cc <_lseek_r>:
 80138cc:	b538      	push	{r3, r4, r5, lr}
 80138ce:	4d07      	ldr	r5, [pc, #28]	; (80138ec <_lseek_r+0x20>)
 80138d0:	4604      	mov	r4, r0
 80138d2:	4608      	mov	r0, r1
 80138d4:	4611      	mov	r1, r2
 80138d6:	2200      	movs	r2, #0
 80138d8:	602a      	str	r2, [r5, #0]
 80138da:	461a      	mov	r2, r3
 80138dc:	f7ed fa99 	bl	8000e12 <_lseek>
 80138e0:	1c43      	adds	r3, r0, #1
 80138e2:	d102      	bne.n	80138ea <_lseek_r+0x1e>
 80138e4:	682b      	ldr	r3, [r5, #0]
 80138e6:	b103      	cbz	r3, 80138ea <_lseek_r+0x1e>
 80138e8:	6023      	str	r3, [r4, #0]
 80138ea:	bd38      	pop	{r3, r4, r5, pc}
 80138ec:	20000ba4 	.word	0x20000ba4

080138f0 <__ascii_mbtowc>:
 80138f0:	b082      	sub	sp, #8
 80138f2:	b901      	cbnz	r1, 80138f6 <__ascii_mbtowc+0x6>
 80138f4:	a901      	add	r1, sp, #4
 80138f6:	b142      	cbz	r2, 801390a <__ascii_mbtowc+0x1a>
 80138f8:	b14b      	cbz	r3, 801390e <__ascii_mbtowc+0x1e>
 80138fa:	7813      	ldrb	r3, [r2, #0]
 80138fc:	600b      	str	r3, [r1, #0]
 80138fe:	7812      	ldrb	r2, [r2, #0]
 8013900:	1e10      	subs	r0, r2, #0
 8013902:	bf18      	it	ne
 8013904:	2001      	movne	r0, #1
 8013906:	b002      	add	sp, #8
 8013908:	4770      	bx	lr
 801390a:	4610      	mov	r0, r2
 801390c:	e7fb      	b.n	8013906 <__ascii_mbtowc+0x16>
 801390e:	f06f 0001 	mvn.w	r0, #1
 8013912:	e7f8      	b.n	8013906 <__ascii_mbtowc+0x16>

08013914 <__malloc_lock>:
 8013914:	4801      	ldr	r0, [pc, #4]	; (801391c <__malloc_lock+0x8>)
 8013916:	f7fe ba20 	b.w	8011d5a <__retarget_lock_acquire_recursive>
 801391a:	bf00      	nop
 801391c:	20000b9c 	.word	0x20000b9c

08013920 <__malloc_unlock>:
 8013920:	4801      	ldr	r0, [pc, #4]	; (8013928 <__malloc_unlock+0x8>)
 8013922:	f7fe ba1c 	b.w	8011d5e <__retarget_lock_release_recursive>
 8013926:	bf00      	nop
 8013928:	20000b9c 	.word	0x20000b9c

0801392c <_realloc_r>:
 801392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801392e:	4607      	mov	r7, r0
 8013930:	4614      	mov	r4, r2
 8013932:	460e      	mov	r6, r1
 8013934:	b921      	cbnz	r1, 8013940 <_realloc_r+0x14>
 8013936:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801393a:	4611      	mov	r1, r2
 801393c:	f7fe baea 	b.w	8011f14 <_malloc_r>
 8013940:	b922      	cbnz	r2, 801394c <_realloc_r+0x20>
 8013942:	f7fe fa97 	bl	8011e74 <_free_r>
 8013946:	4625      	mov	r5, r4
 8013948:	4628      	mov	r0, r5
 801394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801394c:	f000 fd66 	bl	801441c <_malloc_usable_size_r>
 8013950:	42a0      	cmp	r0, r4
 8013952:	d20f      	bcs.n	8013974 <_realloc_r+0x48>
 8013954:	4621      	mov	r1, r4
 8013956:	4638      	mov	r0, r7
 8013958:	f7fe fadc 	bl	8011f14 <_malloc_r>
 801395c:	4605      	mov	r5, r0
 801395e:	2800      	cmp	r0, #0
 8013960:	d0f2      	beq.n	8013948 <_realloc_r+0x1c>
 8013962:	4631      	mov	r1, r6
 8013964:	4622      	mov	r2, r4
 8013966:	f7fe fa6f 	bl	8011e48 <memcpy>
 801396a:	4631      	mov	r1, r6
 801396c:	4638      	mov	r0, r7
 801396e:	f7fe fa81 	bl	8011e74 <_free_r>
 8013972:	e7e9      	b.n	8013948 <_realloc_r+0x1c>
 8013974:	4635      	mov	r5, r6
 8013976:	e7e7      	b.n	8013948 <_realloc_r+0x1c>

08013978 <__ssputs_r>:
 8013978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801397c:	688e      	ldr	r6, [r1, #8]
 801397e:	429e      	cmp	r6, r3
 8013980:	4682      	mov	sl, r0
 8013982:	460c      	mov	r4, r1
 8013984:	4690      	mov	r8, r2
 8013986:	461f      	mov	r7, r3
 8013988:	d838      	bhi.n	80139fc <__ssputs_r+0x84>
 801398a:	898a      	ldrh	r2, [r1, #12]
 801398c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013990:	d032      	beq.n	80139f8 <__ssputs_r+0x80>
 8013992:	6825      	ldr	r5, [r4, #0]
 8013994:	6909      	ldr	r1, [r1, #16]
 8013996:	eba5 0901 	sub.w	r9, r5, r1
 801399a:	6965      	ldr	r5, [r4, #20]
 801399c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80139a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80139a4:	3301      	adds	r3, #1
 80139a6:	444b      	add	r3, r9
 80139a8:	106d      	asrs	r5, r5, #1
 80139aa:	429d      	cmp	r5, r3
 80139ac:	bf38      	it	cc
 80139ae:	461d      	movcc	r5, r3
 80139b0:	0553      	lsls	r3, r2, #21
 80139b2:	d531      	bpl.n	8013a18 <__ssputs_r+0xa0>
 80139b4:	4629      	mov	r1, r5
 80139b6:	f7fe faad 	bl	8011f14 <_malloc_r>
 80139ba:	4606      	mov	r6, r0
 80139bc:	b950      	cbnz	r0, 80139d4 <__ssputs_r+0x5c>
 80139be:	230c      	movs	r3, #12
 80139c0:	f8ca 3000 	str.w	r3, [sl]
 80139c4:	89a3      	ldrh	r3, [r4, #12]
 80139c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139ca:	81a3      	strh	r3, [r4, #12]
 80139cc:	f04f 30ff 	mov.w	r0, #4294967295
 80139d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139d4:	6921      	ldr	r1, [r4, #16]
 80139d6:	464a      	mov	r2, r9
 80139d8:	f7fe fa36 	bl	8011e48 <memcpy>
 80139dc:	89a3      	ldrh	r3, [r4, #12]
 80139de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80139e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139e6:	81a3      	strh	r3, [r4, #12]
 80139e8:	6126      	str	r6, [r4, #16]
 80139ea:	6165      	str	r5, [r4, #20]
 80139ec:	444e      	add	r6, r9
 80139ee:	eba5 0509 	sub.w	r5, r5, r9
 80139f2:	6026      	str	r6, [r4, #0]
 80139f4:	60a5      	str	r5, [r4, #8]
 80139f6:	463e      	mov	r6, r7
 80139f8:	42be      	cmp	r6, r7
 80139fa:	d900      	bls.n	80139fe <__ssputs_r+0x86>
 80139fc:	463e      	mov	r6, r7
 80139fe:	4632      	mov	r2, r6
 8013a00:	6820      	ldr	r0, [r4, #0]
 8013a02:	4641      	mov	r1, r8
 8013a04:	f000 fcf0 	bl	80143e8 <memmove>
 8013a08:	68a3      	ldr	r3, [r4, #8]
 8013a0a:	6822      	ldr	r2, [r4, #0]
 8013a0c:	1b9b      	subs	r3, r3, r6
 8013a0e:	4432      	add	r2, r6
 8013a10:	60a3      	str	r3, [r4, #8]
 8013a12:	6022      	str	r2, [r4, #0]
 8013a14:	2000      	movs	r0, #0
 8013a16:	e7db      	b.n	80139d0 <__ssputs_r+0x58>
 8013a18:	462a      	mov	r2, r5
 8013a1a:	f7ff ff87 	bl	801392c <_realloc_r>
 8013a1e:	4606      	mov	r6, r0
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d1e1      	bne.n	80139e8 <__ssputs_r+0x70>
 8013a24:	6921      	ldr	r1, [r4, #16]
 8013a26:	4650      	mov	r0, sl
 8013a28:	f7fe fa24 	bl	8011e74 <_free_r>
 8013a2c:	e7c7      	b.n	80139be <__ssputs_r+0x46>
	...

08013a30 <_svfiprintf_r>:
 8013a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a34:	4698      	mov	r8, r3
 8013a36:	898b      	ldrh	r3, [r1, #12]
 8013a38:	061b      	lsls	r3, r3, #24
 8013a3a:	b09d      	sub	sp, #116	; 0x74
 8013a3c:	4607      	mov	r7, r0
 8013a3e:	460d      	mov	r5, r1
 8013a40:	4614      	mov	r4, r2
 8013a42:	d50e      	bpl.n	8013a62 <_svfiprintf_r+0x32>
 8013a44:	690b      	ldr	r3, [r1, #16]
 8013a46:	b963      	cbnz	r3, 8013a62 <_svfiprintf_r+0x32>
 8013a48:	2140      	movs	r1, #64	; 0x40
 8013a4a:	f7fe fa63 	bl	8011f14 <_malloc_r>
 8013a4e:	6028      	str	r0, [r5, #0]
 8013a50:	6128      	str	r0, [r5, #16]
 8013a52:	b920      	cbnz	r0, 8013a5e <_svfiprintf_r+0x2e>
 8013a54:	230c      	movs	r3, #12
 8013a56:	603b      	str	r3, [r7, #0]
 8013a58:	f04f 30ff 	mov.w	r0, #4294967295
 8013a5c:	e0d1      	b.n	8013c02 <_svfiprintf_r+0x1d2>
 8013a5e:	2340      	movs	r3, #64	; 0x40
 8013a60:	616b      	str	r3, [r5, #20]
 8013a62:	2300      	movs	r3, #0
 8013a64:	9309      	str	r3, [sp, #36]	; 0x24
 8013a66:	2320      	movs	r3, #32
 8013a68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a70:	2330      	movs	r3, #48	; 0x30
 8013a72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013c1c <_svfiprintf_r+0x1ec>
 8013a76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a7a:	f04f 0901 	mov.w	r9, #1
 8013a7e:	4623      	mov	r3, r4
 8013a80:	469a      	mov	sl, r3
 8013a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a86:	b10a      	cbz	r2, 8013a8c <_svfiprintf_r+0x5c>
 8013a88:	2a25      	cmp	r2, #37	; 0x25
 8013a8a:	d1f9      	bne.n	8013a80 <_svfiprintf_r+0x50>
 8013a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8013a90:	d00b      	beq.n	8013aaa <_svfiprintf_r+0x7a>
 8013a92:	465b      	mov	r3, fp
 8013a94:	4622      	mov	r2, r4
 8013a96:	4629      	mov	r1, r5
 8013a98:	4638      	mov	r0, r7
 8013a9a:	f7ff ff6d 	bl	8013978 <__ssputs_r>
 8013a9e:	3001      	adds	r0, #1
 8013aa0:	f000 80aa 	beq.w	8013bf8 <_svfiprintf_r+0x1c8>
 8013aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013aa6:	445a      	add	r2, fp
 8013aa8:	9209      	str	r2, [sp, #36]	; 0x24
 8013aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f000 80a2 	beq.w	8013bf8 <_svfiprintf_r+0x1c8>
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8013aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013abe:	f10a 0a01 	add.w	sl, sl, #1
 8013ac2:	9304      	str	r3, [sp, #16]
 8013ac4:	9307      	str	r3, [sp, #28]
 8013ac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013aca:	931a      	str	r3, [sp, #104]	; 0x68
 8013acc:	4654      	mov	r4, sl
 8013ace:	2205      	movs	r2, #5
 8013ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ad4:	4851      	ldr	r0, [pc, #324]	; (8013c1c <_svfiprintf_r+0x1ec>)
 8013ad6:	f7ec fbc3 	bl	8000260 <memchr>
 8013ada:	9a04      	ldr	r2, [sp, #16]
 8013adc:	b9d8      	cbnz	r0, 8013b16 <_svfiprintf_r+0xe6>
 8013ade:	06d0      	lsls	r0, r2, #27
 8013ae0:	bf44      	itt	mi
 8013ae2:	2320      	movmi	r3, #32
 8013ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ae8:	0711      	lsls	r1, r2, #28
 8013aea:	bf44      	itt	mi
 8013aec:	232b      	movmi	r3, #43	; 0x2b
 8013aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013af2:	f89a 3000 	ldrb.w	r3, [sl]
 8013af6:	2b2a      	cmp	r3, #42	; 0x2a
 8013af8:	d015      	beq.n	8013b26 <_svfiprintf_r+0xf6>
 8013afa:	9a07      	ldr	r2, [sp, #28]
 8013afc:	4654      	mov	r4, sl
 8013afe:	2000      	movs	r0, #0
 8013b00:	f04f 0c0a 	mov.w	ip, #10
 8013b04:	4621      	mov	r1, r4
 8013b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b0a:	3b30      	subs	r3, #48	; 0x30
 8013b0c:	2b09      	cmp	r3, #9
 8013b0e:	d94e      	bls.n	8013bae <_svfiprintf_r+0x17e>
 8013b10:	b1b0      	cbz	r0, 8013b40 <_svfiprintf_r+0x110>
 8013b12:	9207      	str	r2, [sp, #28]
 8013b14:	e014      	b.n	8013b40 <_svfiprintf_r+0x110>
 8013b16:	eba0 0308 	sub.w	r3, r0, r8
 8013b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8013b1e:	4313      	orrs	r3, r2
 8013b20:	9304      	str	r3, [sp, #16]
 8013b22:	46a2      	mov	sl, r4
 8013b24:	e7d2      	b.n	8013acc <_svfiprintf_r+0x9c>
 8013b26:	9b03      	ldr	r3, [sp, #12]
 8013b28:	1d19      	adds	r1, r3, #4
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	9103      	str	r1, [sp, #12]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	bfbb      	ittet	lt
 8013b32:	425b      	neglt	r3, r3
 8013b34:	f042 0202 	orrlt.w	r2, r2, #2
 8013b38:	9307      	strge	r3, [sp, #28]
 8013b3a:	9307      	strlt	r3, [sp, #28]
 8013b3c:	bfb8      	it	lt
 8013b3e:	9204      	strlt	r2, [sp, #16]
 8013b40:	7823      	ldrb	r3, [r4, #0]
 8013b42:	2b2e      	cmp	r3, #46	; 0x2e
 8013b44:	d10c      	bne.n	8013b60 <_svfiprintf_r+0x130>
 8013b46:	7863      	ldrb	r3, [r4, #1]
 8013b48:	2b2a      	cmp	r3, #42	; 0x2a
 8013b4a:	d135      	bne.n	8013bb8 <_svfiprintf_r+0x188>
 8013b4c:	9b03      	ldr	r3, [sp, #12]
 8013b4e:	1d1a      	adds	r2, r3, #4
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	9203      	str	r2, [sp, #12]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	bfb8      	it	lt
 8013b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8013b5c:	3402      	adds	r4, #2
 8013b5e:	9305      	str	r3, [sp, #20]
 8013b60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013c2c <_svfiprintf_r+0x1fc>
 8013b64:	7821      	ldrb	r1, [r4, #0]
 8013b66:	2203      	movs	r2, #3
 8013b68:	4650      	mov	r0, sl
 8013b6a:	f7ec fb79 	bl	8000260 <memchr>
 8013b6e:	b140      	cbz	r0, 8013b82 <_svfiprintf_r+0x152>
 8013b70:	2340      	movs	r3, #64	; 0x40
 8013b72:	eba0 000a 	sub.w	r0, r0, sl
 8013b76:	fa03 f000 	lsl.w	r0, r3, r0
 8013b7a:	9b04      	ldr	r3, [sp, #16]
 8013b7c:	4303      	orrs	r3, r0
 8013b7e:	3401      	adds	r4, #1
 8013b80:	9304      	str	r3, [sp, #16]
 8013b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b86:	4826      	ldr	r0, [pc, #152]	; (8013c20 <_svfiprintf_r+0x1f0>)
 8013b88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b8c:	2206      	movs	r2, #6
 8013b8e:	f7ec fb67 	bl	8000260 <memchr>
 8013b92:	2800      	cmp	r0, #0
 8013b94:	d038      	beq.n	8013c08 <_svfiprintf_r+0x1d8>
 8013b96:	4b23      	ldr	r3, [pc, #140]	; (8013c24 <_svfiprintf_r+0x1f4>)
 8013b98:	bb1b      	cbnz	r3, 8013be2 <_svfiprintf_r+0x1b2>
 8013b9a:	9b03      	ldr	r3, [sp, #12]
 8013b9c:	3307      	adds	r3, #7
 8013b9e:	f023 0307 	bic.w	r3, r3, #7
 8013ba2:	3308      	adds	r3, #8
 8013ba4:	9303      	str	r3, [sp, #12]
 8013ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ba8:	4433      	add	r3, r6
 8013baa:	9309      	str	r3, [sp, #36]	; 0x24
 8013bac:	e767      	b.n	8013a7e <_svfiprintf_r+0x4e>
 8013bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8013bb2:	460c      	mov	r4, r1
 8013bb4:	2001      	movs	r0, #1
 8013bb6:	e7a5      	b.n	8013b04 <_svfiprintf_r+0xd4>
 8013bb8:	2300      	movs	r3, #0
 8013bba:	3401      	adds	r4, #1
 8013bbc:	9305      	str	r3, [sp, #20]
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	f04f 0c0a 	mov.w	ip, #10
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013bca:	3a30      	subs	r2, #48	; 0x30
 8013bcc:	2a09      	cmp	r2, #9
 8013bce:	d903      	bls.n	8013bd8 <_svfiprintf_r+0x1a8>
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d0c5      	beq.n	8013b60 <_svfiprintf_r+0x130>
 8013bd4:	9105      	str	r1, [sp, #20]
 8013bd6:	e7c3      	b.n	8013b60 <_svfiprintf_r+0x130>
 8013bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8013bdc:	4604      	mov	r4, r0
 8013bde:	2301      	movs	r3, #1
 8013be0:	e7f0      	b.n	8013bc4 <_svfiprintf_r+0x194>
 8013be2:	ab03      	add	r3, sp, #12
 8013be4:	9300      	str	r3, [sp, #0]
 8013be6:	462a      	mov	r2, r5
 8013be8:	4b0f      	ldr	r3, [pc, #60]	; (8013c28 <_svfiprintf_r+0x1f8>)
 8013bea:	a904      	add	r1, sp, #16
 8013bec:	4638      	mov	r0, r7
 8013bee:	f3af 8000 	nop.w
 8013bf2:	1c42      	adds	r2, r0, #1
 8013bf4:	4606      	mov	r6, r0
 8013bf6:	d1d6      	bne.n	8013ba6 <_svfiprintf_r+0x176>
 8013bf8:	89ab      	ldrh	r3, [r5, #12]
 8013bfa:	065b      	lsls	r3, r3, #25
 8013bfc:	f53f af2c 	bmi.w	8013a58 <_svfiprintf_r+0x28>
 8013c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c02:	b01d      	add	sp, #116	; 0x74
 8013c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c08:	ab03      	add	r3, sp, #12
 8013c0a:	9300      	str	r3, [sp, #0]
 8013c0c:	462a      	mov	r2, r5
 8013c0e:	4b06      	ldr	r3, [pc, #24]	; (8013c28 <_svfiprintf_r+0x1f8>)
 8013c10:	a904      	add	r1, sp, #16
 8013c12:	4638      	mov	r0, r7
 8013c14:	f000 f9d4 	bl	8013fc0 <_printf_i>
 8013c18:	e7eb      	b.n	8013bf2 <_svfiprintf_r+0x1c2>
 8013c1a:	bf00      	nop
 8013c1c:	08017cb7 	.word	0x08017cb7
 8013c20:	08017cc1 	.word	0x08017cc1
 8013c24:	00000000 	.word	0x00000000
 8013c28:	08013979 	.word	0x08013979
 8013c2c:	08017cbd 	.word	0x08017cbd

08013c30 <__sfputc_r>:
 8013c30:	6893      	ldr	r3, [r2, #8]
 8013c32:	3b01      	subs	r3, #1
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	b410      	push	{r4}
 8013c38:	6093      	str	r3, [r2, #8]
 8013c3a:	da08      	bge.n	8013c4e <__sfputc_r+0x1e>
 8013c3c:	6994      	ldr	r4, [r2, #24]
 8013c3e:	42a3      	cmp	r3, r4
 8013c40:	db01      	blt.n	8013c46 <__sfputc_r+0x16>
 8013c42:	290a      	cmp	r1, #10
 8013c44:	d103      	bne.n	8013c4e <__sfputc_r+0x1e>
 8013c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c4a:	f7ff bb63 	b.w	8013314 <__swbuf_r>
 8013c4e:	6813      	ldr	r3, [r2, #0]
 8013c50:	1c58      	adds	r0, r3, #1
 8013c52:	6010      	str	r0, [r2, #0]
 8013c54:	7019      	strb	r1, [r3, #0]
 8013c56:	4608      	mov	r0, r1
 8013c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c5c:	4770      	bx	lr

08013c5e <__sfputs_r>:
 8013c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c60:	4606      	mov	r6, r0
 8013c62:	460f      	mov	r7, r1
 8013c64:	4614      	mov	r4, r2
 8013c66:	18d5      	adds	r5, r2, r3
 8013c68:	42ac      	cmp	r4, r5
 8013c6a:	d101      	bne.n	8013c70 <__sfputs_r+0x12>
 8013c6c:	2000      	movs	r0, #0
 8013c6e:	e007      	b.n	8013c80 <__sfputs_r+0x22>
 8013c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c74:	463a      	mov	r2, r7
 8013c76:	4630      	mov	r0, r6
 8013c78:	f7ff ffda 	bl	8013c30 <__sfputc_r>
 8013c7c:	1c43      	adds	r3, r0, #1
 8013c7e:	d1f3      	bne.n	8013c68 <__sfputs_r+0xa>
 8013c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013c84 <_vfiprintf_r>:
 8013c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c88:	460d      	mov	r5, r1
 8013c8a:	b09d      	sub	sp, #116	; 0x74
 8013c8c:	4614      	mov	r4, r2
 8013c8e:	4698      	mov	r8, r3
 8013c90:	4606      	mov	r6, r0
 8013c92:	b118      	cbz	r0, 8013c9c <_vfiprintf_r+0x18>
 8013c94:	6983      	ldr	r3, [r0, #24]
 8013c96:	b90b      	cbnz	r3, 8013c9c <_vfiprintf_r+0x18>
 8013c98:	f7fd fcac 	bl	80115f4 <__sinit>
 8013c9c:	4b89      	ldr	r3, [pc, #548]	; (8013ec4 <_vfiprintf_r+0x240>)
 8013c9e:	429d      	cmp	r5, r3
 8013ca0:	d11b      	bne.n	8013cda <_vfiprintf_r+0x56>
 8013ca2:	6875      	ldr	r5, [r6, #4]
 8013ca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ca6:	07d9      	lsls	r1, r3, #31
 8013ca8:	d405      	bmi.n	8013cb6 <_vfiprintf_r+0x32>
 8013caa:	89ab      	ldrh	r3, [r5, #12]
 8013cac:	059a      	lsls	r2, r3, #22
 8013cae:	d402      	bmi.n	8013cb6 <_vfiprintf_r+0x32>
 8013cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cb2:	f7fe f852 	bl	8011d5a <__retarget_lock_acquire_recursive>
 8013cb6:	89ab      	ldrh	r3, [r5, #12]
 8013cb8:	071b      	lsls	r3, r3, #28
 8013cba:	d501      	bpl.n	8013cc0 <_vfiprintf_r+0x3c>
 8013cbc:	692b      	ldr	r3, [r5, #16]
 8013cbe:	b9eb      	cbnz	r3, 8013cfc <_vfiprintf_r+0x78>
 8013cc0:	4629      	mov	r1, r5
 8013cc2:	4630      	mov	r0, r6
 8013cc4:	f7ff fb8a 	bl	80133dc <__swsetup_r>
 8013cc8:	b1c0      	cbz	r0, 8013cfc <_vfiprintf_r+0x78>
 8013cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ccc:	07dc      	lsls	r4, r3, #31
 8013cce:	d50e      	bpl.n	8013cee <_vfiprintf_r+0x6a>
 8013cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013cd4:	b01d      	add	sp, #116	; 0x74
 8013cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cda:	4b7b      	ldr	r3, [pc, #492]	; (8013ec8 <_vfiprintf_r+0x244>)
 8013cdc:	429d      	cmp	r5, r3
 8013cde:	d101      	bne.n	8013ce4 <_vfiprintf_r+0x60>
 8013ce0:	68b5      	ldr	r5, [r6, #8]
 8013ce2:	e7df      	b.n	8013ca4 <_vfiprintf_r+0x20>
 8013ce4:	4b79      	ldr	r3, [pc, #484]	; (8013ecc <_vfiprintf_r+0x248>)
 8013ce6:	429d      	cmp	r5, r3
 8013ce8:	bf08      	it	eq
 8013cea:	68f5      	ldreq	r5, [r6, #12]
 8013cec:	e7da      	b.n	8013ca4 <_vfiprintf_r+0x20>
 8013cee:	89ab      	ldrh	r3, [r5, #12]
 8013cf0:	0598      	lsls	r0, r3, #22
 8013cf2:	d4ed      	bmi.n	8013cd0 <_vfiprintf_r+0x4c>
 8013cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cf6:	f7fe f832 	bl	8011d5e <__retarget_lock_release_recursive>
 8013cfa:	e7e9      	b.n	8013cd0 <_vfiprintf_r+0x4c>
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8013d00:	2320      	movs	r3, #32
 8013d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d0a:	2330      	movs	r3, #48	; 0x30
 8013d0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013ed0 <_vfiprintf_r+0x24c>
 8013d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d14:	f04f 0901 	mov.w	r9, #1
 8013d18:	4623      	mov	r3, r4
 8013d1a:	469a      	mov	sl, r3
 8013d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d20:	b10a      	cbz	r2, 8013d26 <_vfiprintf_r+0xa2>
 8013d22:	2a25      	cmp	r2, #37	; 0x25
 8013d24:	d1f9      	bne.n	8013d1a <_vfiprintf_r+0x96>
 8013d26:	ebba 0b04 	subs.w	fp, sl, r4
 8013d2a:	d00b      	beq.n	8013d44 <_vfiprintf_r+0xc0>
 8013d2c:	465b      	mov	r3, fp
 8013d2e:	4622      	mov	r2, r4
 8013d30:	4629      	mov	r1, r5
 8013d32:	4630      	mov	r0, r6
 8013d34:	f7ff ff93 	bl	8013c5e <__sfputs_r>
 8013d38:	3001      	adds	r0, #1
 8013d3a:	f000 80aa 	beq.w	8013e92 <_vfiprintf_r+0x20e>
 8013d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d40:	445a      	add	r2, fp
 8013d42:	9209      	str	r2, [sp, #36]	; 0x24
 8013d44:	f89a 3000 	ldrb.w	r3, [sl]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	f000 80a2 	beq.w	8013e92 <_vfiprintf_r+0x20e>
 8013d4e:	2300      	movs	r3, #0
 8013d50:	f04f 32ff 	mov.w	r2, #4294967295
 8013d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d58:	f10a 0a01 	add.w	sl, sl, #1
 8013d5c:	9304      	str	r3, [sp, #16]
 8013d5e:	9307      	str	r3, [sp, #28]
 8013d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d64:	931a      	str	r3, [sp, #104]	; 0x68
 8013d66:	4654      	mov	r4, sl
 8013d68:	2205      	movs	r2, #5
 8013d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d6e:	4858      	ldr	r0, [pc, #352]	; (8013ed0 <_vfiprintf_r+0x24c>)
 8013d70:	f7ec fa76 	bl	8000260 <memchr>
 8013d74:	9a04      	ldr	r2, [sp, #16]
 8013d76:	b9d8      	cbnz	r0, 8013db0 <_vfiprintf_r+0x12c>
 8013d78:	06d1      	lsls	r1, r2, #27
 8013d7a:	bf44      	itt	mi
 8013d7c:	2320      	movmi	r3, #32
 8013d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d82:	0713      	lsls	r3, r2, #28
 8013d84:	bf44      	itt	mi
 8013d86:	232b      	movmi	r3, #43	; 0x2b
 8013d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8013d90:	2b2a      	cmp	r3, #42	; 0x2a
 8013d92:	d015      	beq.n	8013dc0 <_vfiprintf_r+0x13c>
 8013d94:	9a07      	ldr	r2, [sp, #28]
 8013d96:	4654      	mov	r4, sl
 8013d98:	2000      	movs	r0, #0
 8013d9a:	f04f 0c0a 	mov.w	ip, #10
 8013d9e:	4621      	mov	r1, r4
 8013da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013da4:	3b30      	subs	r3, #48	; 0x30
 8013da6:	2b09      	cmp	r3, #9
 8013da8:	d94e      	bls.n	8013e48 <_vfiprintf_r+0x1c4>
 8013daa:	b1b0      	cbz	r0, 8013dda <_vfiprintf_r+0x156>
 8013dac:	9207      	str	r2, [sp, #28]
 8013dae:	e014      	b.n	8013dda <_vfiprintf_r+0x156>
 8013db0:	eba0 0308 	sub.w	r3, r0, r8
 8013db4:	fa09 f303 	lsl.w	r3, r9, r3
 8013db8:	4313      	orrs	r3, r2
 8013dba:	9304      	str	r3, [sp, #16]
 8013dbc:	46a2      	mov	sl, r4
 8013dbe:	e7d2      	b.n	8013d66 <_vfiprintf_r+0xe2>
 8013dc0:	9b03      	ldr	r3, [sp, #12]
 8013dc2:	1d19      	adds	r1, r3, #4
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	9103      	str	r1, [sp, #12]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	bfbb      	ittet	lt
 8013dcc:	425b      	neglt	r3, r3
 8013dce:	f042 0202 	orrlt.w	r2, r2, #2
 8013dd2:	9307      	strge	r3, [sp, #28]
 8013dd4:	9307      	strlt	r3, [sp, #28]
 8013dd6:	bfb8      	it	lt
 8013dd8:	9204      	strlt	r2, [sp, #16]
 8013dda:	7823      	ldrb	r3, [r4, #0]
 8013ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8013dde:	d10c      	bne.n	8013dfa <_vfiprintf_r+0x176>
 8013de0:	7863      	ldrb	r3, [r4, #1]
 8013de2:	2b2a      	cmp	r3, #42	; 0x2a
 8013de4:	d135      	bne.n	8013e52 <_vfiprintf_r+0x1ce>
 8013de6:	9b03      	ldr	r3, [sp, #12]
 8013de8:	1d1a      	adds	r2, r3, #4
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	9203      	str	r2, [sp, #12]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	bfb8      	it	lt
 8013df2:	f04f 33ff 	movlt.w	r3, #4294967295
 8013df6:	3402      	adds	r4, #2
 8013df8:	9305      	str	r3, [sp, #20]
 8013dfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013ee0 <_vfiprintf_r+0x25c>
 8013dfe:	7821      	ldrb	r1, [r4, #0]
 8013e00:	2203      	movs	r2, #3
 8013e02:	4650      	mov	r0, sl
 8013e04:	f7ec fa2c 	bl	8000260 <memchr>
 8013e08:	b140      	cbz	r0, 8013e1c <_vfiprintf_r+0x198>
 8013e0a:	2340      	movs	r3, #64	; 0x40
 8013e0c:	eba0 000a 	sub.w	r0, r0, sl
 8013e10:	fa03 f000 	lsl.w	r0, r3, r0
 8013e14:	9b04      	ldr	r3, [sp, #16]
 8013e16:	4303      	orrs	r3, r0
 8013e18:	3401      	adds	r4, #1
 8013e1a:	9304      	str	r3, [sp, #16]
 8013e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e20:	482c      	ldr	r0, [pc, #176]	; (8013ed4 <_vfiprintf_r+0x250>)
 8013e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e26:	2206      	movs	r2, #6
 8013e28:	f7ec fa1a 	bl	8000260 <memchr>
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	d03f      	beq.n	8013eb0 <_vfiprintf_r+0x22c>
 8013e30:	4b29      	ldr	r3, [pc, #164]	; (8013ed8 <_vfiprintf_r+0x254>)
 8013e32:	bb1b      	cbnz	r3, 8013e7c <_vfiprintf_r+0x1f8>
 8013e34:	9b03      	ldr	r3, [sp, #12]
 8013e36:	3307      	adds	r3, #7
 8013e38:	f023 0307 	bic.w	r3, r3, #7
 8013e3c:	3308      	adds	r3, #8
 8013e3e:	9303      	str	r3, [sp, #12]
 8013e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e42:	443b      	add	r3, r7
 8013e44:	9309      	str	r3, [sp, #36]	; 0x24
 8013e46:	e767      	b.n	8013d18 <_vfiprintf_r+0x94>
 8013e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e4c:	460c      	mov	r4, r1
 8013e4e:	2001      	movs	r0, #1
 8013e50:	e7a5      	b.n	8013d9e <_vfiprintf_r+0x11a>
 8013e52:	2300      	movs	r3, #0
 8013e54:	3401      	adds	r4, #1
 8013e56:	9305      	str	r3, [sp, #20]
 8013e58:	4619      	mov	r1, r3
 8013e5a:	f04f 0c0a 	mov.w	ip, #10
 8013e5e:	4620      	mov	r0, r4
 8013e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e64:	3a30      	subs	r2, #48	; 0x30
 8013e66:	2a09      	cmp	r2, #9
 8013e68:	d903      	bls.n	8013e72 <_vfiprintf_r+0x1ee>
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d0c5      	beq.n	8013dfa <_vfiprintf_r+0x176>
 8013e6e:	9105      	str	r1, [sp, #20]
 8013e70:	e7c3      	b.n	8013dfa <_vfiprintf_r+0x176>
 8013e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e76:	4604      	mov	r4, r0
 8013e78:	2301      	movs	r3, #1
 8013e7a:	e7f0      	b.n	8013e5e <_vfiprintf_r+0x1da>
 8013e7c:	ab03      	add	r3, sp, #12
 8013e7e:	9300      	str	r3, [sp, #0]
 8013e80:	462a      	mov	r2, r5
 8013e82:	4b16      	ldr	r3, [pc, #88]	; (8013edc <_vfiprintf_r+0x258>)
 8013e84:	a904      	add	r1, sp, #16
 8013e86:	4630      	mov	r0, r6
 8013e88:	f3af 8000 	nop.w
 8013e8c:	4607      	mov	r7, r0
 8013e8e:	1c78      	adds	r0, r7, #1
 8013e90:	d1d6      	bne.n	8013e40 <_vfiprintf_r+0x1bc>
 8013e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e94:	07d9      	lsls	r1, r3, #31
 8013e96:	d405      	bmi.n	8013ea4 <_vfiprintf_r+0x220>
 8013e98:	89ab      	ldrh	r3, [r5, #12]
 8013e9a:	059a      	lsls	r2, r3, #22
 8013e9c:	d402      	bmi.n	8013ea4 <_vfiprintf_r+0x220>
 8013e9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ea0:	f7fd ff5d 	bl	8011d5e <__retarget_lock_release_recursive>
 8013ea4:	89ab      	ldrh	r3, [r5, #12]
 8013ea6:	065b      	lsls	r3, r3, #25
 8013ea8:	f53f af12 	bmi.w	8013cd0 <_vfiprintf_r+0x4c>
 8013eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013eae:	e711      	b.n	8013cd4 <_vfiprintf_r+0x50>
 8013eb0:	ab03      	add	r3, sp, #12
 8013eb2:	9300      	str	r3, [sp, #0]
 8013eb4:	462a      	mov	r2, r5
 8013eb6:	4b09      	ldr	r3, [pc, #36]	; (8013edc <_vfiprintf_r+0x258>)
 8013eb8:	a904      	add	r1, sp, #16
 8013eba:	4630      	mov	r0, r6
 8013ebc:	f000 f880 	bl	8013fc0 <_printf_i>
 8013ec0:	e7e4      	b.n	8013e8c <_vfiprintf_r+0x208>
 8013ec2:	bf00      	nop
 8013ec4:	08017738 	.word	0x08017738
 8013ec8:	08017758 	.word	0x08017758
 8013ecc:	08017718 	.word	0x08017718
 8013ed0:	08017cb7 	.word	0x08017cb7
 8013ed4:	08017cc1 	.word	0x08017cc1
 8013ed8:	00000000 	.word	0x00000000
 8013edc:	08013c5f 	.word	0x08013c5f
 8013ee0:	08017cbd 	.word	0x08017cbd

08013ee4 <_printf_common>:
 8013ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ee8:	4616      	mov	r6, r2
 8013eea:	4699      	mov	r9, r3
 8013eec:	688a      	ldr	r2, [r1, #8]
 8013eee:	690b      	ldr	r3, [r1, #16]
 8013ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013ef4:	4293      	cmp	r3, r2
 8013ef6:	bfb8      	it	lt
 8013ef8:	4613      	movlt	r3, r2
 8013efa:	6033      	str	r3, [r6, #0]
 8013efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f00:	4607      	mov	r7, r0
 8013f02:	460c      	mov	r4, r1
 8013f04:	b10a      	cbz	r2, 8013f0a <_printf_common+0x26>
 8013f06:	3301      	adds	r3, #1
 8013f08:	6033      	str	r3, [r6, #0]
 8013f0a:	6823      	ldr	r3, [r4, #0]
 8013f0c:	0699      	lsls	r1, r3, #26
 8013f0e:	bf42      	ittt	mi
 8013f10:	6833      	ldrmi	r3, [r6, #0]
 8013f12:	3302      	addmi	r3, #2
 8013f14:	6033      	strmi	r3, [r6, #0]
 8013f16:	6825      	ldr	r5, [r4, #0]
 8013f18:	f015 0506 	ands.w	r5, r5, #6
 8013f1c:	d106      	bne.n	8013f2c <_printf_common+0x48>
 8013f1e:	f104 0a19 	add.w	sl, r4, #25
 8013f22:	68e3      	ldr	r3, [r4, #12]
 8013f24:	6832      	ldr	r2, [r6, #0]
 8013f26:	1a9b      	subs	r3, r3, r2
 8013f28:	42ab      	cmp	r3, r5
 8013f2a:	dc26      	bgt.n	8013f7a <_printf_common+0x96>
 8013f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f30:	1e13      	subs	r3, r2, #0
 8013f32:	6822      	ldr	r2, [r4, #0]
 8013f34:	bf18      	it	ne
 8013f36:	2301      	movne	r3, #1
 8013f38:	0692      	lsls	r2, r2, #26
 8013f3a:	d42b      	bmi.n	8013f94 <_printf_common+0xb0>
 8013f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f40:	4649      	mov	r1, r9
 8013f42:	4638      	mov	r0, r7
 8013f44:	47c0      	blx	r8
 8013f46:	3001      	adds	r0, #1
 8013f48:	d01e      	beq.n	8013f88 <_printf_common+0xa4>
 8013f4a:	6823      	ldr	r3, [r4, #0]
 8013f4c:	68e5      	ldr	r5, [r4, #12]
 8013f4e:	6832      	ldr	r2, [r6, #0]
 8013f50:	f003 0306 	and.w	r3, r3, #6
 8013f54:	2b04      	cmp	r3, #4
 8013f56:	bf08      	it	eq
 8013f58:	1aad      	subeq	r5, r5, r2
 8013f5a:	68a3      	ldr	r3, [r4, #8]
 8013f5c:	6922      	ldr	r2, [r4, #16]
 8013f5e:	bf0c      	ite	eq
 8013f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f64:	2500      	movne	r5, #0
 8013f66:	4293      	cmp	r3, r2
 8013f68:	bfc4      	itt	gt
 8013f6a:	1a9b      	subgt	r3, r3, r2
 8013f6c:	18ed      	addgt	r5, r5, r3
 8013f6e:	2600      	movs	r6, #0
 8013f70:	341a      	adds	r4, #26
 8013f72:	42b5      	cmp	r5, r6
 8013f74:	d11a      	bne.n	8013fac <_printf_common+0xc8>
 8013f76:	2000      	movs	r0, #0
 8013f78:	e008      	b.n	8013f8c <_printf_common+0xa8>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	4652      	mov	r2, sl
 8013f7e:	4649      	mov	r1, r9
 8013f80:	4638      	mov	r0, r7
 8013f82:	47c0      	blx	r8
 8013f84:	3001      	adds	r0, #1
 8013f86:	d103      	bne.n	8013f90 <_printf_common+0xac>
 8013f88:	f04f 30ff 	mov.w	r0, #4294967295
 8013f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f90:	3501      	adds	r5, #1
 8013f92:	e7c6      	b.n	8013f22 <_printf_common+0x3e>
 8013f94:	18e1      	adds	r1, r4, r3
 8013f96:	1c5a      	adds	r2, r3, #1
 8013f98:	2030      	movs	r0, #48	; 0x30
 8013f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013f9e:	4422      	add	r2, r4
 8013fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013fa8:	3302      	adds	r3, #2
 8013faa:	e7c7      	b.n	8013f3c <_printf_common+0x58>
 8013fac:	2301      	movs	r3, #1
 8013fae:	4622      	mov	r2, r4
 8013fb0:	4649      	mov	r1, r9
 8013fb2:	4638      	mov	r0, r7
 8013fb4:	47c0      	blx	r8
 8013fb6:	3001      	adds	r0, #1
 8013fb8:	d0e6      	beq.n	8013f88 <_printf_common+0xa4>
 8013fba:	3601      	adds	r6, #1
 8013fbc:	e7d9      	b.n	8013f72 <_printf_common+0x8e>
	...

08013fc0 <_printf_i>:
 8013fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013fc4:	460c      	mov	r4, r1
 8013fc6:	4691      	mov	r9, r2
 8013fc8:	7e27      	ldrb	r7, [r4, #24]
 8013fca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013fcc:	2f78      	cmp	r7, #120	; 0x78
 8013fce:	4680      	mov	r8, r0
 8013fd0:	469a      	mov	sl, r3
 8013fd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013fd6:	d807      	bhi.n	8013fe8 <_printf_i+0x28>
 8013fd8:	2f62      	cmp	r7, #98	; 0x62
 8013fda:	d80a      	bhi.n	8013ff2 <_printf_i+0x32>
 8013fdc:	2f00      	cmp	r7, #0
 8013fde:	f000 80d8 	beq.w	8014192 <_printf_i+0x1d2>
 8013fe2:	2f58      	cmp	r7, #88	; 0x58
 8013fe4:	f000 80a3 	beq.w	801412e <_printf_i+0x16e>
 8013fe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ff0:	e03a      	b.n	8014068 <_printf_i+0xa8>
 8013ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013ff6:	2b15      	cmp	r3, #21
 8013ff8:	d8f6      	bhi.n	8013fe8 <_printf_i+0x28>
 8013ffa:	a001      	add	r0, pc, #4	; (adr r0, 8014000 <_printf_i+0x40>)
 8013ffc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014000:	08014059 	.word	0x08014059
 8014004:	0801406d 	.word	0x0801406d
 8014008:	08013fe9 	.word	0x08013fe9
 801400c:	08013fe9 	.word	0x08013fe9
 8014010:	08013fe9 	.word	0x08013fe9
 8014014:	08013fe9 	.word	0x08013fe9
 8014018:	0801406d 	.word	0x0801406d
 801401c:	08013fe9 	.word	0x08013fe9
 8014020:	08013fe9 	.word	0x08013fe9
 8014024:	08013fe9 	.word	0x08013fe9
 8014028:	08013fe9 	.word	0x08013fe9
 801402c:	08014179 	.word	0x08014179
 8014030:	0801409d 	.word	0x0801409d
 8014034:	0801415b 	.word	0x0801415b
 8014038:	08013fe9 	.word	0x08013fe9
 801403c:	08013fe9 	.word	0x08013fe9
 8014040:	0801419b 	.word	0x0801419b
 8014044:	08013fe9 	.word	0x08013fe9
 8014048:	0801409d 	.word	0x0801409d
 801404c:	08013fe9 	.word	0x08013fe9
 8014050:	08013fe9 	.word	0x08013fe9
 8014054:	08014163 	.word	0x08014163
 8014058:	680b      	ldr	r3, [r1, #0]
 801405a:	1d1a      	adds	r2, r3, #4
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	600a      	str	r2, [r1, #0]
 8014060:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014068:	2301      	movs	r3, #1
 801406a:	e0a3      	b.n	80141b4 <_printf_i+0x1f4>
 801406c:	6825      	ldr	r5, [r4, #0]
 801406e:	6808      	ldr	r0, [r1, #0]
 8014070:	062e      	lsls	r6, r5, #24
 8014072:	f100 0304 	add.w	r3, r0, #4
 8014076:	d50a      	bpl.n	801408e <_printf_i+0xce>
 8014078:	6805      	ldr	r5, [r0, #0]
 801407a:	600b      	str	r3, [r1, #0]
 801407c:	2d00      	cmp	r5, #0
 801407e:	da03      	bge.n	8014088 <_printf_i+0xc8>
 8014080:	232d      	movs	r3, #45	; 0x2d
 8014082:	426d      	negs	r5, r5
 8014084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014088:	485e      	ldr	r0, [pc, #376]	; (8014204 <_printf_i+0x244>)
 801408a:	230a      	movs	r3, #10
 801408c:	e019      	b.n	80140c2 <_printf_i+0x102>
 801408e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014092:	6805      	ldr	r5, [r0, #0]
 8014094:	600b      	str	r3, [r1, #0]
 8014096:	bf18      	it	ne
 8014098:	b22d      	sxthne	r5, r5
 801409a:	e7ef      	b.n	801407c <_printf_i+0xbc>
 801409c:	680b      	ldr	r3, [r1, #0]
 801409e:	6825      	ldr	r5, [r4, #0]
 80140a0:	1d18      	adds	r0, r3, #4
 80140a2:	6008      	str	r0, [r1, #0]
 80140a4:	0628      	lsls	r0, r5, #24
 80140a6:	d501      	bpl.n	80140ac <_printf_i+0xec>
 80140a8:	681d      	ldr	r5, [r3, #0]
 80140aa:	e002      	b.n	80140b2 <_printf_i+0xf2>
 80140ac:	0669      	lsls	r1, r5, #25
 80140ae:	d5fb      	bpl.n	80140a8 <_printf_i+0xe8>
 80140b0:	881d      	ldrh	r5, [r3, #0]
 80140b2:	4854      	ldr	r0, [pc, #336]	; (8014204 <_printf_i+0x244>)
 80140b4:	2f6f      	cmp	r7, #111	; 0x6f
 80140b6:	bf0c      	ite	eq
 80140b8:	2308      	moveq	r3, #8
 80140ba:	230a      	movne	r3, #10
 80140bc:	2100      	movs	r1, #0
 80140be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80140c2:	6866      	ldr	r6, [r4, #4]
 80140c4:	60a6      	str	r6, [r4, #8]
 80140c6:	2e00      	cmp	r6, #0
 80140c8:	bfa2      	ittt	ge
 80140ca:	6821      	ldrge	r1, [r4, #0]
 80140cc:	f021 0104 	bicge.w	r1, r1, #4
 80140d0:	6021      	strge	r1, [r4, #0]
 80140d2:	b90d      	cbnz	r5, 80140d8 <_printf_i+0x118>
 80140d4:	2e00      	cmp	r6, #0
 80140d6:	d04d      	beq.n	8014174 <_printf_i+0x1b4>
 80140d8:	4616      	mov	r6, r2
 80140da:	fbb5 f1f3 	udiv	r1, r5, r3
 80140de:	fb03 5711 	mls	r7, r3, r1, r5
 80140e2:	5dc7      	ldrb	r7, [r0, r7]
 80140e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80140e8:	462f      	mov	r7, r5
 80140ea:	42bb      	cmp	r3, r7
 80140ec:	460d      	mov	r5, r1
 80140ee:	d9f4      	bls.n	80140da <_printf_i+0x11a>
 80140f0:	2b08      	cmp	r3, #8
 80140f2:	d10b      	bne.n	801410c <_printf_i+0x14c>
 80140f4:	6823      	ldr	r3, [r4, #0]
 80140f6:	07df      	lsls	r7, r3, #31
 80140f8:	d508      	bpl.n	801410c <_printf_i+0x14c>
 80140fa:	6923      	ldr	r3, [r4, #16]
 80140fc:	6861      	ldr	r1, [r4, #4]
 80140fe:	4299      	cmp	r1, r3
 8014100:	bfde      	ittt	le
 8014102:	2330      	movle	r3, #48	; 0x30
 8014104:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014108:	f106 36ff 	addle.w	r6, r6, #4294967295
 801410c:	1b92      	subs	r2, r2, r6
 801410e:	6122      	str	r2, [r4, #16]
 8014110:	f8cd a000 	str.w	sl, [sp]
 8014114:	464b      	mov	r3, r9
 8014116:	aa03      	add	r2, sp, #12
 8014118:	4621      	mov	r1, r4
 801411a:	4640      	mov	r0, r8
 801411c:	f7ff fee2 	bl	8013ee4 <_printf_common>
 8014120:	3001      	adds	r0, #1
 8014122:	d14c      	bne.n	80141be <_printf_i+0x1fe>
 8014124:	f04f 30ff 	mov.w	r0, #4294967295
 8014128:	b004      	add	sp, #16
 801412a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801412e:	4835      	ldr	r0, [pc, #212]	; (8014204 <_printf_i+0x244>)
 8014130:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014134:	6823      	ldr	r3, [r4, #0]
 8014136:	680e      	ldr	r6, [r1, #0]
 8014138:	061f      	lsls	r7, r3, #24
 801413a:	f856 5b04 	ldr.w	r5, [r6], #4
 801413e:	600e      	str	r6, [r1, #0]
 8014140:	d514      	bpl.n	801416c <_printf_i+0x1ac>
 8014142:	07d9      	lsls	r1, r3, #31
 8014144:	bf44      	itt	mi
 8014146:	f043 0320 	orrmi.w	r3, r3, #32
 801414a:	6023      	strmi	r3, [r4, #0]
 801414c:	b91d      	cbnz	r5, 8014156 <_printf_i+0x196>
 801414e:	6823      	ldr	r3, [r4, #0]
 8014150:	f023 0320 	bic.w	r3, r3, #32
 8014154:	6023      	str	r3, [r4, #0]
 8014156:	2310      	movs	r3, #16
 8014158:	e7b0      	b.n	80140bc <_printf_i+0xfc>
 801415a:	6823      	ldr	r3, [r4, #0]
 801415c:	f043 0320 	orr.w	r3, r3, #32
 8014160:	6023      	str	r3, [r4, #0]
 8014162:	2378      	movs	r3, #120	; 0x78
 8014164:	4828      	ldr	r0, [pc, #160]	; (8014208 <_printf_i+0x248>)
 8014166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801416a:	e7e3      	b.n	8014134 <_printf_i+0x174>
 801416c:	065e      	lsls	r6, r3, #25
 801416e:	bf48      	it	mi
 8014170:	b2ad      	uxthmi	r5, r5
 8014172:	e7e6      	b.n	8014142 <_printf_i+0x182>
 8014174:	4616      	mov	r6, r2
 8014176:	e7bb      	b.n	80140f0 <_printf_i+0x130>
 8014178:	680b      	ldr	r3, [r1, #0]
 801417a:	6826      	ldr	r6, [r4, #0]
 801417c:	6960      	ldr	r0, [r4, #20]
 801417e:	1d1d      	adds	r5, r3, #4
 8014180:	600d      	str	r5, [r1, #0]
 8014182:	0635      	lsls	r5, r6, #24
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	d501      	bpl.n	801418c <_printf_i+0x1cc>
 8014188:	6018      	str	r0, [r3, #0]
 801418a:	e002      	b.n	8014192 <_printf_i+0x1d2>
 801418c:	0671      	lsls	r1, r6, #25
 801418e:	d5fb      	bpl.n	8014188 <_printf_i+0x1c8>
 8014190:	8018      	strh	r0, [r3, #0]
 8014192:	2300      	movs	r3, #0
 8014194:	6123      	str	r3, [r4, #16]
 8014196:	4616      	mov	r6, r2
 8014198:	e7ba      	b.n	8014110 <_printf_i+0x150>
 801419a:	680b      	ldr	r3, [r1, #0]
 801419c:	1d1a      	adds	r2, r3, #4
 801419e:	600a      	str	r2, [r1, #0]
 80141a0:	681e      	ldr	r6, [r3, #0]
 80141a2:	6862      	ldr	r2, [r4, #4]
 80141a4:	2100      	movs	r1, #0
 80141a6:	4630      	mov	r0, r6
 80141a8:	f7ec f85a 	bl	8000260 <memchr>
 80141ac:	b108      	cbz	r0, 80141b2 <_printf_i+0x1f2>
 80141ae:	1b80      	subs	r0, r0, r6
 80141b0:	6060      	str	r0, [r4, #4]
 80141b2:	6863      	ldr	r3, [r4, #4]
 80141b4:	6123      	str	r3, [r4, #16]
 80141b6:	2300      	movs	r3, #0
 80141b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141bc:	e7a8      	b.n	8014110 <_printf_i+0x150>
 80141be:	6923      	ldr	r3, [r4, #16]
 80141c0:	4632      	mov	r2, r6
 80141c2:	4649      	mov	r1, r9
 80141c4:	4640      	mov	r0, r8
 80141c6:	47d0      	blx	sl
 80141c8:	3001      	adds	r0, #1
 80141ca:	d0ab      	beq.n	8014124 <_printf_i+0x164>
 80141cc:	6823      	ldr	r3, [r4, #0]
 80141ce:	079b      	lsls	r3, r3, #30
 80141d0:	d413      	bmi.n	80141fa <_printf_i+0x23a>
 80141d2:	68e0      	ldr	r0, [r4, #12]
 80141d4:	9b03      	ldr	r3, [sp, #12]
 80141d6:	4298      	cmp	r0, r3
 80141d8:	bfb8      	it	lt
 80141da:	4618      	movlt	r0, r3
 80141dc:	e7a4      	b.n	8014128 <_printf_i+0x168>
 80141de:	2301      	movs	r3, #1
 80141e0:	4632      	mov	r2, r6
 80141e2:	4649      	mov	r1, r9
 80141e4:	4640      	mov	r0, r8
 80141e6:	47d0      	blx	sl
 80141e8:	3001      	adds	r0, #1
 80141ea:	d09b      	beq.n	8014124 <_printf_i+0x164>
 80141ec:	3501      	adds	r5, #1
 80141ee:	68e3      	ldr	r3, [r4, #12]
 80141f0:	9903      	ldr	r1, [sp, #12]
 80141f2:	1a5b      	subs	r3, r3, r1
 80141f4:	42ab      	cmp	r3, r5
 80141f6:	dcf2      	bgt.n	80141de <_printf_i+0x21e>
 80141f8:	e7eb      	b.n	80141d2 <_printf_i+0x212>
 80141fa:	2500      	movs	r5, #0
 80141fc:	f104 0619 	add.w	r6, r4, #25
 8014200:	e7f5      	b.n	80141ee <_printf_i+0x22e>
 8014202:	bf00      	nop
 8014204:	08017cc8 	.word	0x08017cc8
 8014208:	08017cd9 	.word	0x08017cd9

0801420c <_putc_r>:
 801420c:	b570      	push	{r4, r5, r6, lr}
 801420e:	460d      	mov	r5, r1
 8014210:	4614      	mov	r4, r2
 8014212:	4606      	mov	r6, r0
 8014214:	b118      	cbz	r0, 801421e <_putc_r+0x12>
 8014216:	6983      	ldr	r3, [r0, #24]
 8014218:	b90b      	cbnz	r3, 801421e <_putc_r+0x12>
 801421a:	f7fd f9eb 	bl	80115f4 <__sinit>
 801421e:	4b1c      	ldr	r3, [pc, #112]	; (8014290 <_putc_r+0x84>)
 8014220:	429c      	cmp	r4, r3
 8014222:	d124      	bne.n	801426e <_putc_r+0x62>
 8014224:	6874      	ldr	r4, [r6, #4]
 8014226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014228:	07d8      	lsls	r0, r3, #31
 801422a:	d405      	bmi.n	8014238 <_putc_r+0x2c>
 801422c:	89a3      	ldrh	r3, [r4, #12]
 801422e:	0599      	lsls	r1, r3, #22
 8014230:	d402      	bmi.n	8014238 <_putc_r+0x2c>
 8014232:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014234:	f7fd fd91 	bl	8011d5a <__retarget_lock_acquire_recursive>
 8014238:	68a3      	ldr	r3, [r4, #8]
 801423a:	3b01      	subs	r3, #1
 801423c:	2b00      	cmp	r3, #0
 801423e:	60a3      	str	r3, [r4, #8]
 8014240:	da05      	bge.n	801424e <_putc_r+0x42>
 8014242:	69a2      	ldr	r2, [r4, #24]
 8014244:	4293      	cmp	r3, r2
 8014246:	db1c      	blt.n	8014282 <_putc_r+0x76>
 8014248:	b2eb      	uxtb	r3, r5
 801424a:	2b0a      	cmp	r3, #10
 801424c:	d019      	beq.n	8014282 <_putc_r+0x76>
 801424e:	6823      	ldr	r3, [r4, #0]
 8014250:	1c5a      	adds	r2, r3, #1
 8014252:	6022      	str	r2, [r4, #0]
 8014254:	701d      	strb	r5, [r3, #0]
 8014256:	b2ed      	uxtb	r5, r5
 8014258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801425a:	07da      	lsls	r2, r3, #31
 801425c:	d405      	bmi.n	801426a <_putc_r+0x5e>
 801425e:	89a3      	ldrh	r3, [r4, #12]
 8014260:	059b      	lsls	r3, r3, #22
 8014262:	d402      	bmi.n	801426a <_putc_r+0x5e>
 8014264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014266:	f7fd fd7a 	bl	8011d5e <__retarget_lock_release_recursive>
 801426a:	4628      	mov	r0, r5
 801426c:	bd70      	pop	{r4, r5, r6, pc}
 801426e:	4b09      	ldr	r3, [pc, #36]	; (8014294 <_putc_r+0x88>)
 8014270:	429c      	cmp	r4, r3
 8014272:	d101      	bne.n	8014278 <_putc_r+0x6c>
 8014274:	68b4      	ldr	r4, [r6, #8]
 8014276:	e7d6      	b.n	8014226 <_putc_r+0x1a>
 8014278:	4b07      	ldr	r3, [pc, #28]	; (8014298 <_putc_r+0x8c>)
 801427a:	429c      	cmp	r4, r3
 801427c:	bf08      	it	eq
 801427e:	68f4      	ldreq	r4, [r6, #12]
 8014280:	e7d1      	b.n	8014226 <_putc_r+0x1a>
 8014282:	4629      	mov	r1, r5
 8014284:	4622      	mov	r2, r4
 8014286:	4630      	mov	r0, r6
 8014288:	f7ff f844 	bl	8013314 <__swbuf_r>
 801428c:	4605      	mov	r5, r0
 801428e:	e7e3      	b.n	8014258 <_putc_r+0x4c>
 8014290:	08017738 	.word	0x08017738
 8014294:	08017758 	.word	0x08017758
 8014298:	08017718 	.word	0x08017718

0801429c <_read_r>:
 801429c:	b538      	push	{r3, r4, r5, lr}
 801429e:	4d07      	ldr	r5, [pc, #28]	; (80142bc <_read_r+0x20>)
 80142a0:	4604      	mov	r4, r0
 80142a2:	4608      	mov	r0, r1
 80142a4:	4611      	mov	r1, r2
 80142a6:	2200      	movs	r2, #0
 80142a8:	602a      	str	r2, [r5, #0]
 80142aa:	461a      	mov	r2, r3
 80142ac:	f7ec fd4c 	bl	8000d48 <_read>
 80142b0:	1c43      	adds	r3, r0, #1
 80142b2:	d102      	bne.n	80142ba <_read_r+0x1e>
 80142b4:	682b      	ldr	r3, [r5, #0]
 80142b6:	b103      	cbz	r3, 80142ba <_read_r+0x1e>
 80142b8:	6023      	str	r3, [r4, #0]
 80142ba:	bd38      	pop	{r3, r4, r5, pc}
 80142bc:	20000ba4 	.word	0x20000ba4

080142c0 <sniprintf>:
 80142c0:	b40c      	push	{r2, r3}
 80142c2:	b530      	push	{r4, r5, lr}
 80142c4:	4b17      	ldr	r3, [pc, #92]	; (8014324 <sniprintf+0x64>)
 80142c6:	1e0c      	subs	r4, r1, #0
 80142c8:	681d      	ldr	r5, [r3, #0]
 80142ca:	b09d      	sub	sp, #116	; 0x74
 80142cc:	da08      	bge.n	80142e0 <sniprintf+0x20>
 80142ce:	238b      	movs	r3, #139	; 0x8b
 80142d0:	602b      	str	r3, [r5, #0]
 80142d2:	f04f 30ff 	mov.w	r0, #4294967295
 80142d6:	b01d      	add	sp, #116	; 0x74
 80142d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80142dc:	b002      	add	sp, #8
 80142de:	4770      	bx	lr
 80142e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80142e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80142e8:	bf14      	ite	ne
 80142ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80142ee:	4623      	moveq	r3, r4
 80142f0:	9304      	str	r3, [sp, #16]
 80142f2:	9307      	str	r3, [sp, #28]
 80142f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142f8:	9002      	str	r0, [sp, #8]
 80142fa:	9006      	str	r0, [sp, #24]
 80142fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014300:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014302:	ab21      	add	r3, sp, #132	; 0x84
 8014304:	a902      	add	r1, sp, #8
 8014306:	4628      	mov	r0, r5
 8014308:	9301      	str	r3, [sp, #4]
 801430a:	f7ff fb91 	bl	8013a30 <_svfiprintf_r>
 801430e:	1c43      	adds	r3, r0, #1
 8014310:	bfbc      	itt	lt
 8014312:	238b      	movlt	r3, #139	; 0x8b
 8014314:	602b      	strlt	r3, [r5, #0]
 8014316:	2c00      	cmp	r4, #0
 8014318:	d0dd      	beq.n	80142d6 <sniprintf+0x16>
 801431a:	9b02      	ldr	r3, [sp, #8]
 801431c:	2200      	movs	r2, #0
 801431e:	701a      	strb	r2, [r3, #0]
 8014320:	e7d9      	b.n	80142d6 <sniprintf+0x16>
 8014322:	bf00      	nop
 8014324:	20000100 	.word	0x20000100

08014328 <siscanf>:
 8014328:	b40e      	push	{r1, r2, r3}
 801432a:	b510      	push	{r4, lr}
 801432c:	b09f      	sub	sp, #124	; 0x7c
 801432e:	ac21      	add	r4, sp, #132	; 0x84
 8014330:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014334:	f854 2b04 	ldr.w	r2, [r4], #4
 8014338:	9201      	str	r2, [sp, #4]
 801433a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801433e:	9004      	str	r0, [sp, #16]
 8014340:	9008      	str	r0, [sp, #32]
 8014342:	f7eb ff7b 	bl	800023c <strlen>
 8014346:	4b0c      	ldr	r3, [pc, #48]	; (8014378 <siscanf+0x50>)
 8014348:	9005      	str	r0, [sp, #20]
 801434a:	9009      	str	r0, [sp, #36]	; 0x24
 801434c:	930d      	str	r3, [sp, #52]	; 0x34
 801434e:	480b      	ldr	r0, [pc, #44]	; (801437c <siscanf+0x54>)
 8014350:	9a01      	ldr	r2, [sp, #4]
 8014352:	6800      	ldr	r0, [r0, #0]
 8014354:	9403      	str	r4, [sp, #12]
 8014356:	2300      	movs	r3, #0
 8014358:	9311      	str	r3, [sp, #68]	; 0x44
 801435a:	9316      	str	r3, [sp, #88]	; 0x58
 801435c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014360:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014364:	a904      	add	r1, sp, #16
 8014366:	4623      	mov	r3, r4
 8014368:	f000 f8ba 	bl	80144e0 <__ssvfiscanf_r>
 801436c:	b01f      	add	sp, #124	; 0x7c
 801436e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014372:	b003      	add	sp, #12
 8014374:	4770      	bx	lr
 8014376:	bf00      	nop
 8014378:	080121cf 	.word	0x080121cf
 801437c:	20000100 	.word	0x20000100

08014380 <strcpy>:
 8014380:	4603      	mov	r3, r0
 8014382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014386:	f803 2b01 	strb.w	r2, [r3], #1
 801438a:	2a00      	cmp	r2, #0
 801438c:	d1f9      	bne.n	8014382 <strcpy+0x2>
 801438e:	4770      	bx	lr

08014390 <strncmp>:
 8014390:	b510      	push	{r4, lr}
 8014392:	b16a      	cbz	r2, 80143b0 <strncmp+0x20>
 8014394:	3901      	subs	r1, #1
 8014396:	1884      	adds	r4, r0, r2
 8014398:	f810 3b01 	ldrb.w	r3, [r0], #1
 801439c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80143a0:	4293      	cmp	r3, r2
 80143a2:	d103      	bne.n	80143ac <strncmp+0x1c>
 80143a4:	42a0      	cmp	r0, r4
 80143a6:	d001      	beq.n	80143ac <strncmp+0x1c>
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d1f5      	bne.n	8014398 <strncmp+0x8>
 80143ac:	1a98      	subs	r0, r3, r2
 80143ae:	bd10      	pop	{r4, pc}
 80143b0:	4610      	mov	r0, r2
 80143b2:	e7fc      	b.n	80143ae <strncmp+0x1e>

080143b4 <__ascii_wctomb>:
 80143b4:	b149      	cbz	r1, 80143ca <__ascii_wctomb+0x16>
 80143b6:	2aff      	cmp	r2, #255	; 0xff
 80143b8:	bf85      	ittet	hi
 80143ba:	238a      	movhi	r3, #138	; 0x8a
 80143bc:	6003      	strhi	r3, [r0, #0]
 80143be:	700a      	strbls	r2, [r1, #0]
 80143c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80143c4:	bf98      	it	ls
 80143c6:	2001      	movls	r0, #1
 80143c8:	4770      	bx	lr
 80143ca:	4608      	mov	r0, r1
 80143cc:	4770      	bx	lr
	...

080143d0 <__env_lock>:
 80143d0:	4801      	ldr	r0, [pc, #4]	; (80143d8 <__env_lock+0x8>)
 80143d2:	f7fd bcc2 	b.w	8011d5a <__retarget_lock_acquire_recursive>
 80143d6:	bf00      	nop
 80143d8:	20000b9a 	.word	0x20000b9a

080143dc <__env_unlock>:
 80143dc:	4801      	ldr	r0, [pc, #4]	; (80143e4 <__env_unlock+0x8>)
 80143de:	f7fd bcbe 	b.w	8011d5e <__retarget_lock_release_recursive>
 80143e2:	bf00      	nop
 80143e4:	20000b9a 	.word	0x20000b9a

080143e8 <memmove>:
 80143e8:	4288      	cmp	r0, r1
 80143ea:	b510      	push	{r4, lr}
 80143ec:	eb01 0402 	add.w	r4, r1, r2
 80143f0:	d902      	bls.n	80143f8 <memmove+0x10>
 80143f2:	4284      	cmp	r4, r0
 80143f4:	4623      	mov	r3, r4
 80143f6:	d807      	bhi.n	8014408 <memmove+0x20>
 80143f8:	1e43      	subs	r3, r0, #1
 80143fa:	42a1      	cmp	r1, r4
 80143fc:	d008      	beq.n	8014410 <memmove+0x28>
 80143fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014406:	e7f8      	b.n	80143fa <memmove+0x12>
 8014408:	4402      	add	r2, r0
 801440a:	4601      	mov	r1, r0
 801440c:	428a      	cmp	r2, r1
 801440e:	d100      	bne.n	8014412 <memmove+0x2a>
 8014410:	bd10      	pop	{r4, pc}
 8014412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801441a:	e7f7      	b.n	801440c <memmove+0x24>

0801441c <_malloc_usable_size_r>:
 801441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014420:	1f18      	subs	r0, r3, #4
 8014422:	2b00      	cmp	r3, #0
 8014424:	bfbc      	itt	lt
 8014426:	580b      	ldrlt	r3, [r1, r0]
 8014428:	18c0      	addlt	r0, r0, r3
 801442a:	4770      	bx	lr

0801442c <_sungetc_r>:
 801442c:	b538      	push	{r3, r4, r5, lr}
 801442e:	1c4b      	adds	r3, r1, #1
 8014430:	4614      	mov	r4, r2
 8014432:	d103      	bne.n	801443c <_sungetc_r+0x10>
 8014434:	f04f 35ff 	mov.w	r5, #4294967295
 8014438:	4628      	mov	r0, r5
 801443a:	bd38      	pop	{r3, r4, r5, pc}
 801443c:	8993      	ldrh	r3, [r2, #12]
 801443e:	f023 0320 	bic.w	r3, r3, #32
 8014442:	8193      	strh	r3, [r2, #12]
 8014444:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014446:	6852      	ldr	r2, [r2, #4]
 8014448:	b2cd      	uxtb	r5, r1
 801444a:	b18b      	cbz	r3, 8014470 <_sungetc_r+0x44>
 801444c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801444e:	4293      	cmp	r3, r2
 8014450:	dd08      	ble.n	8014464 <_sungetc_r+0x38>
 8014452:	6823      	ldr	r3, [r4, #0]
 8014454:	1e5a      	subs	r2, r3, #1
 8014456:	6022      	str	r2, [r4, #0]
 8014458:	f803 5c01 	strb.w	r5, [r3, #-1]
 801445c:	6863      	ldr	r3, [r4, #4]
 801445e:	3301      	adds	r3, #1
 8014460:	6063      	str	r3, [r4, #4]
 8014462:	e7e9      	b.n	8014438 <_sungetc_r+0xc>
 8014464:	4621      	mov	r1, r4
 8014466:	f000 fbbf 	bl	8014be8 <__submore>
 801446a:	2800      	cmp	r0, #0
 801446c:	d0f1      	beq.n	8014452 <_sungetc_r+0x26>
 801446e:	e7e1      	b.n	8014434 <_sungetc_r+0x8>
 8014470:	6921      	ldr	r1, [r4, #16]
 8014472:	6823      	ldr	r3, [r4, #0]
 8014474:	b151      	cbz	r1, 801448c <_sungetc_r+0x60>
 8014476:	4299      	cmp	r1, r3
 8014478:	d208      	bcs.n	801448c <_sungetc_r+0x60>
 801447a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801447e:	42a9      	cmp	r1, r5
 8014480:	d104      	bne.n	801448c <_sungetc_r+0x60>
 8014482:	3b01      	subs	r3, #1
 8014484:	3201      	adds	r2, #1
 8014486:	6023      	str	r3, [r4, #0]
 8014488:	6062      	str	r2, [r4, #4]
 801448a:	e7d5      	b.n	8014438 <_sungetc_r+0xc>
 801448c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014494:	6363      	str	r3, [r4, #52]	; 0x34
 8014496:	2303      	movs	r3, #3
 8014498:	63a3      	str	r3, [r4, #56]	; 0x38
 801449a:	4623      	mov	r3, r4
 801449c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80144a0:	6023      	str	r3, [r4, #0]
 80144a2:	2301      	movs	r3, #1
 80144a4:	e7dc      	b.n	8014460 <_sungetc_r+0x34>

080144a6 <__ssrefill_r>:
 80144a6:	b510      	push	{r4, lr}
 80144a8:	460c      	mov	r4, r1
 80144aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80144ac:	b169      	cbz	r1, 80144ca <__ssrefill_r+0x24>
 80144ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144b2:	4299      	cmp	r1, r3
 80144b4:	d001      	beq.n	80144ba <__ssrefill_r+0x14>
 80144b6:	f7fd fcdd 	bl	8011e74 <_free_r>
 80144ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80144bc:	6063      	str	r3, [r4, #4]
 80144be:	2000      	movs	r0, #0
 80144c0:	6360      	str	r0, [r4, #52]	; 0x34
 80144c2:	b113      	cbz	r3, 80144ca <__ssrefill_r+0x24>
 80144c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80144c6:	6023      	str	r3, [r4, #0]
 80144c8:	bd10      	pop	{r4, pc}
 80144ca:	6923      	ldr	r3, [r4, #16]
 80144cc:	6023      	str	r3, [r4, #0]
 80144ce:	2300      	movs	r3, #0
 80144d0:	6063      	str	r3, [r4, #4]
 80144d2:	89a3      	ldrh	r3, [r4, #12]
 80144d4:	f043 0320 	orr.w	r3, r3, #32
 80144d8:	81a3      	strh	r3, [r4, #12]
 80144da:	f04f 30ff 	mov.w	r0, #4294967295
 80144de:	e7f3      	b.n	80144c8 <__ssrefill_r+0x22>

080144e0 <__ssvfiscanf_r>:
 80144e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e4:	460c      	mov	r4, r1
 80144e6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80144ea:	2100      	movs	r1, #0
 80144ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80144f0:	49b2      	ldr	r1, [pc, #712]	; (80147bc <__ssvfiscanf_r+0x2dc>)
 80144f2:	91a0      	str	r1, [sp, #640]	; 0x280
 80144f4:	f10d 0804 	add.w	r8, sp, #4
 80144f8:	49b1      	ldr	r1, [pc, #708]	; (80147c0 <__ssvfiscanf_r+0x2e0>)
 80144fa:	4fb2      	ldr	r7, [pc, #712]	; (80147c4 <__ssvfiscanf_r+0x2e4>)
 80144fc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80147c8 <__ssvfiscanf_r+0x2e8>
 8014500:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014504:	4606      	mov	r6, r0
 8014506:	91a1      	str	r1, [sp, #644]	; 0x284
 8014508:	9300      	str	r3, [sp, #0]
 801450a:	f892 a000 	ldrb.w	sl, [r2]
 801450e:	f1ba 0f00 	cmp.w	sl, #0
 8014512:	f000 8151 	beq.w	80147b8 <__ssvfiscanf_r+0x2d8>
 8014516:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801451a:	f013 0308 	ands.w	r3, r3, #8
 801451e:	f102 0501 	add.w	r5, r2, #1
 8014522:	d019      	beq.n	8014558 <__ssvfiscanf_r+0x78>
 8014524:	6863      	ldr	r3, [r4, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	dd0f      	ble.n	801454a <__ssvfiscanf_r+0x6a>
 801452a:	6823      	ldr	r3, [r4, #0]
 801452c:	781a      	ldrb	r2, [r3, #0]
 801452e:	5cba      	ldrb	r2, [r7, r2]
 8014530:	0712      	lsls	r2, r2, #28
 8014532:	d401      	bmi.n	8014538 <__ssvfiscanf_r+0x58>
 8014534:	462a      	mov	r2, r5
 8014536:	e7e8      	b.n	801450a <__ssvfiscanf_r+0x2a>
 8014538:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801453a:	3201      	adds	r2, #1
 801453c:	9245      	str	r2, [sp, #276]	; 0x114
 801453e:	6862      	ldr	r2, [r4, #4]
 8014540:	3301      	adds	r3, #1
 8014542:	3a01      	subs	r2, #1
 8014544:	6062      	str	r2, [r4, #4]
 8014546:	6023      	str	r3, [r4, #0]
 8014548:	e7ec      	b.n	8014524 <__ssvfiscanf_r+0x44>
 801454a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801454c:	4621      	mov	r1, r4
 801454e:	4630      	mov	r0, r6
 8014550:	4798      	blx	r3
 8014552:	2800      	cmp	r0, #0
 8014554:	d0e9      	beq.n	801452a <__ssvfiscanf_r+0x4a>
 8014556:	e7ed      	b.n	8014534 <__ssvfiscanf_r+0x54>
 8014558:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801455c:	f040 8083 	bne.w	8014666 <__ssvfiscanf_r+0x186>
 8014560:	9341      	str	r3, [sp, #260]	; 0x104
 8014562:	9343      	str	r3, [sp, #268]	; 0x10c
 8014564:	7853      	ldrb	r3, [r2, #1]
 8014566:	2b2a      	cmp	r3, #42	; 0x2a
 8014568:	bf02      	ittt	eq
 801456a:	2310      	moveq	r3, #16
 801456c:	1c95      	addeq	r5, r2, #2
 801456e:	9341      	streq	r3, [sp, #260]	; 0x104
 8014570:	220a      	movs	r2, #10
 8014572:	46ab      	mov	fp, r5
 8014574:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8014578:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801457c:	2b09      	cmp	r3, #9
 801457e:	d91d      	bls.n	80145bc <__ssvfiscanf_r+0xdc>
 8014580:	4891      	ldr	r0, [pc, #580]	; (80147c8 <__ssvfiscanf_r+0x2e8>)
 8014582:	2203      	movs	r2, #3
 8014584:	f7eb fe6c 	bl	8000260 <memchr>
 8014588:	b140      	cbz	r0, 801459c <__ssvfiscanf_r+0xbc>
 801458a:	2301      	movs	r3, #1
 801458c:	eba0 0009 	sub.w	r0, r0, r9
 8014590:	fa03 f000 	lsl.w	r0, r3, r0
 8014594:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014596:	4318      	orrs	r0, r3
 8014598:	9041      	str	r0, [sp, #260]	; 0x104
 801459a:	465d      	mov	r5, fp
 801459c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80145a0:	2b78      	cmp	r3, #120	; 0x78
 80145a2:	d806      	bhi.n	80145b2 <__ssvfiscanf_r+0xd2>
 80145a4:	2b57      	cmp	r3, #87	; 0x57
 80145a6:	d810      	bhi.n	80145ca <__ssvfiscanf_r+0xea>
 80145a8:	2b25      	cmp	r3, #37	; 0x25
 80145aa:	d05c      	beq.n	8014666 <__ssvfiscanf_r+0x186>
 80145ac:	d856      	bhi.n	801465c <__ssvfiscanf_r+0x17c>
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d074      	beq.n	801469c <__ssvfiscanf_r+0x1bc>
 80145b2:	2303      	movs	r3, #3
 80145b4:	9347      	str	r3, [sp, #284]	; 0x11c
 80145b6:	230a      	movs	r3, #10
 80145b8:	9342      	str	r3, [sp, #264]	; 0x108
 80145ba:	e081      	b.n	80146c0 <__ssvfiscanf_r+0x1e0>
 80145bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80145be:	fb02 1303 	mla	r3, r2, r3, r1
 80145c2:	3b30      	subs	r3, #48	; 0x30
 80145c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80145c6:	465d      	mov	r5, fp
 80145c8:	e7d3      	b.n	8014572 <__ssvfiscanf_r+0x92>
 80145ca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80145ce:	2a20      	cmp	r2, #32
 80145d0:	d8ef      	bhi.n	80145b2 <__ssvfiscanf_r+0xd2>
 80145d2:	a101      	add	r1, pc, #4	; (adr r1, 80145d8 <__ssvfiscanf_r+0xf8>)
 80145d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80145d8:	080146ab 	.word	0x080146ab
 80145dc:	080145b3 	.word	0x080145b3
 80145e0:	080145b3 	.word	0x080145b3
 80145e4:	08014709 	.word	0x08014709
 80145e8:	080145b3 	.word	0x080145b3
 80145ec:	080145b3 	.word	0x080145b3
 80145f0:	080145b3 	.word	0x080145b3
 80145f4:	080145b3 	.word	0x080145b3
 80145f8:	080145b3 	.word	0x080145b3
 80145fc:	080145b3 	.word	0x080145b3
 8014600:	080145b3 	.word	0x080145b3
 8014604:	0801471f 	.word	0x0801471f
 8014608:	080146f5 	.word	0x080146f5
 801460c:	08014663 	.word	0x08014663
 8014610:	08014663 	.word	0x08014663
 8014614:	08014663 	.word	0x08014663
 8014618:	080145b3 	.word	0x080145b3
 801461c:	080146f9 	.word	0x080146f9
 8014620:	080145b3 	.word	0x080145b3
 8014624:	080145b3 	.word	0x080145b3
 8014628:	080145b3 	.word	0x080145b3
 801462c:	080145b3 	.word	0x080145b3
 8014630:	0801472f 	.word	0x0801472f
 8014634:	08014701 	.word	0x08014701
 8014638:	080146a3 	.word	0x080146a3
 801463c:	080145b3 	.word	0x080145b3
 8014640:	080145b3 	.word	0x080145b3
 8014644:	0801472b 	.word	0x0801472b
 8014648:	080145b3 	.word	0x080145b3
 801464c:	080146f5 	.word	0x080146f5
 8014650:	080145b3 	.word	0x080145b3
 8014654:	080145b3 	.word	0x080145b3
 8014658:	080146ab 	.word	0x080146ab
 801465c:	3b45      	subs	r3, #69	; 0x45
 801465e:	2b02      	cmp	r3, #2
 8014660:	d8a7      	bhi.n	80145b2 <__ssvfiscanf_r+0xd2>
 8014662:	2305      	movs	r3, #5
 8014664:	e02b      	b.n	80146be <__ssvfiscanf_r+0x1de>
 8014666:	6863      	ldr	r3, [r4, #4]
 8014668:	2b00      	cmp	r3, #0
 801466a:	dd0d      	ble.n	8014688 <__ssvfiscanf_r+0x1a8>
 801466c:	6823      	ldr	r3, [r4, #0]
 801466e:	781a      	ldrb	r2, [r3, #0]
 8014670:	4552      	cmp	r2, sl
 8014672:	f040 80a1 	bne.w	80147b8 <__ssvfiscanf_r+0x2d8>
 8014676:	3301      	adds	r3, #1
 8014678:	6862      	ldr	r2, [r4, #4]
 801467a:	6023      	str	r3, [r4, #0]
 801467c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801467e:	3a01      	subs	r2, #1
 8014680:	3301      	adds	r3, #1
 8014682:	6062      	str	r2, [r4, #4]
 8014684:	9345      	str	r3, [sp, #276]	; 0x114
 8014686:	e755      	b.n	8014534 <__ssvfiscanf_r+0x54>
 8014688:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801468a:	4621      	mov	r1, r4
 801468c:	4630      	mov	r0, r6
 801468e:	4798      	blx	r3
 8014690:	2800      	cmp	r0, #0
 8014692:	d0eb      	beq.n	801466c <__ssvfiscanf_r+0x18c>
 8014694:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014696:	2800      	cmp	r0, #0
 8014698:	f040 8084 	bne.w	80147a4 <__ssvfiscanf_r+0x2c4>
 801469c:	f04f 30ff 	mov.w	r0, #4294967295
 80146a0:	e086      	b.n	80147b0 <__ssvfiscanf_r+0x2d0>
 80146a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80146a4:	f042 0220 	orr.w	r2, r2, #32
 80146a8:	9241      	str	r2, [sp, #260]	; 0x104
 80146aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80146ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80146b0:	9241      	str	r2, [sp, #260]	; 0x104
 80146b2:	2210      	movs	r2, #16
 80146b4:	2b6f      	cmp	r3, #111	; 0x6f
 80146b6:	9242      	str	r2, [sp, #264]	; 0x108
 80146b8:	bf34      	ite	cc
 80146ba:	2303      	movcc	r3, #3
 80146bc:	2304      	movcs	r3, #4
 80146be:	9347      	str	r3, [sp, #284]	; 0x11c
 80146c0:	6863      	ldr	r3, [r4, #4]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	dd41      	ble.n	801474a <__ssvfiscanf_r+0x26a>
 80146c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80146c8:	0659      	lsls	r1, r3, #25
 80146ca:	d404      	bmi.n	80146d6 <__ssvfiscanf_r+0x1f6>
 80146cc:	6823      	ldr	r3, [r4, #0]
 80146ce:	781a      	ldrb	r2, [r3, #0]
 80146d0:	5cba      	ldrb	r2, [r7, r2]
 80146d2:	0712      	lsls	r2, r2, #28
 80146d4:	d440      	bmi.n	8014758 <__ssvfiscanf_r+0x278>
 80146d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80146d8:	2b02      	cmp	r3, #2
 80146da:	dc4f      	bgt.n	801477c <__ssvfiscanf_r+0x29c>
 80146dc:	466b      	mov	r3, sp
 80146de:	4622      	mov	r2, r4
 80146e0:	a941      	add	r1, sp, #260	; 0x104
 80146e2:	4630      	mov	r0, r6
 80146e4:	f000 f874 	bl	80147d0 <_scanf_chars>
 80146e8:	2801      	cmp	r0, #1
 80146ea:	d065      	beq.n	80147b8 <__ssvfiscanf_r+0x2d8>
 80146ec:	2802      	cmp	r0, #2
 80146ee:	f47f af21 	bne.w	8014534 <__ssvfiscanf_r+0x54>
 80146f2:	e7cf      	b.n	8014694 <__ssvfiscanf_r+0x1b4>
 80146f4:	220a      	movs	r2, #10
 80146f6:	e7dd      	b.n	80146b4 <__ssvfiscanf_r+0x1d4>
 80146f8:	2300      	movs	r3, #0
 80146fa:	9342      	str	r3, [sp, #264]	; 0x108
 80146fc:	2303      	movs	r3, #3
 80146fe:	e7de      	b.n	80146be <__ssvfiscanf_r+0x1de>
 8014700:	2308      	movs	r3, #8
 8014702:	9342      	str	r3, [sp, #264]	; 0x108
 8014704:	2304      	movs	r3, #4
 8014706:	e7da      	b.n	80146be <__ssvfiscanf_r+0x1de>
 8014708:	4629      	mov	r1, r5
 801470a:	4640      	mov	r0, r8
 801470c:	f000 f9ac 	bl	8014a68 <__sccl>
 8014710:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014716:	9341      	str	r3, [sp, #260]	; 0x104
 8014718:	4605      	mov	r5, r0
 801471a:	2301      	movs	r3, #1
 801471c:	e7cf      	b.n	80146be <__ssvfiscanf_r+0x1de>
 801471e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014724:	9341      	str	r3, [sp, #260]	; 0x104
 8014726:	2300      	movs	r3, #0
 8014728:	e7c9      	b.n	80146be <__ssvfiscanf_r+0x1de>
 801472a:	2302      	movs	r3, #2
 801472c:	e7c7      	b.n	80146be <__ssvfiscanf_r+0x1de>
 801472e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014730:	06c3      	lsls	r3, r0, #27
 8014732:	f53f aeff 	bmi.w	8014534 <__ssvfiscanf_r+0x54>
 8014736:	9b00      	ldr	r3, [sp, #0]
 8014738:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801473a:	1d19      	adds	r1, r3, #4
 801473c:	9100      	str	r1, [sp, #0]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	07c0      	lsls	r0, r0, #31
 8014742:	bf4c      	ite	mi
 8014744:	801a      	strhmi	r2, [r3, #0]
 8014746:	601a      	strpl	r2, [r3, #0]
 8014748:	e6f4      	b.n	8014534 <__ssvfiscanf_r+0x54>
 801474a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801474c:	4621      	mov	r1, r4
 801474e:	4630      	mov	r0, r6
 8014750:	4798      	blx	r3
 8014752:	2800      	cmp	r0, #0
 8014754:	d0b7      	beq.n	80146c6 <__ssvfiscanf_r+0x1e6>
 8014756:	e79d      	b.n	8014694 <__ssvfiscanf_r+0x1b4>
 8014758:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801475a:	3201      	adds	r2, #1
 801475c:	9245      	str	r2, [sp, #276]	; 0x114
 801475e:	6862      	ldr	r2, [r4, #4]
 8014760:	3a01      	subs	r2, #1
 8014762:	2a00      	cmp	r2, #0
 8014764:	6062      	str	r2, [r4, #4]
 8014766:	dd02      	ble.n	801476e <__ssvfiscanf_r+0x28e>
 8014768:	3301      	adds	r3, #1
 801476a:	6023      	str	r3, [r4, #0]
 801476c:	e7ae      	b.n	80146cc <__ssvfiscanf_r+0x1ec>
 801476e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014770:	4621      	mov	r1, r4
 8014772:	4630      	mov	r0, r6
 8014774:	4798      	blx	r3
 8014776:	2800      	cmp	r0, #0
 8014778:	d0a8      	beq.n	80146cc <__ssvfiscanf_r+0x1ec>
 801477a:	e78b      	b.n	8014694 <__ssvfiscanf_r+0x1b4>
 801477c:	2b04      	cmp	r3, #4
 801477e:	dc06      	bgt.n	801478e <__ssvfiscanf_r+0x2ae>
 8014780:	466b      	mov	r3, sp
 8014782:	4622      	mov	r2, r4
 8014784:	a941      	add	r1, sp, #260	; 0x104
 8014786:	4630      	mov	r0, r6
 8014788:	f000 f87a 	bl	8014880 <_scanf_i>
 801478c:	e7ac      	b.n	80146e8 <__ssvfiscanf_r+0x208>
 801478e:	4b0f      	ldr	r3, [pc, #60]	; (80147cc <__ssvfiscanf_r+0x2ec>)
 8014790:	2b00      	cmp	r3, #0
 8014792:	f43f aecf 	beq.w	8014534 <__ssvfiscanf_r+0x54>
 8014796:	466b      	mov	r3, sp
 8014798:	4622      	mov	r2, r4
 801479a:	a941      	add	r1, sp, #260	; 0x104
 801479c:	4630      	mov	r0, r6
 801479e:	f3af 8000 	nop.w
 80147a2:	e7a1      	b.n	80146e8 <__ssvfiscanf_r+0x208>
 80147a4:	89a3      	ldrh	r3, [r4, #12]
 80147a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80147aa:	bf18      	it	ne
 80147ac:	f04f 30ff 	movne.w	r0, #4294967295
 80147b0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80147b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80147ba:	e7f9      	b.n	80147b0 <__ssvfiscanf_r+0x2d0>
 80147bc:	0801442d 	.word	0x0801442d
 80147c0:	080144a7 	.word	0x080144a7
 80147c4:	08017bad 	.word	0x08017bad
 80147c8:	08017cbd 	.word	0x08017cbd
 80147cc:	00000000 	.word	0x00000000

080147d0 <_scanf_chars>:
 80147d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147d4:	4615      	mov	r5, r2
 80147d6:	688a      	ldr	r2, [r1, #8]
 80147d8:	4680      	mov	r8, r0
 80147da:	460c      	mov	r4, r1
 80147dc:	b932      	cbnz	r2, 80147ec <_scanf_chars+0x1c>
 80147de:	698a      	ldr	r2, [r1, #24]
 80147e0:	2a00      	cmp	r2, #0
 80147e2:	bf0c      	ite	eq
 80147e4:	2201      	moveq	r2, #1
 80147e6:	f04f 32ff 	movne.w	r2, #4294967295
 80147ea:	608a      	str	r2, [r1, #8]
 80147ec:	6822      	ldr	r2, [r4, #0]
 80147ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801487c <_scanf_chars+0xac>
 80147f2:	06d1      	lsls	r1, r2, #27
 80147f4:	bf5f      	itttt	pl
 80147f6:	681a      	ldrpl	r2, [r3, #0]
 80147f8:	1d11      	addpl	r1, r2, #4
 80147fa:	6019      	strpl	r1, [r3, #0]
 80147fc:	6816      	ldrpl	r6, [r2, #0]
 80147fe:	2700      	movs	r7, #0
 8014800:	69a0      	ldr	r0, [r4, #24]
 8014802:	b188      	cbz	r0, 8014828 <_scanf_chars+0x58>
 8014804:	2801      	cmp	r0, #1
 8014806:	d107      	bne.n	8014818 <_scanf_chars+0x48>
 8014808:	682b      	ldr	r3, [r5, #0]
 801480a:	781a      	ldrb	r2, [r3, #0]
 801480c:	6963      	ldr	r3, [r4, #20]
 801480e:	5c9b      	ldrb	r3, [r3, r2]
 8014810:	b953      	cbnz	r3, 8014828 <_scanf_chars+0x58>
 8014812:	bb27      	cbnz	r7, 801485e <_scanf_chars+0x8e>
 8014814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014818:	2802      	cmp	r0, #2
 801481a:	d120      	bne.n	801485e <_scanf_chars+0x8e>
 801481c:	682b      	ldr	r3, [r5, #0]
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014824:	071b      	lsls	r3, r3, #28
 8014826:	d41a      	bmi.n	801485e <_scanf_chars+0x8e>
 8014828:	6823      	ldr	r3, [r4, #0]
 801482a:	06da      	lsls	r2, r3, #27
 801482c:	bf5e      	ittt	pl
 801482e:	682b      	ldrpl	r3, [r5, #0]
 8014830:	781b      	ldrbpl	r3, [r3, #0]
 8014832:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014836:	682a      	ldr	r2, [r5, #0]
 8014838:	686b      	ldr	r3, [r5, #4]
 801483a:	3201      	adds	r2, #1
 801483c:	602a      	str	r2, [r5, #0]
 801483e:	68a2      	ldr	r2, [r4, #8]
 8014840:	3b01      	subs	r3, #1
 8014842:	3a01      	subs	r2, #1
 8014844:	606b      	str	r3, [r5, #4]
 8014846:	3701      	adds	r7, #1
 8014848:	60a2      	str	r2, [r4, #8]
 801484a:	b142      	cbz	r2, 801485e <_scanf_chars+0x8e>
 801484c:	2b00      	cmp	r3, #0
 801484e:	dcd7      	bgt.n	8014800 <_scanf_chars+0x30>
 8014850:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014854:	4629      	mov	r1, r5
 8014856:	4640      	mov	r0, r8
 8014858:	4798      	blx	r3
 801485a:	2800      	cmp	r0, #0
 801485c:	d0d0      	beq.n	8014800 <_scanf_chars+0x30>
 801485e:	6823      	ldr	r3, [r4, #0]
 8014860:	f013 0310 	ands.w	r3, r3, #16
 8014864:	d105      	bne.n	8014872 <_scanf_chars+0xa2>
 8014866:	68e2      	ldr	r2, [r4, #12]
 8014868:	3201      	adds	r2, #1
 801486a:	60e2      	str	r2, [r4, #12]
 801486c:	69a2      	ldr	r2, [r4, #24]
 801486e:	b102      	cbz	r2, 8014872 <_scanf_chars+0xa2>
 8014870:	7033      	strb	r3, [r6, #0]
 8014872:	6923      	ldr	r3, [r4, #16]
 8014874:	441f      	add	r7, r3
 8014876:	6127      	str	r7, [r4, #16]
 8014878:	2000      	movs	r0, #0
 801487a:	e7cb      	b.n	8014814 <_scanf_chars+0x44>
 801487c:	08017bad 	.word	0x08017bad

08014880 <_scanf_i>:
 8014880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014884:	4698      	mov	r8, r3
 8014886:	4b74      	ldr	r3, [pc, #464]	; (8014a58 <_scanf_i+0x1d8>)
 8014888:	460c      	mov	r4, r1
 801488a:	4682      	mov	sl, r0
 801488c:	4616      	mov	r6, r2
 801488e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014892:	b087      	sub	sp, #28
 8014894:	ab03      	add	r3, sp, #12
 8014896:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801489a:	4b70      	ldr	r3, [pc, #448]	; (8014a5c <_scanf_i+0x1dc>)
 801489c:	69a1      	ldr	r1, [r4, #24]
 801489e:	4a70      	ldr	r2, [pc, #448]	; (8014a60 <_scanf_i+0x1e0>)
 80148a0:	2903      	cmp	r1, #3
 80148a2:	bf18      	it	ne
 80148a4:	461a      	movne	r2, r3
 80148a6:	68a3      	ldr	r3, [r4, #8]
 80148a8:	9201      	str	r2, [sp, #4]
 80148aa:	1e5a      	subs	r2, r3, #1
 80148ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80148b0:	bf88      	it	hi
 80148b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80148b6:	4627      	mov	r7, r4
 80148b8:	bf82      	ittt	hi
 80148ba:	eb03 0905 	addhi.w	r9, r3, r5
 80148be:	f240 135d 	movwhi	r3, #349	; 0x15d
 80148c2:	60a3      	strhi	r3, [r4, #8]
 80148c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80148c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80148cc:	bf98      	it	ls
 80148ce:	f04f 0900 	movls.w	r9, #0
 80148d2:	6023      	str	r3, [r4, #0]
 80148d4:	463d      	mov	r5, r7
 80148d6:	f04f 0b00 	mov.w	fp, #0
 80148da:	6831      	ldr	r1, [r6, #0]
 80148dc:	ab03      	add	r3, sp, #12
 80148de:	7809      	ldrb	r1, [r1, #0]
 80148e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80148e4:	2202      	movs	r2, #2
 80148e6:	f7eb fcbb 	bl	8000260 <memchr>
 80148ea:	b328      	cbz	r0, 8014938 <_scanf_i+0xb8>
 80148ec:	f1bb 0f01 	cmp.w	fp, #1
 80148f0:	d159      	bne.n	80149a6 <_scanf_i+0x126>
 80148f2:	6862      	ldr	r2, [r4, #4]
 80148f4:	b92a      	cbnz	r2, 8014902 <_scanf_i+0x82>
 80148f6:	6822      	ldr	r2, [r4, #0]
 80148f8:	2308      	movs	r3, #8
 80148fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80148fe:	6063      	str	r3, [r4, #4]
 8014900:	6022      	str	r2, [r4, #0]
 8014902:	6822      	ldr	r2, [r4, #0]
 8014904:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014908:	6022      	str	r2, [r4, #0]
 801490a:	68a2      	ldr	r2, [r4, #8]
 801490c:	1e51      	subs	r1, r2, #1
 801490e:	60a1      	str	r1, [r4, #8]
 8014910:	b192      	cbz	r2, 8014938 <_scanf_i+0xb8>
 8014912:	6832      	ldr	r2, [r6, #0]
 8014914:	1c51      	adds	r1, r2, #1
 8014916:	6031      	str	r1, [r6, #0]
 8014918:	7812      	ldrb	r2, [r2, #0]
 801491a:	f805 2b01 	strb.w	r2, [r5], #1
 801491e:	6872      	ldr	r2, [r6, #4]
 8014920:	3a01      	subs	r2, #1
 8014922:	2a00      	cmp	r2, #0
 8014924:	6072      	str	r2, [r6, #4]
 8014926:	dc07      	bgt.n	8014938 <_scanf_i+0xb8>
 8014928:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801492c:	4631      	mov	r1, r6
 801492e:	4650      	mov	r0, sl
 8014930:	4790      	blx	r2
 8014932:	2800      	cmp	r0, #0
 8014934:	f040 8085 	bne.w	8014a42 <_scanf_i+0x1c2>
 8014938:	f10b 0b01 	add.w	fp, fp, #1
 801493c:	f1bb 0f03 	cmp.w	fp, #3
 8014940:	d1cb      	bne.n	80148da <_scanf_i+0x5a>
 8014942:	6863      	ldr	r3, [r4, #4]
 8014944:	b90b      	cbnz	r3, 801494a <_scanf_i+0xca>
 8014946:	230a      	movs	r3, #10
 8014948:	6063      	str	r3, [r4, #4]
 801494a:	6863      	ldr	r3, [r4, #4]
 801494c:	4945      	ldr	r1, [pc, #276]	; (8014a64 <_scanf_i+0x1e4>)
 801494e:	6960      	ldr	r0, [r4, #20]
 8014950:	1ac9      	subs	r1, r1, r3
 8014952:	f000 f889 	bl	8014a68 <__sccl>
 8014956:	f04f 0b00 	mov.w	fp, #0
 801495a:	68a3      	ldr	r3, [r4, #8]
 801495c:	6822      	ldr	r2, [r4, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d03d      	beq.n	80149de <_scanf_i+0x15e>
 8014962:	6831      	ldr	r1, [r6, #0]
 8014964:	6960      	ldr	r0, [r4, #20]
 8014966:	f891 c000 	ldrb.w	ip, [r1]
 801496a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801496e:	2800      	cmp	r0, #0
 8014970:	d035      	beq.n	80149de <_scanf_i+0x15e>
 8014972:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014976:	d124      	bne.n	80149c2 <_scanf_i+0x142>
 8014978:	0510      	lsls	r0, r2, #20
 801497a:	d522      	bpl.n	80149c2 <_scanf_i+0x142>
 801497c:	f10b 0b01 	add.w	fp, fp, #1
 8014980:	f1b9 0f00 	cmp.w	r9, #0
 8014984:	d003      	beq.n	801498e <_scanf_i+0x10e>
 8014986:	3301      	adds	r3, #1
 8014988:	f109 39ff 	add.w	r9, r9, #4294967295
 801498c:	60a3      	str	r3, [r4, #8]
 801498e:	6873      	ldr	r3, [r6, #4]
 8014990:	3b01      	subs	r3, #1
 8014992:	2b00      	cmp	r3, #0
 8014994:	6073      	str	r3, [r6, #4]
 8014996:	dd1b      	ble.n	80149d0 <_scanf_i+0x150>
 8014998:	6833      	ldr	r3, [r6, #0]
 801499a:	3301      	adds	r3, #1
 801499c:	6033      	str	r3, [r6, #0]
 801499e:	68a3      	ldr	r3, [r4, #8]
 80149a0:	3b01      	subs	r3, #1
 80149a2:	60a3      	str	r3, [r4, #8]
 80149a4:	e7d9      	b.n	801495a <_scanf_i+0xda>
 80149a6:	f1bb 0f02 	cmp.w	fp, #2
 80149aa:	d1ae      	bne.n	801490a <_scanf_i+0x8a>
 80149ac:	6822      	ldr	r2, [r4, #0]
 80149ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80149b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80149b6:	d1bf      	bne.n	8014938 <_scanf_i+0xb8>
 80149b8:	2310      	movs	r3, #16
 80149ba:	6063      	str	r3, [r4, #4]
 80149bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80149c0:	e7a2      	b.n	8014908 <_scanf_i+0x88>
 80149c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80149c6:	6022      	str	r2, [r4, #0]
 80149c8:	780b      	ldrb	r3, [r1, #0]
 80149ca:	f805 3b01 	strb.w	r3, [r5], #1
 80149ce:	e7de      	b.n	801498e <_scanf_i+0x10e>
 80149d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80149d4:	4631      	mov	r1, r6
 80149d6:	4650      	mov	r0, sl
 80149d8:	4798      	blx	r3
 80149da:	2800      	cmp	r0, #0
 80149dc:	d0df      	beq.n	801499e <_scanf_i+0x11e>
 80149de:	6823      	ldr	r3, [r4, #0]
 80149e0:	05d9      	lsls	r1, r3, #23
 80149e2:	d50d      	bpl.n	8014a00 <_scanf_i+0x180>
 80149e4:	42bd      	cmp	r5, r7
 80149e6:	d909      	bls.n	80149fc <_scanf_i+0x17c>
 80149e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80149ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149f0:	4632      	mov	r2, r6
 80149f2:	4650      	mov	r0, sl
 80149f4:	4798      	blx	r3
 80149f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80149fa:	464d      	mov	r5, r9
 80149fc:	42bd      	cmp	r5, r7
 80149fe:	d028      	beq.n	8014a52 <_scanf_i+0x1d2>
 8014a00:	6822      	ldr	r2, [r4, #0]
 8014a02:	f012 0210 	ands.w	r2, r2, #16
 8014a06:	d113      	bne.n	8014a30 <_scanf_i+0x1b0>
 8014a08:	702a      	strb	r2, [r5, #0]
 8014a0a:	6863      	ldr	r3, [r4, #4]
 8014a0c:	9e01      	ldr	r6, [sp, #4]
 8014a0e:	4639      	mov	r1, r7
 8014a10:	4650      	mov	r0, sl
 8014a12:	47b0      	blx	r6
 8014a14:	f8d8 3000 	ldr.w	r3, [r8]
 8014a18:	6821      	ldr	r1, [r4, #0]
 8014a1a:	1d1a      	adds	r2, r3, #4
 8014a1c:	f8c8 2000 	str.w	r2, [r8]
 8014a20:	f011 0f20 	tst.w	r1, #32
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	d00f      	beq.n	8014a48 <_scanf_i+0x1c8>
 8014a28:	6018      	str	r0, [r3, #0]
 8014a2a:	68e3      	ldr	r3, [r4, #12]
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	60e3      	str	r3, [r4, #12]
 8014a30:	1bed      	subs	r5, r5, r7
 8014a32:	44ab      	add	fp, r5
 8014a34:	6925      	ldr	r5, [r4, #16]
 8014a36:	445d      	add	r5, fp
 8014a38:	6125      	str	r5, [r4, #16]
 8014a3a:	2000      	movs	r0, #0
 8014a3c:	b007      	add	sp, #28
 8014a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a42:	f04f 0b00 	mov.w	fp, #0
 8014a46:	e7ca      	b.n	80149de <_scanf_i+0x15e>
 8014a48:	07ca      	lsls	r2, r1, #31
 8014a4a:	bf4c      	ite	mi
 8014a4c:	8018      	strhmi	r0, [r3, #0]
 8014a4e:	6018      	strpl	r0, [r3, #0]
 8014a50:	e7eb      	b.n	8014a2a <_scanf_i+0x1aa>
 8014a52:	2001      	movs	r0, #1
 8014a54:	e7f2      	b.n	8014a3c <_scanf_i+0x1bc>
 8014a56:	bf00      	nop
 8014a58:	08016bac 	.word	0x08016bac
 8014a5c:	08012de9 	.word	0x08012de9
 8014a60:	08014be5 	.word	0x08014be5
 8014a64:	08017d03 	.word	0x08017d03

08014a68 <__sccl>:
 8014a68:	b570      	push	{r4, r5, r6, lr}
 8014a6a:	780b      	ldrb	r3, [r1, #0]
 8014a6c:	4604      	mov	r4, r0
 8014a6e:	2b5e      	cmp	r3, #94	; 0x5e
 8014a70:	bf0b      	itete	eq
 8014a72:	784b      	ldrbeq	r3, [r1, #1]
 8014a74:	1c48      	addne	r0, r1, #1
 8014a76:	1c88      	addeq	r0, r1, #2
 8014a78:	2200      	movne	r2, #0
 8014a7a:	bf08      	it	eq
 8014a7c:	2201      	moveq	r2, #1
 8014a7e:	1e61      	subs	r1, r4, #1
 8014a80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014a84:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014a88:	42a9      	cmp	r1, r5
 8014a8a:	d1fb      	bne.n	8014a84 <__sccl+0x1c>
 8014a8c:	b90b      	cbnz	r3, 8014a92 <__sccl+0x2a>
 8014a8e:	3801      	subs	r0, #1
 8014a90:	bd70      	pop	{r4, r5, r6, pc}
 8014a92:	f082 0101 	eor.w	r1, r2, #1
 8014a96:	54e1      	strb	r1, [r4, r3]
 8014a98:	1c42      	adds	r2, r0, #1
 8014a9a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8014a9e:	2d2d      	cmp	r5, #45	; 0x2d
 8014aa0:	f102 36ff 	add.w	r6, r2, #4294967295
 8014aa4:	4610      	mov	r0, r2
 8014aa6:	d006      	beq.n	8014ab6 <__sccl+0x4e>
 8014aa8:	2d5d      	cmp	r5, #93	; 0x5d
 8014aaa:	d0f1      	beq.n	8014a90 <__sccl+0x28>
 8014aac:	b90d      	cbnz	r5, 8014ab2 <__sccl+0x4a>
 8014aae:	4630      	mov	r0, r6
 8014ab0:	e7ee      	b.n	8014a90 <__sccl+0x28>
 8014ab2:	462b      	mov	r3, r5
 8014ab4:	e7ef      	b.n	8014a96 <__sccl+0x2e>
 8014ab6:	7816      	ldrb	r6, [r2, #0]
 8014ab8:	2e5d      	cmp	r6, #93	; 0x5d
 8014aba:	d0fa      	beq.n	8014ab2 <__sccl+0x4a>
 8014abc:	42b3      	cmp	r3, r6
 8014abe:	dcf8      	bgt.n	8014ab2 <__sccl+0x4a>
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3001      	adds	r0, #1
 8014ac4:	4286      	cmp	r6, r0
 8014ac6:	5421      	strb	r1, [r4, r0]
 8014ac8:	dcfb      	bgt.n	8014ac2 <__sccl+0x5a>
 8014aca:	43d8      	mvns	r0, r3
 8014acc:	4430      	add	r0, r6
 8014ace:	1c5d      	adds	r5, r3, #1
 8014ad0:	42b3      	cmp	r3, r6
 8014ad2:	bfa8      	it	ge
 8014ad4:	2000      	movge	r0, #0
 8014ad6:	182b      	adds	r3, r5, r0
 8014ad8:	3202      	adds	r2, #2
 8014ada:	e7de      	b.n	8014a9a <__sccl+0x32>

08014adc <_strtol_l.isra.0>:
 8014adc:	2b01      	cmp	r3, #1
 8014ade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ae2:	d001      	beq.n	8014ae8 <_strtol_l.isra.0+0xc>
 8014ae4:	2b24      	cmp	r3, #36	; 0x24
 8014ae6:	d906      	bls.n	8014af6 <_strtol_l.isra.0+0x1a>
 8014ae8:	f7fc fbde 	bl	80112a8 <__errno>
 8014aec:	2316      	movs	r3, #22
 8014aee:	6003      	str	r3, [r0, #0]
 8014af0:	2000      	movs	r0, #0
 8014af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014af6:	4f3a      	ldr	r7, [pc, #232]	; (8014be0 <_strtol_l.isra.0+0x104>)
 8014af8:	468e      	mov	lr, r1
 8014afa:	4676      	mov	r6, lr
 8014afc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014b00:	5de5      	ldrb	r5, [r4, r7]
 8014b02:	f015 0508 	ands.w	r5, r5, #8
 8014b06:	d1f8      	bne.n	8014afa <_strtol_l.isra.0+0x1e>
 8014b08:	2c2d      	cmp	r4, #45	; 0x2d
 8014b0a:	d134      	bne.n	8014b76 <_strtol_l.isra.0+0x9a>
 8014b0c:	f89e 4000 	ldrb.w	r4, [lr]
 8014b10:	f04f 0801 	mov.w	r8, #1
 8014b14:	f106 0e02 	add.w	lr, r6, #2
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d05c      	beq.n	8014bd6 <_strtol_l.isra.0+0xfa>
 8014b1c:	2b10      	cmp	r3, #16
 8014b1e:	d10c      	bne.n	8014b3a <_strtol_l.isra.0+0x5e>
 8014b20:	2c30      	cmp	r4, #48	; 0x30
 8014b22:	d10a      	bne.n	8014b3a <_strtol_l.isra.0+0x5e>
 8014b24:	f89e 4000 	ldrb.w	r4, [lr]
 8014b28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014b2c:	2c58      	cmp	r4, #88	; 0x58
 8014b2e:	d14d      	bne.n	8014bcc <_strtol_l.isra.0+0xf0>
 8014b30:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014b34:	2310      	movs	r3, #16
 8014b36:	f10e 0e02 	add.w	lr, lr, #2
 8014b3a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014b3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014b42:	2600      	movs	r6, #0
 8014b44:	fbbc f9f3 	udiv	r9, ip, r3
 8014b48:	4635      	mov	r5, r6
 8014b4a:	fb03 ca19 	mls	sl, r3, r9, ip
 8014b4e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014b52:	2f09      	cmp	r7, #9
 8014b54:	d818      	bhi.n	8014b88 <_strtol_l.isra.0+0xac>
 8014b56:	463c      	mov	r4, r7
 8014b58:	42a3      	cmp	r3, r4
 8014b5a:	dd24      	ble.n	8014ba6 <_strtol_l.isra.0+0xca>
 8014b5c:	2e00      	cmp	r6, #0
 8014b5e:	db1f      	blt.n	8014ba0 <_strtol_l.isra.0+0xc4>
 8014b60:	45a9      	cmp	r9, r5
 8014b62:	d31d      	bcc.n	8014ba0 <_strtol_l.isra.0+0xc4>
 8014b64:	d101      	bne.n	8014b6a <_strtol_l.isra.0+0x8e>
 8014b66:	45a2      	cmp	sl, r4
 8014b68:	db1a      	blt.n	8014ba0 <_strtol_l.isra.0+0xc4>
 8014b6a:	fb05 4503 	mla	r5, r5, r3, r4
 8014b6e:	2601      	movs	r6, #1
 8014b70:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014b74:	e7eb      	b.n	8014b4e <_strtol_l.isra.0+0x72>
 8014b76:	2c2b      	cmp	r4, #43	; 0x2b
 8014b78:	bf08      	it	eq
 8014b7a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014b7e:	46a8      	mov	r8, r5
 8014b80:	bf08      	it	eq
 8014b82:	f106 0e02 	addeq.w	lr, r6, #2
 8014b86:	e7c7      	b.n	8014b18 <_strtol_l.isra.0+0x3c>
 8014b88:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014b8c:	2f19      	cmp	r7, #25
 8014b8e:	d801      	bhi.n	8014b94 <_strtol_l.isra.0+0xb8>
 8014b90:	3c37      	subs	r4, #55	; 0x37
 8014b92:	e7e1      	b.n	8014b58 <_strtol_l.isra.0+0x7c>
 8014b94:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014b98:	2f19      	cmp	r7, #25
 8014b9a:	d804      	bhi.n	8014ba6 <_strtol_l.isra.0+0xca>
 8014b9c:	3c57      	subs	r4, #87	; 0x57
 8014b9e:	e7db      	b.n	8014b58 <_strtol_l.isra.0+0x7c>
 8014ba0:	f04f 36ff 	mov.w	r6, #4294967295
 8014ba4:	e7e4      	b.n	8014b70 <_strtol_l.isra.0+0x94>
 8014ba6:	2e00      	cmp	r6, #0
 8014ba8:	da05      	bge.n	8014bb6 <_strtol_l.isra.0+0xda>
 8014baa:	2322      	movs	r3, #34	; 0x22
 8014bac:	6003      	str	r3, [r0, #0]
 8014bae:	4665      	mov	r5, ip
 8014bb0:	b942      	cbnz	r2, 8014bc4 <_strtol_l.isra.0+0xe8>
 8014bb2:	4628      	mov	r0, r5
 8014bb4:	e79d      	b.n	8014af2 <_strtol_l.isra.0+0x16>
 8014bb6:	f1b8 0f00 	cmp.w	r8, #0
 8014bba:	d000      	beq.n	8014bbe <_strtol_l.isra.0+0xe2>
 8014bbc:	426d      	negs	r5, r5
 8014bbe:	2a00      	cmp	r2, #0
 8014bc0:	d0f7      	beq.n	8014bb2 <_strtol_l.isra.0+0xd6>
 8014bc2:	b10e      	cbz	r6, 8014bc8 <_strtol_l.isra.0+0xec>
 8014bc4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8014bc8:	6011      	str	r1, [r2, #0]
 8014bca:	e7f2      	b.n	8014bb2 <_strtol_l.isra.0+0xd6>
 8014bcc:	2430      	movs	r4, #48	; 0x30
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d1b3      	bne.n	8014b3a <_strtol_l.isra.0+0x5e>
 8014bd2:	2308      	movs	r3, #8
 8014bd4:	e7b1      	b.n	8014b3a <_strtol_l.isra.0+0x5e>
 8014bd6:	2c30      	cmp	r4, #48	; 0x30
 8014bd8:	d0a4      	beq.n	8014b24 <_strtol_l.isra.0+0x48>
 8014bda:	230a      	movs	r3, #10
 8014bdc:	e7ad      	b.n	8014b3a <_strtol_l.isra.0+0x5e>
 8014bde:	bf00      	nop
 8014be0:	08017bad 	.word	0x08017bad

08014be4 <_strtol_r>:
 8014be4:	f7ff bf7a 	b.w	8014adc <_strtol_l.isra.0>

08014be8 <__submore>:
 8014be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bec:	460c      	mov	r4, r1
 8014bee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bf4:	4299      	cmp	r1, r3
 8014bf6:	d11d      	bne.n	8014c34 <__submore+0x4c>
 8014bf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014bfc:	f7fd f98a 	bl	8011f14 <_malloc_r>
 8014c00:	b918      	cbnz	r0, 8014c0a <__submore+0x22>
 8014c02:	f04f 30ff 	mov.w	r0, #4294967295
 8014c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c0e:	63a3      	str	r3, [r4, #56]	; 0x38
 8014c10:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014c14:	6360      	str	r0, [r4, #52]	; 0x34
 8014c16:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014c1a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014c1e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014c22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014c26:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014c2a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014c2e:	6020      	str	r0, [r4, #0]
 8014c30:	2000      	movs	r0, #0
 8014c32:	e7e8      	b.n	8014c06 <__submore+0x1e>
 8014c34:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014c36:	0077      	lsls	r7, r6, #1
 8014c38:	463a      	mov	r2, r7
 8014c3a:	f7fe fe77 	bl	801392c <_realloc_r>
 8014c3e:	4605      	mov	r5, r0
 8014c40:	2800      	cmp	r0, #0
 8014c42:	d0de      	beq.n	8014c02 <__submore+0x1a>
 8014c44:	eb00 0806 	add.w	r8, r0, r6
 8014c48:	4601      	mov	r1, r0
 8014c4a:	4632      	mov	r2, r6
 8014c4c:	4640      	mov	r0, r8
 8014c4e:	f7fd f8fb 	bl	8011e48 <memcpy>
 8014c52:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014c56:	f8c4 8000 	str.w	r8, [r4]
 8014c5a:	e7e9      	b.n	8014c30 <__submore+0x48>

08014c5c <_gettimeofday>:
 8014c5c:	4b02      	ldr	r3, [pc, #8]	; (8014c68 <_gettimeofday+0xc>)
 8014c5e:	2258      	movs	r2, #88	; 0x58
 8014c60:	601a      	str	r2, [r3, #0]
 8014c62:	f04f 30ff 	mov.w	r0, #4294967295
 8014c66:	4770      	bx	lr
 8014c68:	20000ba4 	.word	0x20000ba4

08014c6c <_init>:
 8014c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c6e:	bf00      	nop
 8014c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c72:	bc08      	pop	{r3}
 8014c74:	469e      	mov	lr, r3
 8014c76:	4770      	bx	lr

08014c78 <_fini>:
 8014c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c7a:	bf00      	nop
 8014c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c7e:	bc08      	pop	{r3}
 8014c80:	469e      	mov	lr, r3
 8014c82:	4770      	bx	lr
